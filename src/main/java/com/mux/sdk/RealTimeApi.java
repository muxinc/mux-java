/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mux.sdk;

import com.mux.ApiCallback;
import com.mux.ApiClient;
import com.mux.ApiException;
import com.mux.ApiResponse;
import com.mux.Configuration;
import com.mux.Pair;
import com.mux.ProgressRequestBody;
import com.mux.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.mux.sdk.models.GetRealTimeBreakdownResponse;
import com.mux.sdk.models.GetRealTimeHistogramTimeseriesResponse;
import com.mux.sdk.models.GetRealTimeTimeseriesResponse;
import com.mux.sdk.models.ListRealTimeDimensionsResponse;
import com.mux.sdk.models.ListRealTimeMetricsResponse;

import java.lang.reflect.Type;

public class RealTimeApi {
    private ApiClient localVarApiClient;

    public RealTimeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RealTimeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getRealtimeBreakdown
     * @param REALTIME_METRIC_ID ID of the Realtime Metric (required)
     * @param dimension Dimension the specified value belongs to (optional)
     * @param timestamp Timestamp to limit results by. This value must be provided as a unix timestamp. Defaults to the current unix timestamp. (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param orderBy Value to order the results by (optional)
     * @param orderDirection Sort order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRealtimeBreakdownCall(String REALTIME_METRIC_ID, String dimension, BigDecimal timestamp, java.util.List<String> filters, String orderBy, String orderDirection, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/realtime/metrics/{REALTIME_METRIC_ID}/breakdown"
            .replaceAll("\\{" + "REALTIME_METRIC_ID" + "\\}", localVarApiClient.escapeString(REALTIME_METRIC_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (dimension != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dimension", dimension));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamp", timestamp));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filters[]", filters));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (orderDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_direction", orderDirection));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRealtimeBreakdownValidateBeforeCall(String REALTIME_METRIC_ID, String dimension, BigDecimal timestamp, java.util.List<String> filters, String orderBy, String orderDirection, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'REALTIME_METRIC_ID' is set
        if (REALTIME_METRIC_ID == null) {
            throw new ApiException("Missing the required parameter 'REALTIME_METRIC_ID' when calling getRealtimeBreakdown(Async)");
        }
        

        okhttp3.Call localVarCall = getRealtimeBreakdownCall(REALTIME_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection, _callback);
        return localVarCall;

    }

    /**
     * Get Real-Time Breakdown
     * Gets breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score. 
     * @param REALTIME_METRIC_ID ID of the Realtime Metric (required)
     * @param dimension Dimension the specified value belongs to (optional)
     * @param timestamp Timestamp to limit results by. This value must be provided as a unix timestamp. Defaults to the current unix timestamp. (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param orderBy Value to order the results by (optional)
     * @param orderDirection Sort order. (optional)
     * @return GetRealTimeBreakdownResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetRealTimeBreakdownResponse getRealtimeBreakdown(String REALTIME_METRIC_ID, String dimension, BigDecimal timestamp, java.util.List<String> filters, String orderBy, String orderDirection) throws ApiException {
        ApiResponse<GetRealTimeBreakdownResponse> localVarResp = getRealtimeBreakdownWithHttpInfo(REALTIME_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection);
        return localVarResp.getData();
    }

    /**
     * Get Real-Time Breakdown
     * Gets breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score. 
     * @param REALTIME_METRIC_ID ID of the Realtime Metric (required)
     * @param dimension Dimension the specified value belongs to (optional)
     * @param timestamp Timestamp to limit results by. This value must be provided as a unix timestamp. Defaults to the current unix timestamp. (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param orderBy Value to order the results by (optional)
     * @param orderDirection Sort order. (optional)
     * @return ApiResponse&lt;GetRealTimeBreakdownResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRealTimeBreakdownResponse> getRealtimeBreakdownWithHttpInfo(String REALTIME_METRIC_ID, String dimension, BigDecimal timestamp, java.util.List<String> filters, String orderBy, String orderDirection) throws ApiException {
        okhttp3.Call localVarCall = getRealtimeBreakdownValidateBeforeCall(REALTIME_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection, null);
        Type localVarReturnType = new TypeToken<GetRealTimeBreakdownResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Real-Time Breakdown (asynchronously)
     * Gets breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score. 
     * @param REALTIME_METRIC_ID ID of the Realtime Metric (required)
     * @param dimension Dimension the specified value belongs to (optional)
     * @param timestamp Timestamp to limit results by. This value must be provided as a unix timestamp. Defaults to the current unix timestamp. (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param orderBy Value to order the results by (optional)
     * @param orderDirection Sort order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRealtimeBreakdownAsync(String REALTIME_METRIC_ID, String dimension, BigDecimal timestamp, java.util.List<String> filters, String orderBy, String orderDirection, final ApiCallback<GetRealTimeBreakdownResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRealtimeBreakdownValidateBeforeCall(REALTIME_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection, _callback);
        Type localVarReturnType = new TypeToken<GetRealTimeBreakdownResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRealtimeHistogramTimeseries
     * @param REALTIME_METRIC_ID ID of the Realtime Metric (required)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRealtimeHistogramTimeseriesCall(String REALTIME_METRIC_ID, java.util.List<String> filters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/realtime/metrics/{REALTIME_HISTOGRAM_METRIC_ID}/histogram-timeseries"
            .replaceAll("\\{" + "REALTIME_METRIC_ID" + "\\}", localVarApiClient.escapeString(REALTIME_METRIC_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filters[]", filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRealtimeHistogramTimeseriesValidateBeforeCall(String REALTIME_METRIC_ID, java.util.List<String> filters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'REALTIME_METRIC_ID' is set
        if (REALTIME_METRIC_ID == null) {
            throw new ApiException("Missing the required parameter 'REALTIME_METRIC_ID' when calling getRealtimeHistogramTimeseries(Async)");
        }
        

        okhttp3.Call localVarCall = getRealtimeHistogramTimeseriesCall(REALTIME_METRIC_ID, filters, _callback);
        return localVarCall;

    }

    /**
     * Get Real-Time Histogram Timeseries
     * Gets histogram timeseries information for a specific metric. 
     * @param REALTIME_METRIC_ID ID of the Realtime Metric (required)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @return GetRealTimeHistogramTimeseriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetRealTimeHistogramTimeseriesResponse getRealtimeHistogramTimeseries(String REALTIME_METRIC_ID, java.util.List<String> filters) throws ApiException {
        ApiResponse<GetRealTimeHistogramTimeseriesResponse> localVarResp = getRealtimeHistogramTimeseriesWithHttpInfo(REALTIME_METRIC_ID, filters);
        return localVarResp.getData();
    }

    /**
     * Get Real-Time Histogram Timeseries
     * Gets histogram timeseries information for a specific metric. 
     * @param REALTIME_METRIC_ID ID of the Realtime Metric (required)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @return ApiResponse&lt;GetRealTimeHistogramTimeseriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRealTimeHistogramTimeseriesResponse> getRealtimeHistogramTimeseriesWithHttpInfo(String REALTIME_METRIC_ID, java.util.List<String> filters) throws ApiException {
        okhttp3.Call localVarCall = getRealtimeHistogramTimeseriesValidateBeforeCall(REALTIME_METRIC_ID, filters, null);
        Type localVarReturnType = new TypeToken<GetRealTimeHistogramTimeseriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Real-Time Histogram Timeseries (asynchronously)
     * Gets histogram timeseries information for a specific metric. 
     * @param REALTIME_METRIC_ID ID of the Realtime Metric (required)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRealtimeHistogramTimeseriesAsync(String REALTIME_METRIC_ID, java.util.List<String> filters, final ApiCallback<GetRealTimeHistogramTimeseriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRealtimeHistogramTimeseriesValidateBeforeCall(REALTIME_METRIC_ID, filters, _callback);
        Type localVarReturnType = new TypeToken<GetRealTimeHistogramTimeseriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRealtimeTimeseries
     * @param REALTIME_METRIC_ID ID of the Realtime Metric (required)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRealtimeTimeseriesCall(String REALTIME_METRIC_ID, java.util.List<String> filters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/realtime/metrics/{REALTIME_METRIC_ID}/timeseries"
            .replaceAll("\\{" + "REALTIME_METRIC_ID" + "\\}", localVarApiClient.escapeString(REALTIME_METRIC_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filters[]", filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRealtimeTimeseriesValidateBeforeCall(String REALTIME_METRIC_ID, java.util.List<String> filters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'REALTIME_METRIC_ID' is set
        if (REALTIME_METRIC_ID == null) {
            throw new ApiException("Missing the required parameter 'REALTIME_METRIC_ID' when calling getRealtimeTimeseries(Async)");
        }
        

        okhttp3.Call localVarCall = getRealtimeTimeseriesCall(REALTIME_METRIC_ID, filters, _callback);
        return localVarCall;

    }

    /**
     * Get Real-Time Timeseries
     * Gets Time series information for a specific metric along with the number of concurrent viewers. 
     * @param REALTIME_METRIC_ID ID of the Realtime Metric (required)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @return GetRealTimeTimeseriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetRealTimeTimeseriesResponse getRealtimeTimeseries(String REALTIME_METRIC_ID, java.util.List<String> filters) throws ApiException {
        ApiResponse<GetRealTimeTimeseriesResponse> localVarResp = getRealtimeTimeseriesWithHttpInfo(REALTIME_METRIC_ID, filters);
        return localVarResp.getData();
    }

    /**
     * Get Real-Time Timeseries
     * Gets Time series information for a specific metric along with the number of concurrent viewers. 
     * @param REALTIME_METRIC_ID ID of the Realtime Metric (required)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @return ApiResponse&lt;GetRealTimeTimeseriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRealTimeTimeseriesResponse> getRealtimeTimeseriesWithHttpInfo(String REALTIME_METRIC_ID, java.util.List<String> filters) throws ApiException {
        okhttp3.Call localVarCall = getRealtimeTimeseriesValidateBeforeCall(REALTIME_METRIC_ID, filters, null);
        Type localVarReturnType = new TypeToken<GetRealTimeTimeseriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Real-Time Timeseries (asynchronously)
     * Gets Time series information for a specific metric along with the number of concurrent viewers. 
     * @param REALTIME_METRIC_ID ID of the Realtime Metric (required)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRealtimeTimeseriesAsync(String REALTIME_METRIC_ID, java.util.List<String> filters, final ApiCallback<GetRealTimeTimeseriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRealtimeTimeseriesValidateBeforeCall(REALTIME_METRIC_ID, filters, _callback);
        Type localVarReturnType = new TypeToken<GetRealTimeTimeseriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRealtimeDimensions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRealtimeDimensionsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/realtime/dimensions";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRealtimeDimensionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listRealtimeDimensionsCall(_callback);
        return localVarCall;

    }

    /**
     * List Real-Time Dimensions
     * Lists availiable real-time dimensions 
     * @return ListRealTimeDimensionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListRealTimeDimensionsResponse listRealtimeDimensions() throws ApiException {
        ApiResponse<ListRealTimeDimensionsResponse> localVarResp = listRealtimeDimensionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List Real-Time Dimensions
     * Lists availiable real-time dimensions 
     * @return ApiResponse&lt;ListRealTimeDimensionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRealTimeDimensionsResponse> listRealtimeDimensionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listRealtimeDimensionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListRealTimeDimensionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Real-Time Dimensions (asynchronously)
     * Lists availiable real-time dimensions 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRealtimeDimensionsAsync(final ApiCallback<ListRealTimeDimensionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRealtimeDimensionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListRealTimeDimensionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRealtimeMetrics
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRealtimeMetricsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/realtime/metrics";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRealtimeMetricsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listRealtimeMetricsCall(_callback);
        return localVarCall;

    }

    /**
     * List Real-Time Metrics
     * Lists availiable real-time metrics. 
     * @return ListRealTimeMetricsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListRealTimeMetricsResponse listRealtimeMetrics() throws ApiException {
        ApiResponse<ListRealTimeMetricsResponse> localVarResp = listRealtimeMetricsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List Real-Time Metrics
     * Lists availiable real-time metrics. 
     * @return ApiResponse&lt;ListRealTimeMetricsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRealTimeMetricsResponse> listRealtimeMetricsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listRealtimeMetricsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListRealTimeMetricsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Real-Time Metrics (asynchronously)
     * Lists availiable real-time metrics. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRealtimeMetricsAsync(final ApiCallback<ListRealTimeMetricsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRealtimeMetricsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListRealTimeMetricsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
