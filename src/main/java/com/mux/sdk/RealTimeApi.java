/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mux.sdk;

import com.mux.ApiCallback;
import com.mux.ApiClient;
import com.mux.ApiException;
import com.mux.ApiResponse;
import com.mux.Configuration;
import com.mux.Pair;
import com.mux.ProgressRequestBody;
import com.mux.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mux.sdk.models.GetRealTimeBreakdownResponse;
import com.mux.sdk.models.GetRealTimeHistogramTimeseriesResponse;
import com.mux.sdk.models.GetRealTimeTimeseriesResponse;
import com.mux.sdk.models.ListRealTimeDimensionsResponse;
import com.mux.sdk.models.ListRealTimeMetricsResponse;
// TODO: due to import parsing issues for the RDR type; fix in spec in future
import com.mux.sdk.models.ReferrerDomainRestriction;

import java.lang.reflect.Type;

public class RealTimeApi {
    private ApiClient localVarApiClient;

    public RealTimeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RealTimeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call getRealtimeBreakdownCall(String REALTIME_METRIC_ID, String dimension, Integer timestamp, java.util.List<String> filters, String orderBy, String orderDirection, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/realtime/metrics/{REALTIME_METRIC_ID}/breakdown"
            .replaceAll("\\{" + "REALTIME_METRIC_ID" + "\\}", localVarApiClient.escapeString(REALTIME_METRIC_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (dimension != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dimension", dimension));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamp", timestamp));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filters[]", filters));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (orderDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_direction", orderDirection));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRealtimeBreakdownValidateBeforeCall(String REALTIME_METRIC_ID, String dimension, Integer timestamp, java.util.List<String> filters, String orderBy, String orderDirection, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'REALTIME_METRIC_ID' is set
        if (REALTIME_METRIC_ID == null) {
            throw new ApiException("Missing the required parameter 'REALTIME_METRIC_ID' when calling getRealtimeBreakdown(Async)");
        }
        

        okhttp3.Call localVarCall = getRealtimeBreakdownCall(REALTIME_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection, _callback);
        return localVarCall;

    }


    private ApiResponse<GetRealTimeBreakdownResponse> getRealtimeBreakdownWithHttpInfo(String REALTIME_METRIC_ID, String dimension, Integer timestamp, java.util.List<String> filters, String orderBy, String orderDirection) throws ApiException {
        okhttp3.Call localVarCall = getRealtimeBreakdownValidateBeforeCall(REALTIME_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection, null);
        Type localVarReturnType = new TypeToken<GetRealTimeBreakdownResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRealtimeBreakdownAsync(String REALTIME_METRIC_ID, String dimension, Integer timestamp, java.util.List<String> filters, String orderBy, String orderDirection, final ApiCallback<GetRealTimeBreakdownResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRealtimeBreakdownValidateBeforeCall(REALTIME_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection, _callback);
        Type localVarReturnType = new TypeToken<GetRealTimeBreakdownResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetRealtimeBreakdownRequest {
        private final String REALTIME_METRIC_ID;
        private String dimension;
        private Integer timestamp;
        private java.util.List<String> filters;
        private String orderBy;
        private String orderDirection;

        private APIgetRealtimeBreakdownRequest(String REALTIME_METRIC_ID) {
            this.REALTIME_METRIC_ID = REALTIME_METRIC_ID;
        }

        /**
         * Set dimension
         * @param dimension Dimension the specified value belongs to (optional)
         * @return APIgetRealtimeBreakdownRequest
         */
        public APIgetRealtimeBreakdownRequest dimension(String dimension) {
            this.dimension = dimension;
            return this;
        }

        /**
         * Set timestamp
         * @param timestamp Timestamp to limit results by. This value must be provided as a unix timestamp. Defaults to the current unix timestamp. (optional)
         * @return APIgetRealtimeBreakdownRequest
         */
        public APIgetRealtimeBreakdownRequest timestamp(Integer timestamp) {
            this.timestamp = timestamp;
            return this;
        }

        /**
         * Set filters
         * @param filters Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Filters endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)
         * @return APIgetRealtimeBreakdownRequest
         */
        public APIgetRealtimeBreakdownRequest filters(java.util.List<String> filters) {
            this.filters = filters;
            return this;
        }

        /**
         * Set orderBy
         * @param orderBy Value to order the results by (optional)
         * @return APIgetRealtimeBreakdownRequest
         */
        public APIgetRealtimeBreakdownRequest orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }

        /**
         * Set orderDirection
         * @param orderDirection Sort order. (optional)
         * @return APIgetRealtimeBreakdownRequest
         */
        public APIgetRealtimeBreakdownRequest orderDirection(String orderDirection) {
            this.orderDirection = orderDirection;
            return this;
        }

        /**
         * Build call for getRealtimeBreakdown
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRealtimeBreakdownCall(REALTIME_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection, _callback);
        }

        /**
         * Execute getRealtimeBreakdown request
         * @return GetRealTimeBreakdownResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GetRealTimeBreakdownResponse execute() throws ApiException {
            ApiResponse<GetRealTimeBreakdownResponse> localVarResp = getRealtimeBreakdownWithHttpInfo(REALTIME_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection);
            return localVarResp.getData();
        }

        /**
         * Execute getRealtimeBreakdown request with HTTP info returned
         * @return ApiResponse&lt;GetRealTimeBreakdownResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetRealTimeBreakdownResponse> executeWithHttpInfo() throws ApiException {
            return getRealtimeBreakdownWithHttpInfo(REALTIME_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection);
        }

        /**
         * Execute getRealtimeBreakdown request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetRealTimeBreakdownResponse> _callback) throws ApiException {
            return getRealtimeBreakdownAsync(REALTIME_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection, _callback);
        }
    }

    /**
     * Get Real-Time Breakdown
     * Gets breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score.
     * @param REALTIME_METRIC_ID ID of the Realtime Metric (required)
     * @return APIgetRealtimeBreakdownRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetRealtimeBreakdownRequest getRealtimeBreakdown(String REALTIME_METRIC_ID) {
        return new APIgetRealtimeBreakdownRequest(REALTIME_METRIC_ID);
    }
    private okhttp3.Call getRealtimeHistogramTimeseriesCall(String REALTIME_HISTOGRAM_METRIC_ID, java.util.List<String> filters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/realtime/metrics/{REALTIME_HISTOGRAM_METRIC_ID}/histogram-timeseries"
            .replaceAll("\\{" + "REALTIME_HISTOGRAM_METRIC_ID" + "\\}", localVarApiClient.escapeString(REALTIME_HISTOGRAM_METRIC_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filters[]", filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRealtimeHistogramTimeseriesValidateBeforeCall(String REALTIME_HISTOGRAM_METRIC_ID, java.util.List<String> filters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'REALTIME_HISTOGRAM_METRIC_ID' is set
        if (REALTIME_HISTOGRAM_METRIC_ID == null) {
            throw new ApiException("Missing the required parameter 'REALTIME_HISTOGRAM_METRIC_ID' when calling getRealtimeHistogramTimeseries(Async)");
        }
        

        okhttp3.Call localVarCall = getRealtimeHistogramTimeseriesCall(REALTIME_HISTOGRAM_METRIC_ID, filters, _callback);
        return localVarCall;

    }


    private ApiResponse<GetRealTimeHistogramTimeseriesResponse> getRealtimeHistogramTimeseriesWithHttpInfo(String REALTIME_HISTOGRAM_METRIC_ID, java.util.List<String> filters) throws ApiException {
        okhttp3.Call localVarCall = getRealtimeHistogramTimeseriesValidateBeforeCall(REALTIME_HISTOGRAM_METRIC_ID, filters, null);
        Type localVarReturnType = new TypeToken<GetRealTimeHistogramTimeseriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRealtimeHistogramTimeseriesAsync(String REALTIME_HISTOGRAM_METRIC_ID, java.util.List<String> filters, final ApiCallback<GetRealTimeHistogramTimeseriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRealtimeHistogramTimeseriesValidateBeforeCall(REALTIME_HISTOGRAM_METRIC_ID, filters, _callback);
        Type localVarReturnType = new TypeToken<GetRealTimeHistogramTimeseriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetRealtimeHistogramTimeseriesRequest {
        private final String REALTIME_HISTOGRAM_METRIC_ID;
        private java.util.List<String> filters;

        private APIgetRealtimeHistogramTimeseriesRequest(String REALTIME_HISTOGRAM_METRIC_ID) {
            this.REALTIME_HISTOGRAM_METRIC_ID = REALTIME_HISTOGRAM_METRIC_ID;
        }

        /**
         * Set filters
         * @param filters Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Filters endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)
         * @return APIgetRealtimeHistogramTimeseriesRequest
         */
        public APIgetRealtimeHistogramTimeseriesRequest filters(java.util.List<String> filters) {
            this.filters = filters;
            return this;
        }

        /**
         * Build call for getRealtimeHistogramTimeseries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRealtimeHistogramTimeseriesCall(REALTIME_HISTOGRAM_METRIC_ID, filters, _callback);
        }

        /**
         * Execute getRealtimeHistogramTimeseries request
         * @return GetRealTimeHistogramTimeseriesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GetRealTimeHistogramTimeseriesResponse execute() throws ApiException {
            ApiResponse<GetRealTimeHistogramTimeseriesResponse> localVarResp = getRealtimeHistogramTimeseriesWithHttpInfo(REALTIME_HISTOGRAM_METRIC_ID, filters);
            return localVarResp.getData();
        }

        /**
         * Execute getRealtimeHistogramTimeseries request with HTTP info returned
         * @return ApiResponse&lt;GetRealTimeHistogramTimeseriesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetRealTimeHistogramTimeseriesResponse> executeWithHttpInfo() throws ApiException {
            return getRealtimeHistogramTimeseriesWithHttpInfo(REALTIME_HISTOGRAM_METRIC_ID, filters);
        }

        /**
         * Execute getRealtimeHistogramTimeseries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetRealTimeHistogramTimeseriesResponse> _callback) throws ApiException {
            return getRealtimeHistogramTimeseriesAsync(REALTIME_HISTOGRAM_METRIC_ID, filters, _callback);
        }
    }

    /**
     * Get Real-Time Histogram Timeseries
     * Gets histogram timeseries information for a specific metric.
     * @param REALTIME_HISTOGRAM_METRIC_ID ID of the Realtime Histogram Metric (required)
     * @return APIgetRealtimeHistogramTimeseriesRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetRealtimeHistogramTimeseriesRequest getRealtimeHistogramTimeseries(String REALTIME_HISTOGRAM_METRIC_ID) {
        return new APIgetRealtimeHistogramTimeseriesRequest(REALTIME_HISTOGRAM_METRIC_ID);
    }
    private okhttp3.Call getRealtimeTimeseriesCall(String REALTIME_METRIC_ID, java.util.List<String> filters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/realtime/metrics/{REALTIME_METRIC_ID}/timeseries"
            .replaceAll("\\{" + "REALTIME_METRIC_ID" + "\\}", localVarApiClient.escapeString(REALTIME_METRIC_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filters[]", filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRealtimeTimeseriesValidateBeforeCall(String REALTIME_METRIC_ID, java.util.List<String> filters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'REALTIME_METRIC_ID' is set
        if (REALTIME_METRIC_ID == null) {
            throw new ApiException("Missing the required parameter 'REALTIME_METRIC_ID' when calling getRealtimeTimeseries(Async)");
        }
        

        okhttp3.Call localVarCall = getRealtimeTimeseriesCall(REALTIME_METRIC_ID, filters, _callback);
        return localVarCall;

    }


    private ApiResponse<GetRealTimeTimeseriesResponse> getRealtimeTimeseriesWithHttpInfo(String REALTIME_METRIC_ID, java.util.List<String> filters) throws ApiException {
        okhttp3.Call localVarCall = getRealtimeTimeseriesValidateBeforeCall(REALTIME_METRIC_ID, filters, null);
        Type localVarReturnType = new TypeToken<GetRealTimeTimeseriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRealtimeTimeseriesAsync(String REALTIME_METRIC_ID, java.util.List<String> filters, final ApiCallback<GetRealTimeTimeseriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRealtimeTimeseriesValidateBeforeCall(REALTIME_METRIC_ID, filters, _callback);
        Type localVarReturnType = new TypeToken<GetRealTimeTimeseriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetRealtimeTimeseriesRequest {
        private final String REALTIME_METRIC_ID;
        private java.util.List<String> filters;

        private APIgetRealtimeTimeseriesRequest(String REALTIME_METRIC_ID) {
            this.REALTIME_METRIC_ID = REALTIME_METRIC_ID;
        }

        /**
         * Set filters
         * @param filters Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Filters endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)
         * @return APIgetRealtimeTimeseriesRequest
         */
        public APIgetRealtimeTimeseriesRequest filters(java.util.List<String> filters) {
            this.filters = filters;
            return this;
        }

        /**
         * Build call for getRealtimeTimeseries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRealtimeTimeseriesCall(REALTIME_METRIC_ID, filters, _callback);
        }

        /**
         * Execute getRealtimeTimeseries request
         * @return GetRealTimeTimeseriesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GetRealTimeTimeseriesResponse execute() throws ApiException {
            ApiResponse<GetRealTimeTimeseriesResponse> localVarResp = getRealtimeTimeseriesWithHttpInfo(REALTIME_METRIC_ID, filters);
            return localVarResp.getData();
        }

        /**
         * Execute getRealtimeTimeseries request with HTTP info returned
         * @return ApiResponse&lt;GetRealTimeTimeseriesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetRealTimeTimeseriesResponse> executeWithHttpInfo() throws ApiException {
            return getRealtimeTimeseriesWithHttpInfo(REALTIME_METRIC_ID, filters);
        }

        /**
         * Execute getRealtimeTimeseries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetRealTimeTimeseriesResponse> _callback) throws ApiException {
            return getRealtimeTimeseriesAsync(REALTIME_METRIC_ID, filters, _callback);
        }
    }

    /**
     * Get Real-Time Timeseries
     * Gets Time series information for a specific metric along with the number of concurrent viewers.
     * @param REALTIME_METRIC_ID ID of the Realtime Metric (required)
     * @return APIgetRealtimeTimeseriesRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetRealtimeTimeseriesRequest getRealtimeTimeseries(String REALTIME_METRIC_ID) {
        return new APIgetRealtimeTimeseriesRequest(REALTIME_METRIC_ID);
    }
    private okhttp3.Call listRealtimeDimensionsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/realtime/dimensions";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRealtimeDimensionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listRealtimeDimensionsCall(_callback);
        return localVarCall;

    }


    private ApiResponse<ListRealTimeDimensionsResponse> listRealtimeDimensionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listRealtimeDimensionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListRealTimeDimensionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRealtimeDimensionsAsync(final ApiCallback<ListRealTimeDimensionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRealtimeDimensionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListRealTimeDimensionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistRealtimeDimensionsRequest {

        private APIlistRealtimeDimensionsRequest() {
        }

        /**
         * Build call for listRealtimeDimensions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRealtimeDimensionsCall(_callback);
        }

        /**
         * Execute listRealtimeDimensions request
         * @return ListRealTimeDimensionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ListRealTimeDimensionsResponse execute() throws ApiException {
            ApiResponse<ListRealTimeDimensionsResponse> localVarResp = listRealtimeDimensionsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute listRealtimeDimensions request with HTTP info returned
         * @return ApiResponse&lt;ListRealTimeDimensionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListRealTimeDimensionsResponse> executeWithHttpInfo() throws ApiException {
            return listRealtimeDimensionsWithHttpInfo();
        }

        /**
         * Execute listRealtimeDimensions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListRealTimeDimensionsResponse> _callback) throws ApiException {
            return listRealtimeDimensionsAsync(_callback);
        }
    }

    /**
     * List Real-Time Dimensions
     * Lists available real-time dimensions.
     * @return APIlistRealtimeDimensionsRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIlistRealtimeDimensionsRequest listRealtimeDimensions() {
        return new APIlistRealtimeDimensionsRequest();
    }
    private okhttp3.Call listRealtimeMetricsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/realtime/metrics";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRealtimeMetricsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listRealtimeMetricsCall(_callback);
        return localVarCall;

    }


    private ApiResponse<ListRealTimeMetricsResponse> listRealtimeMetricsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listRealtimeMetricsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListRealTimeMetricsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRealtimeMetricsAsync(final ApiCallback<ListRealTimeMetricsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRealtimeMetricsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListRealTimeMetricsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistRealtimeMetricsRequest {

        private APIlistRealtimeMetricsRequest() {
        }

        /**
         * Build call for listRealtimeMetrics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRealtimeMetricsCall(_callback);
        }

        /**
         * Execute listRealtimeMetrics request
         * @return ListRealTimeMetricsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ListRealTimeMetricsResponse execute() throws ApiException {
            ApiResponse<ListRealTimeMetricsResponse> localVarResp = listRealtimeMetricsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute listRealtimeMetrics request with HTTP info returned
         * @return ApiResponse&lt;ListRealTimeMetricsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListRealTimeMetricsResponse> executeWithHttpInfo() throws ApiException {
            return listRealtimeMetricsWithHttpInfo();
        }

        /**
         * Execute listRealtimeMetrics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListRealTimeMetricsResponse> _callback) throws ApiException {
            return listRealtimeMetricsAsync(_callback);
        }
    }

    /**
     * List Real-Time Metrics
     * Lists available real-time metrics.
     * @return APIlistRealtimeMetricsRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIlistRealtimeMetricsRequest listRealtimeMetrics() {
        return new APIlistRealtimeMetricsRequest();
    }
}
