/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mux.sdk;

import com.mux.ApiCallback;
import com.mux.ApiClient;
import com.mux.ApiException;
import com.mux.ApiResponse;
import com.mux.Configuration;
import com.mux.Pair;
import com.mux.ProgressRequestBody;
import com.mux.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mux.sdk.models.GetMetricTimeseriesDataResponse;
import com.mux.sdk.models.GetOverallValuesResponse;
import com.mux.sdk.models.ListAllMetricValuesResponse;
import com.mux.sdk.models.ListBreakdownValuesResponse;
import com.mux.sdk.models.ListInsightsResponse;

import java.lang.reflect.Type;

public class MetricsApi {
    private ApiClient localVarApiClient;

    public MetricsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetricsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getMetricTimeseriesData
     * @param METRIC_ID ID of the Metric (required)
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param measurement Measurement for the provided metric. If omitted, the deafult for the metric will be used. (optional)
     * @param orderDirection Sort order. (optional)
     * @param groupBy Time granularity to group results by. If this value is omitted, a default granularity is chosen based on the supplied timeframe. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetricTimeseriesDataCall(String METRIC_ID, java.util.List<String> timeframe, java.util.List<String> filters, String measurement, String orderDirection, String groupBy, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/metrics/{METRIC_ID}/timeseries"
            .replaceAll("\\{" + "METRIC_ID" + "\\}", localVarApiClient.escapeString(METRIC_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (timeframe != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "timeframe[]", timeframe));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filters[]", filters));
        }

        if (measurement != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("measurement", measurement));
        }

        if (orderDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_direction", orderDirection));
        }

        if (groupBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_by", groupBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetricTimeseriesDataValidateBeforeCall(String METRIC_ID, java.util.List<String> timeframe, java.util.List<String> filters, String measurement, String orderDirection, String groupBy, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'METRIC_ID' is set
        if (METRIC_ID == null) {
            throw new ApiException("Missing the required parameter 'METRIC_ID' when calling getMetricTimeseriesData(Async)");
        }
        

        okhttp3.Call localVarCall = getMetricTimeseriesDataCall(METRIC_ID, timeframe, filters, measurement, orderDirection, groupBy, _callback);
        return localVarCall;

    }

    /**
     * Get metric timeseries data
     * Returns timeseries data for a specific metric 
     * @param METRIC_ID ID of the Metric (required)
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param measurement Measurement for the provided metric. If omitted, the deafult for the metric will be used. (optional)
     * @param orderDirection Sort order. (optional)
     * @param groupBy Time granularity to group results by. If this value is omitted, a default granularity is chosen based on the supplied timeframe. (optional)
     * @return GetMetricTimeseriesDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetMetricTimeseriesDataResponse getMetricTimeseriesData(String METRIC_ID, java.util.List<String> timeframe, java.util.List<String> filters, String measurement, String orderDirection, String groupBy) throws ApiException {
        ApiResponse<GetMetricTimeseriesDataResponse> localVarResp = getMetricTimeseriesDataWithHttpInfo(METRIC_ID, timeframe, filters, measurement, orderDirection, groupBy);
        return localVarResp.getData();
    }

    /**
     * Get metric timeseries data
     * Returns timeseries data for a specific metric 
     * @param METRIC_ID ID of the Metric (required)
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param measurement Measurement for the provided metric. If omitted, the deafult for the metric will be used. (optional)
     * @param orderDirection Sort order. (optional)
     * @param groupBy Time granularity to group results by. If this value is omitted, a default granularity is chosen based on the supplied timeframe. (optional)
     * @return ApiResponse&lt;GetMetricTimeseriesDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMetricTimeseriesDataResponse> getMetricTimeseriesDataWithHttpInfo(String METRIC_ID, java.util.List<String> timeframe, java.util.List<String> filters, String measurement, String orderDirection, String groupBy) throws ApiException {
        okhttp3.Call localVarCall = getMetricTimeseriesDataValidateBeforeCall(METRIC_ID, timeframe, filters, measurement, orderDirection, groupBy, null);
        Type localVarReturnType = new TypeToken<GetMetricTimeseriesDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metric timeseries data (asynchronously)
     * Returns timeseries data for a specific metric 
     * @param METRIC_ID ID of the Metric (required)
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param measurement Measurement for the provided metric. If omitted, the deafult for the metric will be used. (optional)
     * @param orderDirection Sort order. (optional)
     * @param groupBy Time granularity to group results by. If this value is omitted, a default granularity is chosen based on the supplied timeframe. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetricTimeseriesDataAsync(String METRIC_ID, java.util.List<String> timeframe, java.util.List<String> filters, String measurement, String orderDirection, String groupBy, final ApiCallback<GetMetricTimeseriesDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetricTimeseriesDataValidateBeforeCall(METRIC_ID, timeframe, filters, measurement, orderDirection, groupBy, _callback);
        Type localVarReturnType = new TypeToken<GetMetricTimeseriesDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOverallValues
     * @param METRIC_ID ID of the Metric (required)
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param measurement Measurement for the provided metric. If omitted, the deafult for the metric will be used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOverallValuesCall(String METRIC_ID, java.util.List<String> timeframe, java.util.List<String> filters, String measurement, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/metrics/{METRIC_ID}/overall"
            .replaceAll("\\{" + "METRIC_ID" + "\\}", localVarApiClient.escapeString(METRIC_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (timeframe != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "timeframe[]", timeframe));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filters[]", filters));
        }

        if (measurement != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("measurement", measurement));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOverallValuesValidateBeforeCall(String METRIC_ID, java.util.List<String> timeframe, java.util.List<String> filters, String measurement, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'METRIC_ID' is set
        if (METRIC_ID == null) {
            throw new ApiException("Missing the required parameter 'METRIC_ID' when calling getOverallValues(Async)");
        }
        

        okhttp3.Call localVarCall = getOverallValuesCall(METRIC_ID, timeframe, filters, measurement, _callback);
        return localVarCall;

    }

    /**
     * Get Overall values
     * Returns the overall value for a specific metric, as well as the total view count, watch time, and the Mux Global metric value for the metric. 
     * @param METRIC_ID ID of the Metric (required)
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param measurement Measurement for the provided metric. If omitted, the deafult for the metric will be used. (optional)
     * @return GetOverallValuesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetOverallValuesResponse getOverallValues(String METRIC_ID, java.util.List<String> timeframe, java.util.List<String> filters, String measurement) throws ApiException {
        ApiResponse<GetOverallValuesResponse> localVarResp = getOverallValuesWithHttpInfo(METRIC_ID, timeframe, filters, measurement);
        return localVarResp.getData();
    }

    /**
     * Get Overall values
     * Returns the overall value for a specific metric, as well as the total view count, watch time, and the Mux Global metric value for the metric. 
     * @param METRIC_ID ID of the Metric (required)
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param measurement Measurement for the provided metric. If omitted, the deafult for the metric will be used. (optional)
     * @return ApiResponse&lt;GetOverallValuesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOverallValuesResponse> getOverallValuesWithHttpInfo(String METRIC_ID, java.util.List<String> timeframe, java.util.List<String> filters, String measurement) throws ApiException {
        okhttp3.Call localVarCall = getOverallValuesValidateBeforeCall(METRIC_ID, timeframe, filters, measurement, null);
        Type localVarReturnType = new TypeToken<GetOverallValuesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Overall values (asynchronously)
     * Returns the overall value for a specific metric, as well as the total view count, watch time, and the Mux Global metric value for the metric. 
     * @param METRIC_ID ID of the Metric (required)
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param measurement Measurement for the provided metric. If omitted, the deafult for the metric will be used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOverallValuesAsync(String METRIC_ID, java.util.List<String> timeframe, java.util.List<String> filters, String measurement, final ApiCallback<GetOverallValuesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOverallValuesValidateBeforeCall(METRIC_ID, timeframe, filters, measurement, _callback);
        Type localVarReturnType = new TypeToken<GetOverallValuesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllMetricValues
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param dimension Dimension the specified value belongs to (optional)
     * @param value Value to show all available metrics for (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllMetricValuesCall(java.util.List<String> timeframe, java.util.List<String> filters, String dimension, String value, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/metrics/comparison";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (timeframe != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "timeframe[]", timeframe));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filters[]", filters));
        }

        if (dimension != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dimension", dimension));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllMetricValuesValidateBeforeCall(java.util.List<String> timeframe, java.util.List<String> filters, String dimension, String value, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listAllMetricValuesCall(timeframe, filters, dimension, value, _callback);
        return localVarCall;

    }

    /**
     * List all metric values
     * List all of the values across every breakdown for a specific metric 
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param dimension Dimension the specified value belongs to (optional)
     * @param value Value to show all available metrics for (optional)
     * @return ListAllMetricValuesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListAllMetricValuesResponse listAllMetricValues(java.util.List<String> timeframe, java.util.List<String> filters, String dimension, String value) throws ApiException {
        ApiResponse<ListAllMetricValuesResponse> localVarResp = listAllMetricValuesWithHttpInfo(timeframe, filters, dimension, value);
        return localVarResp.getData();
    }

    /**
     * List all metric values
     * List all of the values across every breakdown for a specific metric 
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param dimension Dimension the specified value belongs to (optional)
     * @param value Value to show all available metrics for (optional)
     * @return ApiResponse&lt;ListAllMetricValuesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAllMetricValuesResponse> listAllMetricValuesWithHttpInfo(java.util.List<String> timeframe, java.util.List<String> filters, String dimension, String value) throws ApiException {
        okhttp3.Call localVarCall = listAllMetricValuesValidateBeforeCall(timeframe, filters, dimension, value, null);
        Type localVarReturnType = new TypeToken<ListAllMetricValuesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all metric values (asynchronously)
     * List all of the values across every breakdown for a specific metric 
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param dimension Dimension the specified value belongs to (optional)
     * @param value Value to show all available metrics for (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllMetricValuesAsync(java.util.List<String> timeframe, java.util.List<String> filters, String dimension, String value, final ApiCallback<ListAllMetricValuesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllMetricValuesValidateBeforeCall(timeframe, filters, dimension, value, _callback);
        Type localVarReturnType = new TypeToken<ListAllMetricValuesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBreakdownValues
     * @param METRIC_ID ID of the Metric (required)
     * @param groupBy Breakdown value to group the results by (optional)
     * @param measurement Measurement for the provided metric. If omitted, the deafult for the metric will be used. (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param limit Number of items to include in the response (optional, default to 25)
     * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
     * @param orderBy Value to order the results by (optional)
     * @param orderDirection Sort order. (optional)
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBreakdownValuesCall(String METRIC_ID, String groupBy, String measurement, java.util.List<String> filters, Integer limit, Integer page, String orderBy, String orderDirection, java.util.List<String> timeframe, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/metrics/{METRIC_ID}/breakdown"
            .replaceAll("\\{" + "METRIC_ID" + "\\}", localVarApiClient.escapeString(METRIC_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (groupBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_by", groupBy));
        }

        if (measurement != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("measurement", measurement));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filters[]", filters));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (orderDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_direction", orderDirection));
        }

        if (timeframe != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "timeframe[]", timeframe));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBreakdownValuesValidateBeforeCall(String METRIC_ID, String groupBy, String measurement, java.util.List<String> filters, Integer limit, Integer page, String orderBy, String orderDirection, java.util.List<String> timeframe, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'METRIC_ID' is set
        if (METRIC_ID == null) {
            throw new ApiException("Missing the required parameter 'METRIC_ID' when calling listBreakdownValues(Async)");
        }
        

        okhttp3.Call localVarCall = listBreakdownValuesCall(METRIC_ID, groupBy, measurement, filters, limit, page, orderBy, orderDirection, timeframe, _callback);
        return localVarCall;

    }

    /**
     * List breakdown values
     * List the breakdown values for a specific metric 
     * @param METRIC_ID ID of the Metric (required)
     * @param groupBy Breakdown value to group the results by (optional)
     * @param measurement Measurement for the provided metric. If omitted, the deafult for the metric will be used. (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param limit Number of items to include in the response (optional, default to 25)
     * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
     * @param orderBy Value to order the results by (optional)
     * @param orderDirection Sort order. (optional)
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @return ListBreakdownValuesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListBreakdownValuesResponse listBreakdownValues(String METRIC_ID, String groupBy, String measurement, java.util.List<String> filters, Integer limit, Integer page, String orderBy, String orderDirection, java.util.List<String> timeframe) throws ApiException {
        ApiResponse<ListBreakdownValuesResponse> localVarResp = listBreakdownValuesWithHttpInfo(METRIC_ID, groupBy, measurement, filters, limit, page, orderBy, orderDirection, timeframe);
        return localVarResp.getData();
    }

    /**
     * List breakdown values
     * List the breakdown values for a specific metric 
     * @param METRIC_ID ID of the Metric (required)
     * @param groupBy Breakdown value to group the results by (optional)
     * @param measurement Measurement for the provided metric. If omitted, the deafult for the metric will be used. (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param limit Number of items to include in the response (optional, default to 25)
     * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
     * @param orderBy Value to order the results by (optional)
     * @param orderDirection Sort order. (optional)
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @return ApiResponse&lt;ListBreakdownValuesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListBreakdownValuesResponse> listBreakdownValuesWithHttpInfo(String METRIC_ID, String groupBy, String measurement, java.util.List<String> filters, Integer limit, Integer page, String orderBy, String orderDirection, java.util.List<String> timeframe) throws ApiException {
        okhttp3.Call localVarCall = listBreakdownValuesValidateBeforeCall(METRIC_ID, groupBy, measurement, filters, limit, page, orderBy, orderDirection, timeframe, null);
        Type localVarReturnType = new TypeToken<ListBreakdownValuesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List breakdown values (asynchronously)
     * List the breakdown values for a specific metric 
     * @param METRIC_ID ID of the Metric (required)
     * @param groupBy Breakdown value to group the results by (optional)
     * @param measurement Measurement for the provided metric. If omitted, the deafult for the metric will be used. (optional)
     * @param filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint.  (optional)
     * @param limit Number of items to include in the response (optional, default to 25)
     * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
     * @param orderBy Value to order the results by (optional)
     * @param orderDirection Sort order. (optional)
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBreakdownValuesAsync(String METRIC_ID, String groupBy, String measurement, java.util.List<String> filters, Integer limit, Integer page, String orderBy, String orderDirection, java.util.List<String> timeframe, final ApiCallback<ListBreakdownValuesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBreakdownValuesValidateBeforeCall(METRIC_ID, groupBy, measurement, filters, limit, page, orderBy, orderDirection, timeframe, _callback);
        Type localVarReturnType = new TypeToken<ListBreakdownValuesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listInsights
     * @param METRIC_ID ID of the Metric (required)
     * @param measurement Measurement for the provided metric. If omitted, the deafult for the metric will be used. (optional)
     * @param orderDirection Sort order. (optional)
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInsightsCall(String METRIC_ID, String measurement, String orderDirection, java.util.List<String> timeframe, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/metrics/{METRIC_ID}/insights"
            .replaceAll("\\{" + "METRIC_ID" + "\\}", localVarApiClient.escapeString(METRIC_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (measurement != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("measurement", measurement));
        }

        if (orderDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_direction", orderDirection));
        }

        if (timeframe != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "timeframe[]", timeframe));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInsightsValidateBeforeCall(String METRIC_ID, String measurement, String orderDirection, java.util.List<String> timeframe, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'METRIC_ID' is set
        if (METRIC_ID == null) {
            throw new ApiException("Missing the required parameter 'METRIC_ID' when calling listInsights(Async)");
        }
        

        okhttp3.Call localVarCall = listInsightsCall(METRIC_ID, measurement, orderDirection, timeframe, _callback);
        return localVarCall;

    }

    /**
     * List Insights
     * Returns a list of insights for a metric. These are the worst performing values across all breakdowns sorted by how much they negatively impact a specific metric. 
     * @param METRIC_ID ID of the Metric (required)
     * @param measurement Measurement for the provided metric. If omitted, the deafult for the metric will be used. (optional)
     * @param orderDirection Sort order. (optional)
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @return ListInsightsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListInsightsResponse listInsights(String METRIC_ID, String measurement, String orderDirection, java.util.List<String> timeframe) throws ApiException {
        ApiResponse<ListInsightsResponse> localVarResp = listInsightsWithHttpInfo(METRIC_ID, measurement, orderDirection, timeframe);
        return localVarResp.getData();
    }

    /**
     * List Insights
     * Returns a list of insights for a metric. These are the worst performing values across all breakdowns sorted by how much they negatively impact a specific metric. 
     * @param METRIC_ID ID of the Metric (required)
     * @param measurement Measurement for the provided metric. If omitted, the deafult for the metric will be used. (optional)
     * @param orderDirection Sort order. (optional)
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @return ApiResponse&lt;ListInsightsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListInsightsResponse> listInsightsWithHttpInfo(String METRIC_ID, String measurement, String orderDirection, java.util.List<String> timeframe) throws ApiException {
        okhttp3.Call localVarCall = listInsightsValidateBeforeCall(METRIC_ID, measurement, orderDirection, timeframe, null);
        Type localVarReturnType = new TypeToken<ListInsightsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Insights (asynchronously)
     * Returns a list of insights for a metric. These are the worst performing values across all breakdowns sorted by how much they negatively impact a specific metric. 
     * @param METRIC_ID ID of the Metric (required)
     * @param measurement Measurement for the provided metric. If omitted, the deafult for the metric will be used. (optional)
     * @param orderDirection Sort order. (optional)
     * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;). Accepted formats are...   * array of epoch timestamps e.g. timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600    * duration string e.g. timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInsightsAsync(String METRIC_ID, String measurement, String orderDirection, java.util.List<String> timeframe, final ApiCallback<ListInsightsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInsightsValidateBeforeCall(METRIC_ID, measurement, orderDirection, timeframe, _callback);
        Type localVarReturnType = new TypeToken<ListInsightsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
