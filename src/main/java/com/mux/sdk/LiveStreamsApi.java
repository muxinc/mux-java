/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mux.sdk;

import com.mux.ApiCallback;
import com.mux.ApiClient;
import com.mux.ApiException;
import com.mux.ApiResponse;
import com.mux.Configuration;
import com.mux.Pair;
import com.mux.ProgressRequestBody;
import com.mux.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mux.sdk.models.CreateLiveStreamRequest;
import com.mux.sdk.models.CreatePlaybackIDRequest;
import com.mux.sdk.models.CreatePlaybackIDResponse;
import com.mux.sdk.models.CreateSimulcastTargetRequest;
import com.mux.sdk.models.DisableLiveStreamResponse;
import com.mux.sdk.models.EnableLiveStreamResponse;
import com.mux.sdk.models.ListLiveStreamsResponse;
import com.mux.sdk.models.LiveStreamResponse;
import com.mux.sdk.models.SignalLiveStreamCompleteResponse;
import com.mux.sdk.models.SimulcastTargetResponse;

import java.lang.reflect.Type;

public class LiveStreamsApi {
    private ApiClient localVarApiClient;

    public LiveStreamsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LiveStreamsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createLiveStream
     * @param createLiveStreamRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLiveStreamCall(CreateLiveStreamRequest createLiveStreamRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createLiveStreamRequest;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLiveStreamValidateBeforeCall(CreateLiveStreamRequest createLiveStreamRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createLiveStreamRequest' is set
        if (createLiveStreamRequest == null) {
            throw new ApiException("Missing the required parameter 'createLiveStreamRequest' when calling createLiveStream(Async)");
        }
        

        okhttp3.Call localVarCall = createLiveStreamCall(createLiveStreamRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a live stream
     * 
     * @param createLiveStreamRequest  (required)
     * @return LiveStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public LiveStreamResponse createLiveStream(CreateLiveStreamRequest createLiveStreamRequest) throws ApiException {
        ApiResponse<LiveStreamResponse> localVarResp = createLiveStreamWithHttpInfo(createLiveStreamRequest);
        return localVarResp.getData();
    }

    /**
     * Create a live stream
     * 
     * @param createLiveStreamRequest  (required)
     * @return ApiResponse&lt;LiveStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LiveStreamResponse> createLiveStreamWithHttpInfo(CreateLiveStreamRequest createLiveStreamRequest) throws ApiException {
        okhttp3.Call localVarCall = createLiveStreamValidateBeforeCall(createLiveStreamRequest, null);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a live stream (asynchronously)
     * 
     * @param createLiveStreamRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLiveStreamAsync(CreateLiveStreamRequest createLiveStreamRequest, final ApiCallback<LiveStreamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLiveStreamValidateBeforeCall(createLiveStreamRequest, _callback);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLiveStreamPlaybackId
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param createPlaybackIDRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLiveStreamPlaybackIdCall(String LIVE_STREAM_ID, CreatePlaybackIDRequest createPlaybackIDRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createPlaybackIDRequest;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/playback-ids"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLiveStreamPlaybackIdValidateBeforeCall(String LIVE_STREAM_ID, CreatePlaybackIDRequest createPlaybackIDRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling createLiveStreamPlaybackId(Async)");
        }
        
        // verify the required parameter 'createPlaybackIDRequest' is set
        if (createPlaybackIDRequest == null) {
            throw new ApiException("Missing the required parameter 'createPlaybackIDRequest' when calling createLiveStreamPlaybackId(Async)");
        }
        

        okhttp3.Call localVarCall = createLiveStreamPlaybackIdCall(LIVE_STREAM_ID, createPlaybackIDRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a live stream playback ID
     * 
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param createPlaybackIDRequest  (required)
     * @return CreatePlaybackIDResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreatePlaybackIDResponse createLiveStreamPlaybackId(String LIVE_STREAM_ID, CreatePlaybackIDRequest createPlaybackIDRequest) throws ApiException {
        ApiResponse<CreatePlaybackIDResponse> localVarResp = createLiveStreamPlaybackIdWithHttpInfo(LIVE_STREAM_ID, createPlaybackIDRequest);
        return localVarResp.getData();
    }

    /**
     * Create a live stream playback ID
     * 
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param createPlaybackIDRequest  (required)
     * @return ApiResponse&lt;CreatePlaybackIDResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePlaybackIDResponse> createLiveStreamPlaybackIdWithHttpInfo(String LIVE_STREAM_ID, CreatePlaybackIDRequest createPlaybackIDRequest) throws ApiException {
        okhttp3.Call localVarCall = createLiveStreamPlaybackIdValidateBeforeCall(LIVE_STREAM_ID, createPlaybackIDRequest, null);
        Type localVarReturnType = new TypeToken<CreatePlaybackIDResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a live stream playback ID (asynchronously)
     * 
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param createPlaybackIDRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLiveStreamPlaybackIdAsync(String LIVE_STREAM_ID, CreatePlaybackIDRequest createPlaybackIDRequest, final ApiCallback<CreatePlaybackIDResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLiveStreamPlaybackIdValidateBeforeCall(LIVE_STREAM_ID, createPlaybackIDRequest, _callback);
        Type localVarReturnType = new TypeToken<CreatePlaybackIDResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLiveStreamSimulcastTarget
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param createSimulcastTargetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLiveStreamSimulcastTargetCall(String LIVE_STREAM_ID, CreateSimulcastTargetRequest createSimulcastTargetRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createSimulcastTargetRequest;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLiveStreamSimulcastTargetValidateBeforeCall(String LIVE_STREAM_ID, CreateSimulcastTargetRequest createSimulcastTargetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling createLiveStreamSimulcastTarget(Async)");
        }
        
        // verify the required parameter 'createSimulcastTargetRequest' is set
        if (createSimulcastTargetRequest == null) {
            throw new ApiException("Missing the required parameter 'createSimulcastTargetRequest' when calling createLiveStreamSimulcastTarget(Async)");
        }
        

        okhttp3.Call localVarCall = createLiveStreamSimulcastTargetCall(LIVE_STREAM_ID, createSimulcastTargetRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a live stream simulcast target
     * Create a simulcast target for the parent live stream. Simulcast target can only be created when the parent live stream is in idle state. Only one simulcast target can be created at a time with this API.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param createSimulcastTargetRequest  (required)
     * @return SimulcastTargetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SimulcastTargetResponse createLiveStreamSimulcastTarget(String LIVE_STREAM_ID, CreateSimulcastTargetRequest createSimulcastTargetRequest) throws ApiException {
        ApiResponse<SimulcastTargetResponse> localVarResp = createLiveStreamSimulcastTargetWithHttpInfo(LIVE_STREAM_ID, createSimulcastTargetRequest);
        return localVarResp.getData();
    }

    /**
     * Create a live stream simulcast target
     * Create a simulcast target for the parent live stream. Simulcast target can only be created when the parent live stream is in idle state. Only one simulcast target can be created at a time with this API.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param createSimulcastTargetRequest  (required)
     * @return ApiResponse&lt;SimulcastTargetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimulcastTargetResponse> createLiveStreamSimulcastTargetWithHttpInfo(String LIVE_STREAM_ID, CreateSimulcastTargetRequest createSimulcastTargetRequest) throws ApiException {
        okhttp3.Call localVarCall = createLiveStreamSimulcastTargetValidateBeforeCall(LIVE_STREAM_ID, createSimulcastTargetRequest, null);
        Type localVarReturnType = new TypeToken<SimulcastTargetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a live stream simulcast target (asynchronously)
     * Create a simulcast target for the parent live stream. Simulcast target can only be created when the parent live stream is in idle state. Only one simulcast target can be created at a time with this API.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param createSimulcastTargetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLiveStreamSimulcastTargetAsync(String LIVE_STREAM_ID, CreateSimulcastTargetRequest createSimulcastTargetRequest, final ApiCallback<SimulcastTargetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLiveStreamSimulcastTargetValidateBeforeCall(LIVE_STREAM_ID, createSimulcastTargetRequest, _callback);
        Type localVarReturnType = new TypeToken<SimulcastTargetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLiveStream
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLiveStreamCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLiveStreamValidateBeforeCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling deleteLiveStream(Async)");
        }
        

        okhttp3.Call localVarCall = deleteLiveStreamCall(LIVE_STREAM_ID, _callback);
        return localVarCall;

    }

    /**
     * Delete a live stream
     * 
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteLiveStream(String LIVE_STREAM_ID) throws ApiException {
        deleteLiveStreamWithHttpInfo(LIVE_STREAM_ID);
    }

    /**
     * Delete a live stream
     * 
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteLiveStreamWithHttpInfo(String LIVE_STREAM_ID) throws ApiException {
        okhttp3.Call localVarCall = deleteLiveStreamValidateBeforeCall(LIVE_STREAM_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a live stream (asynchronously)
     * 
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLiveStreamAsync(String LIVE_STREAM_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLiveStreamValidateBeforeCall(LIVE_STREAM_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLiveStreamPlaybackId
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLiveStreamPlaybackIdCall(String LIVE_STREAM_ID, String PLAYBACK_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/playback-ids/{PLAYBACK_ID}"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()))
            .replaceAll("\\{" + "PLAYBACK_ID" + "\\}", localVarApiClient.escapeString(PLAYBACK_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLiveStreamPlaybackIdValidateBeforeCall(String LIVE_STREAM_ID, String PLAYBACK_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling deleteLiveStreamPlaybackId(Async)");
        }
        
        // verify the required parameter 'PLAYBACK_ID' is set
        if (PLAYBACK_ID == null) {
            throw new ApiException("Missing the required parameter 'PLAYBACK_ID' when calling deleteLiveStreamPlaybackId(Async)");
        }
        

        okhttp3.Call localVarCall = deleteLiveStreamPlaybackIdCall(LIVE_STREAM_ID, PLAYBACK_ID, _callback);
        return localVarCall;

    }

    /**
     * Delete a live stream playback ID
     * 
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteLiveStreamPlaybackId(String LIVE_STREAM_ID, String PLAYBACK_ID) throws ApiException {
        deleteLiveStreamPlaybackIdWithHttpInfo(LIVE_STREAM_ID, PLAYBACK_ID);
    }

    /**
     * Delete a live stream playback ID
     * 
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteLiveStreamPlaybackIdWithHttpInfo(String LIVE_STREAM_ID, String PLAYBACK_ID) throws ApiException {
        okhttp3.Call localVarCall = deleteLiveStreamPlaybackIdValidateBeforeCall(LIVE_STREAM_ID, PLAYBACK_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a live stream playback ID (asynchronously)
     * 
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLiveStreamPlaybackIdAsync(String LIVE_STREAM_ID, String PLAYBACK_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLiveStreamPlaybackIdValidateBeforeCall(LIVE_STREAM_ID, PLAYBACK_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLiveStreamSimulcastTarget
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param SIMULCAST_TARGET_ID The ID of the simulcast target. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLiveStreamSimulcastTargetCall(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets/{SIMULCAST_TARGET_ID}"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()))
            .replaceAll("\\{" + "SIMULCAST_TARGET_ID" + "\\}", localVarApiClient.escapeString(SIMULCAST_TARGET_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLiveStreamSimulcastTargetValidateBeforeCall(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling deleteLiveStreamSimulcastTarget(Async)");
        }
        
        // verify the required parameter 'SIMULCAST_TARGET_ID' is set
        if (SIMULCAST_TARGET_ID == null) {
            throw new ApiException("Missing the required parameter 'SIMULCAST_TARGET_ID' when calling deleteLiveStreamSimulcastTarget(Async)");
        }
        

        okhttp3.Call localVarCall = deleteLiveStreamSimulcastTargetCall(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, _callback);
        return localVarCall;

    }

    /**
     * Delete a Live Stream Simulcast Target
     * Delete the simulcast target using the simulcast target ID returned when creating the simulcast target. Simulcast Target can only be deleted when the parent live stream is in idle state.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param SIMULCAST_TARGET_ID The ID of the simulcast target. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteLiveStreamSimulcastTarget(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID) throws ApiException {
        deleteLiveStreamSimulcastTargetWithHttpInfo(LIVE_STREAM_ID, SIMULCAST_TARGET_ID);
    }

    /**
     * Delete a Live Stream Simulcast Target
     * Delete the simulcast target using the simulcast target ID returned when creating the simulcast target. Simulcast Target can only be deleted when the parent live stream is in idle state.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param SIMULCAST_TARGET_ID The ID of the simulcast target. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteLiveStreamSimulcastTargetWithHttpInfo(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID) throws ApiException {
        okhttp3.Call localVarCall = deleteLiveStreamSimulcastTargetValidateBeforeCall(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Live Stream Simulcast Target (asynchronously)
     * Delete the simulcast target using the simulcast target ID returned when creating the simulcast target. Simulcast Target can only be deleted when the parent live stream is in idle state.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param SIMULCAST_TARGET_ID The ID of the simulcast target. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLiveStreamSimulcastTargetAsync(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLiveStreamSimulcastTargetValidateBeforeCall(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableLiveStream
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableLiveStreamCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/disable"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableLiveStreamValidateBeforeCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling disableLiveStream(Async)");
        }
        

        okhttp3.Call localVarCall = disableLiveStreamCall(LIVE_STREAM_ID, _callback);
        return localVarCall;

    }

    /**
     * Disable a live stream
     * Disables a live stream, making it reject incoming RTMP streams until re-enabled. The API also ends the live stream recording immediately when active. Ending the live stream recording adds the &#x60;EXT-X-ENDLIST&#x60; tag to the HLS manifest which notifies the player that this live stream is over.  Mux also closes the encoder connection immediately. Any attempt from the encoder to re-establish connection will fail till the live stream is re-enabled. 
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @return DisableLiveStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DisableLiveStreamResponse disableLiveStream(String LIVE_STREAM_ID) throws ApiException {
        ApiResponse<DisableLiveStreamResponse> localVarResp = disableLiveStreamWithHttpInfo(LIVE_STREAM_ID);
        return localVarResp.getData();
    }

    /**
     * Disable a live stream
     * Disables a live stream, making it reject incoming RTMP streams until re-enabled. The API also ends the live stream recording immediately when active. Ending the live stream recording adds the &#x60;EXT-X-ENDLIST&#x60; tag to the HLS manifest which notifies the player that this live stream is over.  Mux also closes the encoder connection immediately. Any attempt from the encoder to re-establish connection will fail till the live stream is re-enabled. 
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @return ApiResponse&lt;DisableLiveStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisableLiveStreamResponse> disableLiveStreamWithHttpInfo(String LIVE_STREAM_ID) throws ApiException {
        okhttp3.Call localVarCall = disableLiveStreamValidateBeforeCall(LIVE_STREAM_ID, null);
        Type localVarReturnType = new TypeToken<DisableLiveStreamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable a live stream (asynchronously)
     * Disables a live stream, making it reject incoming RTMP streams until re-enabled. The API also ends the live stream recording immediately when active. Ending the live stream recording adds the &#x60;EXT-X-ENDLIST&#x60; tag to the HLS manifest which notifies the player that this live stream is over.  Mux also closes the encoder connection immediately. Any attempt from the encoder to re-establish connection will fail till the live stream is re-enabled. 
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableLiveStreamAsync(String LIVE_STREAM_ID, final ApiCallback<DisableLiveStreamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableLiveStreamValidateBeforeCall(LIVE_STREAM_ID, _callback);
        Type localVarReturnType = new TypeToken<DisableLiveStreamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableLiveStream
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableLiveStreamCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/enable"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableLiveStreamValidateBeforeCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling enableLiveStream(Async)");
        }
        

        okhttp3.Call localVarCall = enableLiveStreamCall(LIVE_STREAM_ID, _callback);
        return localVarCall;

    }

    /**
     * Enable a live stream
     * Enables a live stream, allowing it to accept an incoming RTMP stream.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @return EnableLiveStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EnableLiveStreamResponse enableLiveStream(String LIVE_STREAM_ID) throws ApiException {
        ApiResponse<EnableLiveStreamResponse> localVarResp = enableLiveStreamWithHttpInfo(LIVE_STREAM_ID);
        return localVarResp.getData();
    }

    /**
     * Enable a live stream
     * Enables a live stream, allowing it to accept an incoming RTMP stream.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @return ApiResponse&lt;EnableLiveStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnableLiveStreamResponse> enableLiveStreamWithHttpInfo(String LIVE_STREAM_ID) throws ApiException {
        okhttp3.Call localVarCall = enableLiveStreamValidateBeforeCall(LIVE_STREAM_ID, null);
        Type localVarReturnType = new TypeToken<EnableLiveStreamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable a live stream (asynchronously)
     * Enables a live stream, allowing it to accept an incoming RTMP stream.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableLiveStreamAsync(String LIVE_STREAM_ID, final ApiCallback<EnableLiveStreamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableLiveStreamValidateBeforeCall(LIVE_STREAM_ID, _callback);
        Type localVarReturnType = new TypeToken<EnableLiveStreamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLiveStream
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLiveStreamCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLiveStreamValidateBeforeCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling getLiveStream(Async)");
        }
        

        okhttp3.Call localVarCall = getLiveStreamCall(LIVE_STREAM_ID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a live stream
     * Retrieves the details of a live stream that has previously been created. Supply the unique live stream ID that was returned from your previous request, and Mux will return the corresponding live stream information. The same information is returned when creating a live stream.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @return LiveStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public LiveStreamResponse getLiveStream(String LIVE_STREAM_ID) throws ApiException {
        ApiResponse<LiveStreamResponse> localVarResp = getLiveStreamWithHttpInfo(LIVE_STREAM_ID);
        return localVarResp.getData();
    }

    /**
     * Retrieve a live stream
     * Retrieves the details of a live stream that has previously been created. Supply the unique live stream ID that was returned from your previous request, and Mux will return the corresponding live stream information. The same information is returned when creating a live stream.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @return ApiResponse&lt;LiveStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LiveStreamResponse> getLiveStreamWithHttpInfo(String LIVE_STREAM_ID) throws ApiException {
        okhttp3.Call localVarCall = getLiveStreamValidateBeforeCall(LIVE_STREAM_ID, null);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a live stream (asynchronously)
     * Retrieves the details of a live stream that has previously been created. Supply the unique live stream ID that was returned from your previous request, and Mux will return the corresponding live stream information. The same information is returned when creating a live stream.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLiveStreamAsync(String LIVE_STREAM_ID, final ApiCallback<LiveStreamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLiveStreamValidateBeforeCall(LIVE_STREAM_ID, _callback);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLiveStreamSimulcastTarget
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param SIMULCAST_TARGET_ID The ID of the simulcast target. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLiveStreamSimulcastTargetCall(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets/{SIMULCAST_TARGET_ID}"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()))
            .replaceAll("\\{" + "SIMULCAST_TARGET_ID" + "\\}", localVarApiClient.escapeString(SIMULCAST_TARGET_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLiveStreamSimulcastTargetValidateBeforeCall(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling getLiveStreamSimulcastTarget(Async)");
        }
        
        // verify the required parameter 'SIMULCAST_TARGET_ID' is set
        if (SIMULCAST_TARGET_ID == null) {
            throw new ApiException("Missing the required parameter 'SIMULCAST_TARGET_ID' when calling getLiveStreamSimulcastTarget(Async)");
        }
        

        okhttp3.Call localVarCall = getLiveStreamSimulcastTargetCall(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a Live Stream Simulcast Target
     * Retrieves the details of the simulcast target created for the parent live stream. Supply the unique live stream ID and simulcast target ID that was returned in the response of create simulcast target request, and Mux will return the corresponding information.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param SIMULCAST_TARGET_ID The ID of the simulcast target. (required)
     * @return SimulcastTargetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SimulcastTargetResponse getLiveStreamSimulcastTarget(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID) throws ApiException {
        ApiResponse<SimulcastTargetResponse> localVarResp = getLiveStreamSimulcastTargetWithHttpInfo(LIVE_STREAM_ID, SIMULCAST_TARGET_ID);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Live Stream Simulcast Target
     * Retrieves the details of the simulcast target created for the parent live stream. Supply the unique live stream ID and simulcast target ID that was returned in the response of create simulcast target request, and Mux will return the corresponding information.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param SIMULCAST_TARGET_ID The ID of the simulcast target. (required)
     * @return ApiResponse&lt;SimulcastTargetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimulcastTargetResponse> getLiveStreamSimulcastTargetWithHttpInfo(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID) throws ApiException {
        okhttp3.Call localVarCall = getLiveStreamSimulcastTargetValidateBeforeCall(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, null);
        Type localVarReturnType = new TypeToken<SimulcastTargetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Live Stream Simulcast Target (asynchronously)
     * Retrieves the details of the simulcast target created for the parent live stream. Supply the unique live stream ID and simulcast target ID that was returned in the response of create simulcast target request, and Mux will return the corresponding information.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param SIMULCAST_TARGET_ID The ID of the simulcast target. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLiveStreamSimulcastTargetAsync(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID, final ApiCallback<SimulcastTargetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLiveStreamSimulcastTargetValidateBeforeCall(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, _callback);
        Type localVarReturnType = new TypeToken<SimulcastTargetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLiveStreams
     * @param limit Number of items to include in the response (optional, default to 25)
     * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLiveStreamsCall(Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLiveStreamsValidateBeforeCall(Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listLiveStreamsCall(limit, page, _callback);
        return localVarCall;

    }

    /**
     * List live streams
     * 
     * @param limit Number of items to include in the response (optional, default to 25)
     * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
     * @return ListLiveStreamsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListLiveStreamsResponse listLiveStreams(Integer limit, Integer page) throws ApiException {
        ApiResponse<ListLiveStreamsResponse> localVarResp = listLiveStreamsWithHttpInfo(limit, page);
        return localVarResp.getData();
    }

    /**
     * List live streams
     * 
     * @param limit Number of items to include in the response (optional, default to 25)
     * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
     * @return ApiResponse&lt;ListLiveStreamsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListLiveStreamsResponse> listLiveStreamsWithHttpInfo(Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listLiveStreamsValidateBeforeCall(limit, page, null);
        Type localVarReturnType = new TypeToken<ListLiveStreamsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List live streams (asynchronously)
     * 
     * @param limit Number of items to include in the response (optional, default to 25)
     * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLiveStreamsAsync(Integer limit, Integer page, final ApiCallback<ListLiveStreamsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLiveStreamsValidateBeforeCall(limit, page, _callback);
        Type localVarReturnType = new TypeToken<ListLiveStreamsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetStreamKey
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetStreamKeyCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/reset-stream-key"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetStreamKeyValidateBeforeCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling resetStreamKey(Async)");
        }
        

        okhttp3.Call localVarCall = resetStreamKeyCall(LIVE_STREAM_ID, _callback);
        return localVarCall;

    }

    /**
     * Reset a live stream’s stream key
     * Reset a live stream key if you want to immediately stop the current stream key from working and create a new stream key that can be used for future broadcasts.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @return LiveStreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public LiveStreamResponse resetStreamKey(String LIVE_STREAM_ID) throws ApiException {
        ApiResponse<LiveStreamResponse> localVarResp = resetStreamKeyWithHttpInfo(LIVE_STREAM_ID);
        return localVarResp.getData();
    }

    /**
     * Reset a live stream’s stream key
     * Reset a live stream key if you want to immediately stop the current stream key from working and create a new stream key that can be used for future broadcasts.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @return ApiResponse&lt;LiveStreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LiveStreamResponse> resetStreamKeyWithHttpInfo(String LIVE_STREAM_ID) throws ApiException {
        okhttp3.Call localVarCall = resetStreamKeyValidateBeforeCall(LIVE_STREAM_ID, null);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset a live stream’s stream key (asynchronously)
     * Reset a live stream key if you want to immediately stop the current stream key from working and create a new stream key that can be used for future broadcasts.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetStreamKeyAsync(String LIVE_STREAM_ID, final ApiCallback<LiveStreamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetStreamKeyValidateBeforeCall(LIVE_STREAM_ID, _callback);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signalLiveStreamComplete
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalLiveStreamCompleteCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/complete"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signalLiveStreamCompleteValidateBeforeCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling signalLiveStreamComplete(Async)");
        }
        

        okhttp3.Call localVarCall = signalLiveStreamCompleteCall(LIVE_STREAM_ID, _callback);
        return localVarCall;

    }

    /**
     * Signal a live stream is finished
     * (Optional) End the live stream recording immediately instead of waiting for the reconnect_window. &#x60;EXT-X-ENDLIST&#x60; tag is added to the HLS manifest which notifies the player that this live stream is over.  Mux does not close the encoder connection immediately. Encoders are often configured to re-establish connections immediately which would result in a new recorded asset. For this reason, Mux waits for 60s before closing the connection with the encoder. This 60s timeframe is meant to give encoder operators a chance to disconnect from their end. 
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @return SignalLiveStreamCompleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SignalLiveStreamCompleteResponse signalLiveStreamComplete(String LIVE_STREAM_ID) throws ApiException {
        ApiResponse<SignalLiveStreamCompleteResponse> localVarResp = signalLiveStreamCompleteWithHttpInfo(LIVE_STREAM_ID);
        return localVarResp.getData();
    }

    /**
     * Signal a live stream is finished
     * (Optional) End the live stream recording immediately instead of waiting for the reconnect_window. &#x60;EXT-X-ENDLIST&#x60; tag is added to the HLS manifest which notifies the player that this live stream is over.  Mux does not close the encoder connection immediately. Encoders are often configured to re-establish connections immediately which would result in a new recorded asset. For this reason, Mux waits for 60s before closing the connection with the encoder. This 60s timeframe is meant to give encoder operators a chance to disconnect from their end. 
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @return ApiResponse&lt;SignalLiveStreamCompleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignalLiveStreamCompleteResponse> signalLiveStreamCompleteWithHttpInfo(String LIVE_STREAM_ID) throws ApiException {
        okhttp3.Call localVarCall = signalLiveStreamCompleteValidateBeforeCall(LIVE_STREAM_ID, null);
        Type localVarReturnType = new TypeToken<SignalLiveStreamCompleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Signal a live stream is finished (asynchronously)
     * (Optional) End the live stream recording immediately instead of waiting for the reconnect_window. &#x60;EXT-X-ENDLIST&#x60; tag is added to the HLS manifest which notifies the player that this live stream is over.  Mux does not close the encoder connection immediately. Encoders are often configured to re-establish connections immediately which would result in a new recorded asset. For this reason, Mux waits for 60s before closing the connection with the encoder. This 60s timeframe is meant to give encoder operators a chance to disconnect from their end. 
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signalLiveStreamCompleteAsync(String LIVE_STREAM_ID, final ApiCallback<SignalLiveStreamCompleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = signalLiveStreamCompleteValidateBeforeCall(LIVE_STREAM_ID, _callback);
        Type localVarReturnType = new TypeToken<SignalLiveStreamCompleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
