/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mux.sdk;

import com.mux.ApiCallback;
import com.mux.ApiClient;
import com.mux.ApiException;
import com.mux.ApiResponse;
import com.mux.Configuration;
import com.mux.Pair;
import com.mux.ProgressRequestBody;
import com.mux.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mux.sdk.models.CreateLiveStreamRequest;
import com.mux.sdk.models.CreatePlaybackIDRequest;
import com.mux.sdk.models.CreatePlaybackIDResponse;
import com.mux.sdk.models.CreateSimulcastTargetRequest;
import com.mux.sdk.models.DisableLiveStreamResponse;
import com.mux.sdk.models.EnableLiveStreamResponse;
import com.mux.sdk.models.GetLiveStreamPlaybackIDResponse;
import com.mux.sdk.models.ListLiveStreamsResponse;
import com.mux.sdk.models.LiveStreamResponse;
import com.mux.sdk.models.LiveStreamStatus;
import com.mux.sdk.models.SignalLiveStreamCompleteResponse;
import com.mux.sdk.models.SimulcastTargetResponse;
import com.mux.sdk.models.UpdateLiveStreamEmbeddedSubtitlesRequest;
import com.mux.sdk.models.UpdateLiveStreamGeneratedSubtitlesRequest;
import com.mux.sdk.models.UpdateLiveStreamNewAssetSettingsStaticRenditionsRequest;
import com.mux.sdk.models.UpdateLiveStreamRequest;
// TODO: due to import parsing issues for the RDR type; fix in spec in future
import com.mux.sdk.models.ReferrerDomainRestriction;

import java.lang.reflect.Type;

public class LiveStreamsApi {
    private ApiClient localVarApiClient;

    public LiveStreamsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LiveStreamsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call createLiveStreamCall(CreateLiveStreamRequest createLiveStreamRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createLiveStreamRequest;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLiveStreamValidateBeforeCall(CreateLiveStreamRequest createLiveStreamRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createLiveStreamRequest' is set
        if (createLiveStreamRequest == null) {
            throw new ApiException("Missing the required parameter 'createLiveStreamRequest' when calling createLiveStream(Async)");
        }
        

        okhttp3.Call localVarCall = createLiveStreamCall(createLiveStreamRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<LiveStreamResponse> createLiveStreamWithHttpInfo(CreateLiveStreamRequest createLiveStreamRequest) throws ApiException {
        okhttp3.Call localVarCall = createLiveStreamValidateBeforeCall(createLiveStreamRequest, null);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createLiveStreamAsync(CreateLiveStreamRequest createLiveStreamRequest, final ApiCallback<LiveStreamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLiveStreamValidateBeforeCall(createLiveStreamRequest, _callback);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateLiveStreamRequest {
        private final CreateLiveStreamRequest createLiveStreamRequest;

        private APIcreateLiveStreamRequest(CreateLiveStreamRequest createLiveStreamRequest) {
            this.createLiveStreamRequest = createLiveStreamRequest;
        }

        /**
         * Build call for createLiveStream
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createLiveStreamCall(createLiveStreamRequest, _callback);
        }

        /**
         * Execute createLiveStream request
         * @return LiveStreamResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public LiveStreamResponse execute() throws ApiException {
            ApiResponse<LiveStreamResponse> localVarResp = createLiveStreamWithHttpInfo(createLiveStreamRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createLiveStream request with HTTP info returned
         * @return ApiResponse&lt;LiveStreamResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveStreamResponse> executeWithHttpInfo() throws ApiException {
            return createLiveStreamWithHttpInfo(createLiveStreamRequest);
        }

        /**
         * Execute createLiveStream request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveStreamResponse> _callback) throws ApiException {
            return createLiveStreamAsync(createLiveStreamRequest, _callback);
        }
    }

    /**
     * Create a live stream
     * Creates a new live stream. Once created, an encoder can connect to Mux via the specified stream key and begin streaming to an audience.
     * @param createLiveStreamRequest  (required)
     * @return APIcreateLiveStreamRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateLiveStreamRequest createLiveStream(CreateLiveStreamRequest createLiveStreamRequest) {
        return new APIcreateLiveStreamRequest(createLiveStreamRequest);
    }
    private okhttp3.Call createLiveStreamPlaybackIdCall(String LIVE_STREAM_ID, CreatePlaybackIDRequest createPlaybackIDRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createPlaybackIDRequest;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/playback-ids"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLiveStreamPlaybackIdValidateBeforeCall(String LIVE_STREAM_ID, CreatePlaybackIDRequest createPlaybackIDRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling createLiveStreamPlaybackId(Async)");
        }
        
        // verify the required parameter 'createPlaybackIDRequest' is set
        if (createPlaybackIDRequest == null) {
            throw new ApiException("Missing the required parameter 'createPlaybackIDRequest' when calling createLiveStreamPlaybackId(Async)");
        }
        

        okhttp3.Call localVarCall = createLiveStreamPlaybackIdCall(LIVE_STREAM_ID, createPlaybackIDRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<CreatePlaybackIDResponse> createLiveStreamPlaybackIdWithHttpInfo(String LIVE_STREAM_ID, CreatePlaybackIDRequest createPlaybackIDRequest) throws ApiException {
        okhttp3.Call localVarCall = createLiveStreamPlaybackIdValidateBeforeCall(LIVE_STREAM_ID, createPlaybackIDRequest, null);
        Type localVarReturnType = new TypeToken<CreatePlaybackIDResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createLiveStreamPlaybackIdAsync(String LIVE_STREAM_ID, CreatePlaybackIDRequest createPlaybackIDRequest, final ApiCallback<CreatePlaybackIDResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLiveStreamPlaybackIdValidateBeforeCall(LIVE_STREAM_ID, createPlaybackIDRequest, _callback);
        Type localVarReturnType = new TypeToken<CreatePlaybackIDResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateLiveStreamPlaybackIdRequest {
        private final String LIVE_STREAM_ID;
        private final CreatePlaybackIDRequest createPlaybackIDRequest;

        private APIcreateLiveStreamPlaybackIdRequest(String LIVE_STREAM_ID, CreatePlaybackIDRequest createPlaybackIDRequest) {
            this.LIVE_STREAM_ID = LIVE_STREAM_ID;
            this.createPlaybackIDRequest = createPlaybackIDRequest;
        }

        /**
         * Build call for createLiveStreamPlaybackId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createLiveStreamPlaybackIdCall(LIVE_STREAM_ID, createPlaybackIDRequest, _callback);
        }

        /**
         * Execute createLiveStreamPlaybackId request
         * @return CreatePlaybackIDResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public CreatePlaybackIDResponse execute() throws ApiException {
            ApiResponse<CreatePlaybackIDResponse> localVarResp = createLiveStreamPlaybackIdWithHttpInfo(LIVE_STREAM_ID, createPlaybackIDRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createLiveStreamPlaybackId request with HTTP info returned
         * @return ApiResponse&lt;CreatePlaybackIDResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreatePlaybackIDResponse> executeWithHttpInfo() throws ApiException {
            return createLiveStreamPlaybackIdWithHttpInfo(LIVE_STREAM_ID, createPlaybackIDRequest);
        }

        /**
         * Execute createLiveStreamPlaybackId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreatePlaybackIDResponse> _callback) throws ApiException {
            return createLiveStreamPlaybackIdAsync(LIVE_STREAM_ID, createPlaybackIDRequest, _callback);
        }
    }

    /**
     * Create a live stream playback ID
     * Create a new playback ID for this live stream, through which a viewer can watch the streamed content of the live stream.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param createPlaybackIDRequest  (required)
     * @return APIcreateLiveStreamPlaybackIdRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateLiveStreamPlaybackIdRequest createLiveStreamPlaybackId(String LIVE_STREAM_ID, CreatePlaybackIDRequest createPlaybackIDRequest) {
        return new APIcreateLiveStreamPlaybackIdRequest(LIVE_STREAM_ID, createPlaybackIDRequest);
    }
    private okhttp3.Call createLiveStreamSimulcastTargetCall(String LIVE_STREAM_ID, CreateSimulcastTargetRequest createSimulcastTargetRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createSimulcastTargetRequest;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLiveStreamSimulcastTargetValidateBeforeCall(String LIVE_STREAM_ID, CreateSimulcastTargetRequest createSimulcastTargetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling createLiveStreamSimulcastTarget(Async)");
        }
        
        // verify the required parameter 'createSimulcastTargetRequest' is set
        if (createSimulcastTargetRequest == null) {
            throw new ApiException("Missing the required parameter 'createSimulcastTargetRequest' when calling createLiveStreamSimulcastTarget(Async)");
        }
        

        okhttp3.Call localVarCall = createLiveStreamSimulcastTargetCall(LIVE_STREAM_ID, createSimulcastTargetRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<SimulcastTargetResponse> createLiveStreamSimulcastTargetWithHttpInfo(String LIVE_STREAM_ID, CreateSimulcastTargetRequest createSimulcastTargetRequest) throws ApiException {
        okhttp3.Call localVarCall = createLiveStreamSimulcastTargetValidateBeforeCall(LIVE_STREAM_ID, createSimulcastTargetRequest, null);
        Type localVarReturnType = new TypeToken<SimulcastTargetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createLiveStreamSimulcastTargetAsync(String LIVE_STREAM_ID, CreateSimulcastTargetRequest createSimulcastTargetRequest, final ApiCallback<SimulcastTargetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLiveStreamSimulcastTargetValidateBeforeCall(LIVE_STREAM_ID, createSimulcastTargetRequest, _callback);
        Type localVarReturnType = new TypeToken<SimulcastTargetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateLiveStreamSimulcastTargetRequest {
        private final String LIVE_STREAM_ID;
        private final CreateSimulcastTargetRequest createSimulcastTargetRequest;

        private APIcreateLiveStreamSimulcastTargetRequest(String LIVE_STREAM_ID, CreateSimulcastTargetRequest createSimulcastTargetRequest) {
            this.LIVE_STREAM_ID = LIVE_STREAM_ID;
            this.createSimulcastTargetRequest = createSimulcastTargetRequest;
        }

        /**
         * Build call for createLiveStreamSimulcastTarget
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createLiveStreamSimulcastTargetCall(LIVE_STREAM_ID, createSimulcastTargetRequest, _callback);
        }

        /**
         * Execute createLiveStreamSimulcastTarget request
         * @return SimulcastTargetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public SimulcastTargetResponse execute() throws ApiException {
            ApiResponse<SimulcastTargetResponse> localVarResp = createLiveStreamSimulcastTargetWithHttpInfo(LIVE_STREAM_ID, createSimulcastTargetRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createLiveStreamSimulcastTarget request with HTTP info returned
         * @return ApiResponse&lt;SimulcastTargetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SimulcastTargetResponse> executeWithHttpInfo() throws ApiException {
            return createLiveStreamSimulcastTargetWithHttpInfo(LIVE_STREAM_ID, createSimulcastTargetRequest);
        }

        /**
         * Execute createLiveStreamSimulcastTarget request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SimulcastTargetResponse> _callback) throws ApiException {
            return createLiveStreamSimulcastTargetAsync(LIVE_STREAM_ID, createSimulcastTargetRequest, _callback);
        }
    }

    /**
     * Create a live stream simulcast target
     * Create a simulcast target for the parent live stream. Simulcast target can only be created when the parent live stream is in idle state. Only one simulcast target can be created at a time with this API.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param createSimulcastTargetRequest  (required)
     * @return APIcreateLiveStreamSimulcastTargetRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateLiveStreamSimulcastTargetRequest createLiveStreamSimulcastTarget(String LIVE_STREAM_ID, CreateSimulcastTargetRequest createSimulcastTargetRequest) {
        return new APIcreateLiveStreamSimulcastTargetRequest(LIVE_STREAM_ID, createSimulcastTargetRequest);
    }
    private okhttp3.Call deleteLiveStreamCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLiveStreamValidateBeforeCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling deleteLiveStream(Async)");
        }
        

        okhttp3.Call localVarCall = deleteLiveStreamCall(LIVE_STREAM_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<Void> deleteLiveStreamWithHttpInfo(String LIVE_STREAM_ID) throws ApiException {
        okhttp3.Call localVarCall = deleteLiveStreamValidateBeforeCall(LIVE_STREAM_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteLiveStreamAsync(String LIVE_STREAM_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLiveStreamValidateBeforeCall(LIVE_STREAM_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteLiveStreamRequest {
        private final String LIVE_STREAM_ID;

        private APIdeleteLiveStreamRequest(String LIVE_STREAM_ID) {
            this.LIVE_STREAM_ID = LIVE_STREAM_ID;
        }

        /**
         * Build call for deleteLiveStream
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteLiveStreamCall(LIVE_STREAM_ID, _callback);
        }

        /**
         * Execute deleteLiveStream request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteLiveStreamWithHttpInfo(LIVE_STREAM_ID);
        }

        /**
         * Execute deleteLiveStream request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteLiveStreamWithHttpInfo(LIVE_STREAM_ID);
        }

        /**
         * Execute deleteLiveStream request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteLiveStreamAsync(LIVE_STREAM_ID, _callback);
        }
    }

    /**
     * Delete a live stream
     * Deletes a live stream from the current environment. If the live stream is currently active and being streamed to, ingest will be terminated and the encoder will be disconnected.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @return APIdeleteLiveStreamRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteLiveStreamRequest deleteLiveStream(String LIVE_STREAM_ID) {
        return new APIdeleteLiveStreamRequest(LIVE_STREAM_ID);
    }
    private okhttp3.Call deleteLiveStreamNewAssetSettingsStaticRenditionsCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/new-asset-settings/static-renditions"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLiveStreamNewAssetSettingsStaticRenditionsValidateBeforeCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling deleteLiveStreamNewAssetSettingsStaticRenditions(Async)");
        }
        

        okhttp3.Call localVarCall = deleteLiveStreamNewAssetSettingsStaticRenditionsCall(LIVE_STREAM_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<Void> deleteLiveStreamNewAssetSettingsStaticRenditionsWithHttpInfo(String LIVE_STREAM_ID) throws ApiException {
        okhttp3.Call localVarCall = deleteLiveStreamNewAssetSettingsStaticRenditionsValidateBeforeCall(LIVE_STREAM_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteLiveStreamNewAssetSettingsStaticRenditionsAsync(String LIVE_STREAM_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLiveStreamNewAssetSettingsStaticRenditionsValidateBeforeCall(LIVE_STREAM_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteLiveStreamNewAssetSettingsStaticRenditionsRequest {
        private final String LIVE_STREAM_ID;

        private APIdeleteLiveStreamNewAssetSettingsStaticRenditionsRequest(String LIVE_STREAM_ID) {
            this.LIVE_STREAM_ID = LIVE_STREAM_ID;
        }

        /**
         * Build call for deleteLiveStreamNewAssetSettingsStaticRenditions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteLiveStreamNewAssetSettingsStaticRenditionsCall(LIVE_STREAM_ID, _callback);
        }

        /**
         * Execute deleteLiveStreamNewAssetSettingsStaticRenditions request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteLiveStreamNewAssetSettingsStaticRenditionsWithHttpInfo(LIVE_STREAM_ID);
        }

        /**
         * Execute deleteLiveStreamNewAssetSettingsStaticRenditions request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteLiveStreamNewAssetSettingsStaticRenditionsWithHttpInfo(LIVE_STREAM_ID);
        }

        /**
         * Execute deleteLiveStreamNewAssetSettingsStaticRenditions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteLiveStreamNewAssetSettingsStaticRenditionsAsync(LIVE_STREAM_ID, _callback);
        }
    }

    /**
     * Delete a live stream&#39;s static renditions setting for new assets
     * Deletes a live stream&#39;s static renditions settings for new assets. Further assets made via this live stream will not create static renditions unless re-added.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @return APIdeleteLiveStreamNewAssetSettingsStaticRenditionsRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteLiveStreamNewAssetSettingsStaticRenditionsRequest deleteLiveStreamNewAssetSettingsStaticRenditions(String LIVE_STREAM_ID) {
        return new APIdeleteLiveStreamNewAssetSettingsStaticRenditionsRequest(LIVE_STREAM_ID);
    }
    private okhttp3.Call deleteLiveStreamPlaybackIdCall(String LIVE_STREAM_ID, String PLAYBACK_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/playback-ids/{PLAYBACK_ID}"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()))
            .replaceAll("\\{" + "PLAYBACK_ID" + "\\}", localVarApiClient.escapeString(PLAYBACK_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLiveStreamPlaybackIdValidateBeforeCall(String LIVE_STREAM_ID, String PLAYBACK_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling deleteLiveStreamPlaybackId(Async)");
        }
        
        // verify the required parameter 'PLAYBACK_ID' is set
        if (PLAYBACK_ID == null) {
            throw new ApiException("Missing the required parameter 'PLAYBACK_ID' when calling deleteLiveStreamPlaybackId(Async)");
        }
        

        okhttp3.Call localVarCall = deleteLiveStreamPlaybackIdCall(LIVE_STREAM_ID, PLAYBACK_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<Void> deleteLiveStreamPlaybackIdWithHttpInfo(String LIVE_STREAM_ID, String PLAYBACK_ID) throws ApiException {
        okhttp3.Call localVarCall = deleteLiveStreamPlaybackIdValidateBeforeCall(LIVE_STREAM_ID, PLAYBACK_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteLiveStreamPlaybackIdAsync(String LIVE_STREAM_ID, String PLAYBACK_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLiveStreamPlaybackIdValidateBeforeCall(LIVE_STREAM_ID, PLAYBACK_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteLiveStreamPlaybackIdRequest {
        private final String LIVE_STREAM_ID;
        private final String PLAYBACK_ID;

        private APIdeleteLiveStreamPlaybackIdRequest(String LIVE_STREAM_ID, String PLAYBACK_ID) {
            this.LIVE_STREAM_ID = LIVE_STREAM_ID;
            this.PLAYBACK_ID = PLAYBACK_ID;
        }

        /**
         * Build call for deleteLiveStreamPlaybackId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteLiveStreamPlaybackIdCall(LIVE_STREAM_ID, PLAYBACK_ID, _callback);
        }

        /**
         * Execute deleteLiveStreamPlaybackId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteLiveStreamPlaybackIdWithHttpInfo(LIVE_STREAM_ID, PLAYBACK_ID);
        }

        /**
         * Execute deleteLiveStreamPlaybackId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteLiveStreamPlaybackIdWithHttpInfo(LIVE_STREAM_ID, PLAYBACK_ID);
        }

        /**
         * Execute deleteLiveStreamPlaybackId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteLiveStreamPlaybackIdAsync(LIVE_STREAM_ID, PLAYBACK_ID, _callback);
        }
    }

    /**
     * Delete a live stream playback ID
     * Deletes the playback ID for the live stream. This will not disable ingest (as the live stream still exists). New attempts to play back the live stream will fail immediately. However, current viewers will be able to continue watching the stream for some period of time.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @return APIdeleteLiveStreamPlaybackIdRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteLiveStreamPlaybackIdRequest deleteLiveStreamPlaybackId(String LIVE_STREAM_ID, String PLAYBACK_ID) {
        return new APIdeleteLiveStreamPlaybackIdRequest(LIVE_STREAM_ID, PLAYBACK_ID);
    }
    private okhttp3.Call deleteLiveStreamSimulcastTargetCall(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets/{SIMULCAST_TARGET_ID}"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()))
            .replaceAll("\\{" + "SIMULCAST_TARGET_ID" + "\\}", localVarApiClient.escapeString(SIMULCAST_TARGET_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLiveStreamSimulcastTargetValidateBeforeCall(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling deleteLiveStreamSimulcastTarget(Async)");
        }
        
        // verify the required parameter 'SIMULCAST_TARGET_ID' is set
        if (SIMULCAST_TARGET_ID == null) {
            throw new ApiException("Missing the required parameter 'SIMULCAST_TARGET_ID' when calling deleteLiveStreamSimulcastTarget(Async)");
        }
        

        okhttp3.Call localVarCall = deleteLiveStreamSimulcastTargetCall(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<Void> deleteLiveStreamSimulcastTargetWithHttpInfo(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID) throws ApiException {
        okhttp3.Call localVarCall = deleteLiveStreamSimulcastTargetValidateBeforeCall(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteLiveStreamSimulcastTargetAsync(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLiveStreamSimulcastTargetValidateBeforeCall(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteLiveStreamSimulcastTargetRequest {
        private final String LIVE_STREAM_ID;
        private final String SIMULCAST_TARGET_ID;

        private APIdeleteLiveStreamSimulcastTargetRequest(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID) {
            this.LIVE_STREAM_ID = LIVE_STREAM_ID;
            this.SIMULCAST_TARGET_ID = SIMULCAST_TARGET_ID;
        }

        /**
         * Build call for deleteLiveStreamSimulcastTarget
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteLiveStreamSimulcastTargetCall(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, _callback);
        }

        /**
         * Execute deleteLiveStreamSimulcastTarget request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteLiveStreamSimulcastTargetWithHttpInfo(LIVE_STREAM_ID, SIMULCAST_TARGET_ID);
        }

        /**
         * Execute deleteLiveStreamSimulcastTarget request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteLiveStreamSimulcastTargetWithHttpInfo(LIVE_STREAM_ID, SIMULCAST_TARGET_ID);
        }

        /**
         * Execute deleteLiveStreamSimulcastTarget request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteLiveStreamSimulcastTargetAsync(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, _callback);
        }
    }

    /**
     * Delete a live stream simulcast target
     * Delete the simulcast target using the simulcast target ID returned when creating the simulcast target. Simulcast Target can only be deleted when the parent live stream is in idle state.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param SIMULCAST_TARGET_ID The ID of the simulcast target. (required)
     * @return APIdeleteLiveStreamSimulcastTargetRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteLiveStreamSimulcastTargetRequest deleteLiveStreamSimulcastTarget(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID) {
        return new APIdeleteLiveStreamSimulcastTargetRequest(LIVE_STREAM_ID, SIMULCAST_TARGET_ID);
    }
    private okhttp3.Call disableLiveStreamCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/disable"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableLiveStreamValidateBeforeCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling disableLiveStream(Async)");
        }
        

        okhttp3.Call localVarCall = disableLiveStreamCall(LIVE_STREAM_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<DisableLiveStreamResponse> disableLiveStreamWithHttpInfo(String LIVE_STREAM_ID) throws ApiException {
        okhttp3.Call localVarCall = disableLiveStreamValidateBeforeCall(LIVE_STREAM_ID, null);
        Type localVarReturnType = new TypeToken<DisableLiveStreamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call disableLiveStreamAsync(String LIVE_STREAM_ID, final ApiCallback<DisableLiveStreamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableLiveStreamValidateBeforeCall(LIVE_STREAM_ID, _callback);
        Type localVarReturnType = new TypeToken<DisableLiveStreamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdisableLiveStreamRequest {
        private final String LIVE_STREAM_ID;

        private APIdisableLiveStreamRequest(String LIVE_STREAM_ID) {
            this.LIVE_STREAM_ID = LIVE_STREAM_ID;
        }

        /**
         * Build call for disableLiveStream
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return disableLiveStreamCall(LIVE_STREAM_ID, _callback);
        }

        /**
         * Execute disableLiveStream request
         * @return DisableLiveStreamResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DisableLiveStreamResponse execute() throws ApiException {
            ApiResponse<DisableLiveStreamResponse> localVarResp = disableLiveStreamWithHttpInfo(LIVE_STREAM_ID);
            return localVarResp.getData();
        }

        /**
         * Execute disableLiveStream request with HTTP info returned
         * @return ApiResponse&lt;DisableLiveStreamResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DisableLiveStreamResponse> executeWithHttpInfo() throws ApiException {
            return disableLiveStreamWithHttpInfo(LIVE_STREAM_ID);
        }

        /**
         * Execute disableLiveStream request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DisableLiveStreamResponse> _callback) throws ApiException {
            return disableLiveStreamAsync(LIVE_STREAM_ID, _callback);
        }
    }

    /**
     * Disable a live stream
     * Disables a live stream, making it reject incoming RTMP streams until re-enabled. The API also ends the live stream recording immediately when active. Ending the live stream recording adds the &#x60;EXT-X-ENDLIST&#x60; tag to the HLS manifest which notifies the player that this live stream is over.  Mux also closes the encoder connection immediately. Any attempt from the encoder to re-establish connection will fail till the live stream is re-enabled. 
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @return APIdisableLiveStreamRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIdisableLiveStreamRequest disableLiveStream(String LIVE_STREAM_ID) {
        return new APIdisableLiveStreamRequest(LIVE_STREAM_ID);
    }
    private okhttp3.Call enableLiveStreamCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/enable"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableLiveStreamValidateBeforeCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling enableLiveStream(Async)");
        }
        

        okhttp3.Call localVarCall = enableLiveStreamCall(LIVE_STREAM_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<EnableLiveStreamResponse> enableLiveStreamWithHttpInfo(String LIVE_STREAM_ID) throws ApiException {
        okhttp3.Call localVarCall = enableLiveStreamValidateBeforeCall(LIVE_STREAM_ID, null);
        Type localVarReturnType = new TypeToken<EnableLiveStreamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enableLiveStreamAsync(String LIVE_STREAM_ID, final ApiCallback<EnableLiveStreamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableLiveStreamValidateBeforeCall(LIVE_STREAM_ID, _callback);
        Type localVarReturnType = new TypeToken<EnableLiveStreamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIenableLiveStreamRequest {
        private final String LIVE_STREAM_ID;

        private APIenableLiveStreamRequest(String LIVE_STREAM_ID) {
            this.LIVE_STREAM_ID = LIVE_STREAM_ID;
        }

        /**
         * Build call for enableLiveStream
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return enableLiveStreamCall(LIVE_STREAM_ID, _callback);
        }

        /**
         * Execute enableLiveStream request
         * @return EnableLiveStreamResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EnableLiveStreamResponse execute() throws ApiException {
            ApiResponse<EnableLiveStreamResponse> localVarResp = enableLiveStreamWithHttpInfo(LIVE_STREAM_ID);
            return localVarResp.getData();
        }

        /**
         * Execute enableLiveStream request with HTTP info returned
         * @return ApiResponse&lt;EnableLiveStreamResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EnableLiveStreamResponse> executeWithHttpInfo() throws ApiException {
            return enableLiveStreamWithHttpInfo(LIVE_STREAM_ID);
        }

        /**
         * Execute enableLiveStream request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EnableLiveStreamResponse> _callback) throws ApiException {
            return enableLiveStreamAsync(LIVE_STREAM_ID, _callback);
        }
    }

    /**
     * Enable a live stream
     * Enables a live stream, allowing it to accept an incoming RTMP stream.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @return APIenableLiveStreamRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIenableLiveStreamRequest enableLiveStream(String LIVE_STREAM_ID) {
        return new APIenableLiveStreamRequest(LIVE_STREAM_ID);
    }
    private okhttp3.Call getLiveStreamCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLiveStreamValidateBeforeCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling getLiveStream(Async)");
        }
        

        okhttp3.Call localVarCall = getLiveStreamCall(LIVE_STREAM_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<LiveStreamResponse> getLiveStreamWithHttpInfo(String LIVE_STREAM_ID) throws ApiException {
        okhttp3.Call localVarCall = getLiveStreamValidateBeforeCall(LIVE_STREAM_ID, null);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLiveStreamAsync(String LIVE_STREAM_ID, final ApiCallback<LiveStreamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLiveStreamValidateBeforeCall(LIVE_STREAM_ID, _callback);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetLiveStreamRequest {
        private final String LIVE_STREAM_ID;

        private APIgetLiveStreamRequest(String LIVE_STREAM_ID) {
            this.LIVE_STREAM_ID = LIVE_STREAM_ID;
        }

        /**
         * Build call for getLiveStream
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLiveStreamCall(LIVE_STREAM_ID, _callback);
        }

        /**
         * Execute getLiveStream request
         * @return LiveStreamResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LiveStreamResponse execute() throws ApiException {
            ApiResponse<LiveStreamResponse> localVarResp = getLiveStreamWithHttpInfo(LIVE_STREAM_ID);
            return localVarResp.getData();
        }

        /**
         * Execute getLiveStream request with HTTP info returned
         * @return ApiResponse&lt;LiveStreamResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveStreamResponse> executeWithHttpInfo() throws ApiException {
            return getLiveStreamWithHttpInfo(LIVE_STREAM_ID);
        }

        /**
         * Execute getLiveStream request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveStreamResponse> _callback) throws ApiException {
            return getLiveStreamAsync(LIVE_STREAM_ID, _callback);
        }
    }

    /**
     * Retrieve a live stream
     * Retrieves the details of a live stream that has previously been created. Supply the unique live stream ID that was returned from your previous request, and Mux will return the corresponding live stream information. The same information is returned when creating a live stream.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @return APIgetLiveStreamRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetLiveStreamRequest getLiveStream(String LIVE_STREAM_ID) {
        return new APIgetLiveStreamRequest(LIVE_STREAM_ID);
    }
    private okhttp3.Call getLiveStreamPlaybackIdCall(String LIVE_STREAM_ID, String PLAYBACK_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/playback-ids/{PLAYBACK_ID}"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()))
            .replaceAll("\\{" + "PLAYBACK_ID" + "\\}", localVarApiClient.escapeString(PLAYBACK_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLiveStreamPlaybackIdValidateBeforeCall(String LIVE_STREAM_ID, String PLAYBACK_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling getLiveStreamPlaybackId(Async)");
        }
        
        // verify the required parameter 'PLAYBACK_ID' is set
        if (PLAYBACK_ID == null) {
            throw new ApiException("Missing the required parameter 'PLAYBACK_ID' when calling getLiveStreamPlaybackId(Async)");
        }
        

        okhttp3.Call localVarCall = getLiveStreamPlaybackIdCall(LIVE_STREAM_ID, PLAYBACK_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<GetLiveStreamPlaybackIDResponse> getLiveStreamPlaybackIdWithHttpInfo(String LIVE_STREAM_ID, String PLAYBACK_ID) throws ApiException {
        okhttp3.Call localVarCall = getLiveStreamPlaybackIdValidateBeforeCall(LIVE_STREAM_ID, PLAYBACK_ID, null);
        Type localVarReturnType = new TypeToken<GetLiveStreamPlaybackIDResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLiveStreamPlaybackIdAsync(String LIVE_STREAM_ID, String PLAYBACK_ID, final ApiCallback<GetLiveStreamPlaybackIDResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLiveStreamPlaybackIdValidateBeforeCall(LIVE_STREAM_ID, PLAYBACK_ID, _callback);
        Type localVarReturnType = new TypeToken<GetLiveStreamPlaybackIDResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetLiveStreamPlaybackIdRequest {
        private final String LIVE_STREAM_ID;
        private final String PLAYBACK_ID;

        private APIgetLiveStreamPlaybackIdRequest(String LIVE_STREAM_ID, String PLAYBACK_ID) {
            this.LIVE_STREAM_ID = LIVE_STREAM_ID;
            this.PLAYBACK_ID = PLAYBACK_ID;
        }

        /**
         * Build call for getLiveStreamPlaybackId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLiveStreamPlaybackIdCall(LIVE_STREAM_ID, PLAYBACK_ID, _callback);
        }

        /**
         * Execute getLiveStreamPlaybackId request
         * @return GetLiveStreamPlaybackIDResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GetLiveStreamPlaybackIDResponse execute() throws ApiException {
            ApiResponse<GetLiveStreamPlaybackIDResponse> localVarResp = getLiveStreamPlaybackIdWithHttpInfo(LIVE_STREAM_ID, PLAYBACK_ID);
            return localVarResp.getData();
        }

        /**
         * Execute getLiveStreamPlaybackId request with HTTP info returned
         * @return ApiResponse&lt;GetLiveStreamPlaybackIDResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetLiveStreamPlaybackIDResponse> executeWithHttpInfo() throws ApiException {
            return getLiveStreamPlaybackIdWithHttpInfo(LIVE_STREAM_ID, PLAYBACK_ID);
        }

        /**
         * Execute getLiveStreamPlaybackId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetLiveStreamPlaybackIDResponse> _callback) throws ApiException {
            return getLiveStreamPlaybackIdAsync(LIVE_STREAM_ID, PLAYBACK_ID, _callback);
        }
    }

    /**
     * Retrieve a live stream playback ID
     * Fetches information about a live stream&#39;s playback ID, through which a viewer can watch the streamed content from this live stream.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @return APIgetLiveStreamPlaybackIdRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetLiveStreamPlaybackIdRequest getLiveStreamPlaybackId(String LIVE_STREAM_ID, String PLAYBACK_ID) {
        return new APIgetLiveStreamPlaybackIdRequest(LIVE_STREAM_ID, PLAYBACK_ID);
    }
    private okhttp3.Call getLiveStreamSimulcastTargetCall(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets/{SIMULCAST_TARGET_ID}"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()))
            .replaceAll("\\{" + "SIMULCAST_TARGET_ID" + "\\}", localVarApiClient.escapeString(SIMULCAST_TARGET_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLiveStreamSimulcastTargetValidateBeforeCall(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling getLiveStreamSimulcastTarget(Async)");
        }
        
        // verify the required parameter 'SIMULCAST_TARGET_ID' is set
        if (SIMULCAST_TARGET_ID == null) {
            throw new ApiException("Missing the required parameter 'SIMULCAST_TARGET_ID' when calling getLiveStreamSimulcastTarget(Async)");
        }
        

        okhttp3.Call localVarCall = getLiveStreamSimulcastTargetCall(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<SimulcastTargetResponse> getLiveStreamSimulcastTargetWithHttpInfo(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID) throws ApiException {
        okhttp3.Call localVarCall = getLiveStreamSimulcastTargetValidateBeforeCall(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, null);
        Type localVarReturnType = new TypeToken<SimulcastTargetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLiveStreamSimulcastTargetAsync(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID, final ApiCallback<SimulcastTargetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLiveStreamSimulcastTargetValidateBeforeCall(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, _callback);
        Type localVarReturnType = new TypeToken<SimulcastTargetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetLiveStreamSimulcastTargetRequest {
        private final String LIVE_STREAM_ID;
        private final String SIMULCAST_TARGET_ID;

        private APIgetLiveStreamSimulcastTargetRequest(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID) {
            this.LIVE_STREAM_ID = LIVE_STREAM_ID;
            this.SIMULCAST_TARGET_ID = SIMULCAST_TARGET_ID;
        }

        /**
         * Build call for getLiveStreamSimulcastTarget
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLiveStreamSimulcastTargetCall(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, _callback);
        }

        /**
         * Execute getLiveStreamSimulcastTarget request
         * @return SimulcastTargetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public SimulcastTargetResponse execute() throws ApiException {
            ApiResponse<SimulcastTargetResponse> localVarResp = getLiveStreamSimulcastTargetWithHttpInfo(LIVE_STREAM_ID, SIMULCAST_TARGET_ID);
            return localVarResp.getData();
        }

        /**
         * Execute getLiveStreamSimulcastTarget request with HTTP info returned
         * @return ApiResponse&lt;SimulcastTargetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SimulcastTargetResponse> executeWithHttpInfo() throws ApiException {
            return getLiveStreamSimulcastTargetWithHttpInfo(LIVE_STREAM_ID, SIMULCAST_TARGET_ID);
        }

        /**
         * Execute getLiveStreamSimulcastTarget request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SimulcastTargetResponse> _callback) throws ApiException {
            return getLiveStreamSimulcastTargetAsync(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, _callback);
        }
    }

    /**
     * Retrieve a live stream simulcast target
     * Retrieves the details of the simulcast target created for the parent live stream. Supply the unique live stream ID and simulcast target ID that was returned in the response of create simulcast target request, and Mux will return the corresponding information.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param SIMULCAST_TARGET_ID The ID of the simulcast target. (required)
     * @return APIgetLiveStreamSimulcastTargetRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetLiveStreamSimulcastTargetRequest getLiveStreamSimulcastTarget(String LIVE_STREAM_ID, String SIMULCAST_TARGET_ID) {
        return new APIgetLiveStreamSimulcastTargetRequest(LIVE_STREAM_ID, SIMULCAST_TARGET_ID);
    }
    private okhttp3.Call listLiveStreamsCall(Integer limit, Integer page, String streamKey, LiveStreamStatus status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (streamKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stream_key", streamKey));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLiveStreamsValidateBeforeCall(Integer limit, Integer page, String streamKey, LiveStreamStatus status, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listLiveStreamsCall(limit, page, streamKey, status, _callback);
        return localVarCall;

    }


    private ApiResponse<ListLiveStreamsResponse> listLiveStreamsWithHttpInfo(Integer limit, Integer page, String streamKey, LiveStreamStatus status) throws ApiException {
        okhttp3.Call localVarCall = listLiveStreamsValidateBeforeCall(limit, page, streamKey, status, null);
        Type localVarReturnType = new TypeToken<ListLiveStreamsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLiveStreamsAsync(Integer limit, Integer page, String streamKey, LiveStreamStatus status, final ApiCallback<ListLiveStreamsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLiveStreamsValidateBeforeCall(limit, page, streamKey, status, _callback);
        Type localVarReturnType = new TypeToken<ListLiveStreamsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistLiveStreamsRequest {
        private Integer limit;
        private Integer page;
        private String streamKey;
        private LiveStreamStatus status;

        private APIlistLiveStreamsRequest() {
        }

        /**
         * Set limit
         * @param limit Number of items to include in the response (optional, default to 25)
         * @return APIlistLiveStreamsRequest
         */
        public APIlistLiveStreamsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
         * @return APIlistLiveStreamsRequest
         */
        public APIlistLiveStreamsRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set streamKey
         * @param streamKey Filter response to return live stream for this stream key only (optional)
         * @return APIlistLiveStreamsRequest
         */
        public APIlistLiveStreamsRequest streamKey(String streamKey) {
            this.streamKey = streamKey;
            return this;
        }

        /**
         * Set status
         * @param status Filter response to return live streams with the specified status only (optional)
         * @return APIlistLiveStreamsRequest
         */
        public APIlistLiveStreamsRequest status(LiveStreamStatus status) {
            this.status = status;
            return this;
        }

        /**
         * Build call for listLiveStreams
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLiveStreamsCall(limit, page, streamKey, status, _callback);
        }

        /**
         * Execute listLiveStreams request
         * @return ListLiveStreamsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ListLiveStreamsResponse execute() throws ApiException {
            ApiResponse<ListLiveStreamsResponse> localVarResp = listLiveStreamsWithHttpInfo(limit, page, streamKey, status);
            return localVarResp.getData();
        }

        /**
         * Execute listLiveStreams request with HTTP info returned
         * @return ApiResponse&lt;ListLiveStreamsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListLiveStreamsResponse> executeWithHttpInfo() throws ApiException {
            return listLiveStreamsWithHttpInfo(limit, page, streamKey, status);
        }

        /**
         * Execute listLiveStreams request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListLiveStreamsResponse> _callback) throws ApiException {
            return listLiveStreamsAsync(limit, page, streamKey, status, _callback);
        }
    }

    /**
     * List live streams
     * Lists the live streams that currently exist in the current environment.
     * @return APIlistLiveStreamsRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIlistLiveStreamsRequest listLiveStreams() {
        return new APIlistLiveStreamsRequest();
    }
    private okhttp3.Call resetStreamKeyCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/reset-stream-key"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetStreamKeyValidateBeforeCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling resetStreamKey(Async)");
        }
        

        okhttp3.Call localVarCall = resetStreamKeyCall(LIVE_STREAM_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<LiveStreamResponse> resetStreamKeyWithHttpInfo(String LIVE_STREAM_ID) throws ApiException {
        okhttp3.Call localVarCall = resetStreamKeyValidateBeforeCall(LIVE_STREAM_ID, null);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call resetStreamKeyAsync(String LIVE_STREAM_ID, final ApiCallback<LiveStreamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetStreamKeyValidateBeforeCall(LIVE_STREAM_ID, _callback);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIresetStreamKeyRequest {
        private final String LIVE_STREAM_ID;

        private APIresetStreamKeyRequest(String LIVE_STREAM_ID) {
            this.LIVE_STREAM_ID = LIVE_STREAM_ID;
        }

        /**
         * Build call for resetStreamKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resetStreamKeyCall(LIVE_STREAM_ID, _callback);
        }

        /**
         * Execute resetStreamKey request
         * @return LiveStreamResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LiveStreamResponse execute() throws ApiException {
            ApiResponse<LiveStreamResponse> localVarResp = resetStreamKeyWithHttpInfo(LIVE_STREAM_ID);
            return localVarResp.getData();
        }

        /**
         * Execute resetStreamKey request with HTTP info returned
         * @return ApiResponse&lt;LiveStreamResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveStreamResponse> executeWithHttpInfo() throws ApiException {
            return resetStreamKeyWithHttpInfo(LIVE_STREAM_ID);
        }

        /**
         * Execute resetStreamKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveStreamResponse> _callback) throws ApiException {
            return resetStreamKeyAsync(LIVE_STREAM_ID, _callback);
        }
    }

    /**
     * Reset a live stream&#39;s stream key
     * Reset a live stream key if you want to immediately stop the current stream key from working and create a new stream key that can be used for future broadcasts.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @return APIresetStreamKeyRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIresetStreamKeyRequest resetStreamKey(String LIVE_STREAM_ID) {
        return new APIresetStreamKeyRequest(LIVE_STREAM_ID);
    }
    private okhttp3.Call signalLiveStreamCompleteCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/complete"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signalLiveStreamCompleteValidateBeforeCall(String LIVE_STREAM_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling signalLiveStreamComplete(Async)");
        }
        

        okhttp3.Call localVarCall = signalLiveStreamCompleteCall(LIVE_STREAM_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<SignalLiveStreamCompleteResponse> signalLiveStreamCompleteWithHttpInfo(String LIVE_STREAM_ID) throws ApiException {
        okhttp3.Call localVarCall = signalLiveStreamCompleteValidateBeforeCall(LIVE_STREAM_ID, null);
        Type localVarReturnType = new TypeToken<SignalLiveStreamCompleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call signalLiveStreamCompleteAsync(String LIVE_STREAM_ID, final ApiCallback<SignalLiveStreamCompleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = signalLiveStreamCompleteValidateBeforeCall(LIVE_STREAM_ID, _callback);
        Type localVarReturnType = new TypeToken<SignalLiveStreamCompleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsignalLiveStreamCompleteRequest {
        private final String LIVE_STREAM_ID;

        private APIsignalLiveStreamCompleteRequest(String LIVE_STREAM_ID) {
            this.LIVE_STREAM_ID = LIVE_STREAM_ID;
        }

        /**
         * Build call for signalLiveStreamComplete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return signalLiveStreamCompleteCall(LIVE_STREAM_ID, _callback);
        }

        /**
         * Execute signalLiveStreamComplete request
         * @return SignalLiveStreamCompleteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public SignalLiveStreamCompleteResponse execute() throws ApiException {
            ApiResponse<SignalLiveStreamCompleteResponse> localVarResp = signalLiveStreamCompleteWithHttpInfo(LIVE_STREAM_ID);
            return localVarResp.getData();
        }

        /**
         * Execute signalLiveStreamComplete request with HTTP info returned
         * @return ApiResponse&lt;SignalLiveStreamCompleteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SignalLiveStreamCompleteResponse> executeWithHttpInfo() throws ApiException {
            return signalLiveStreamCompleteWithHttpInfo(LIVE_STREAM_ID);
        }

        /**
         * Execute signalLiveStreamComplete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SignalLiveStreamCompleteResponse> _callback) throws ApiException {
            return signalLiveStreamCompleteAsync(LIVE_STREAM_ID, _callback);
        }
    }

    /**
     * Signal a live stream is finished
     * (Optional) End the live stream recording immediately instead of waiting for the reconnect_window. &#x60;EXT-X-ENDLIST&#x60; tag is added to the HLS manifest which notifies the player that this live stream is over.  Mux does not close the encoder connection immediately. Encoders are often configured to re-establish connections immediately which would result in a new recorded asset. For this reason, Mux waits for 60s before closing the connection with the encoder. This 60s timeframe is meant to give encoder operators a chance to disconnect from their end. 
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @return APIsignalLiveStreamCompleteRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIsignalLiveStreamCompleteRequest signalLiveStreamComplete(String LIVE_STREAM_ID) {
        return new APIsignalLiveStreamCompleteRequest(LIVE_STREAM_ID);
    }
    private okhttp3.Call updateLiveStreamCall(String LIVE_STREAM_ID, UpdateLiveStreamRequest updateLiveStreamRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateLiveStreamRequest;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLiveStreamValidateBeforeCall(String LIVE_STREAM_ID, UpdateLiveStreamRequest updateLiveStreamRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling updateLiveStream(Async)");
        }
        
        // verify the required parameter 'updateLiveStreamRequest' is set
        if (updateLiveStreamRequest == null) {
            throw new ApiException("Missing the required parameter 'updateLiveStreamRequest' when calling updateLiveStream(Async)");
        }
        

        okhttp3.Call localVarCall = updateLiveStreamCall(LIVE_STREAM_ID, updateLiveStreamRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<LiveStreamResponse> updateLiveStreamWithHttpInfo(String LIVE_STREAM_ID, UpdateLiveStreamRequest updateLiveStreamRequest) throws ApiException {
        okhttp3.Call localVarCall = updateLiveStreamValidateBeforeCall(LIVE_STREAM_ID, updateLiveStreamRequest, null);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateLiveStreamAsync(String LIVE_STREAM_ID, UpdateLiveStreamRequest updateLiveStreamRequest, final ApiCallback<LiveStreamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLiveStreamValidateBeforeCall(LIVE_STREAM_ID, updateLiveStreamRequest, _callback);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateLiveStreamRequest {
        private final String LIVE_STREAM_ID;
        private final UpdateLiveStreamRequest updateLiveStreamRequest;

        private APIupdateLiveStreamRequest(String LIVE_STREAM_ID, UpdateLiveStreamRequest updateLiveStreamRequest) {
            this.LIVE_STREAM_ID = LIVE_STREAM_ID;
            this.updateLiveStreamRequest = updateLiveStreamRequest;
        }

        /**
         * Build call for updateLiveStream
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateLiveStreamCall(LIVE_STREAM_ID, updateLiveStreamRequest, _callback);
        }

        /**
         * Execute updateLiveStream request
         * @return LiveStreamResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LiveStreamResponse execute() throws ApiException {
            ApiResponse<LiveStreamResponse> localVarResp = updateLiveStreamWithHttpInfo(LIVE_STREAM_ID, updateLiveStreamRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateLiveStream request with HTTP info returned
         * @return ApiResponse&lt;LiveStreamResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveStreamResponse> executeWithHttpInfo() throws ApiException {
            return updateLiveStreamWithHttpInfo(LIVE_STREAM_ID, updateLiveStreamRequest);
        }

        /**
         * Execute updateLiveStream request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveStreamResponse> _callback) throws ApiException {
            return updateLiveStreamAsync(LIVE_STREAM_ID, updateLiveStreamRequest, _callback);
        }
    }

    /**
     * Update a live stream
     * Updates the parameters of a previously-created live stream. This currently supports a subset of variables. Supply the live stream ID and the updated parameters and Mux will return the corresponding live stream information. The information returned will be the same after update as for subsequent get live stream requests.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param updateLiveStreamRequest  (required)
     * @return APIupdateLiveStreamRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateLiveStreamRequest updateLiveStream(String LIVE_STREAM_ID, UpdateLiveStreamRequest updateLiveStreamRequest) {
        return new APIupdateLiveStreamRequest(LIVE_STREAM_ID, updateLiveStreamRequest);
    }
    private okhttp3.Call updateLiveStreamEmbeddedSubtitlesCall(String LIVE_STREAM_ID, UpdateLiveStreamEmbeddedSubtitlesRequest updateLiveStreamEmbeddedSubtitlesRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateLiveStreamEmbeddedSubtitlesRequest;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/embedded-subtitles"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLiveStreamEmbeddedSubtitlesValidateBeforeCall(String LIVE_STREAM_ID, UpdateLiveStreamEmbeddedSubtitlesRequest updateLiveStreamEmbeddedSubtitlesRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling updateLiveStreamEmbeddedSubtitles(Async)");
        }
        
        // verify the required parameter 'updateLiveStreamEmbeddedSubtitlesRequest' is set
        if (updateLiveStreamEmbeddedSubtitlesRequest == null) {
            throw new ApiException("Missing the required parameter 'updateLiveStreamEmbeddedSubtitlesRequest' when calling updateLiveStreamEmbeddedSubtitles(Async)");
        }
        

        okhttp3.Call localVarCall = updateLiveStreamEmbeddedSubtitlesCall(LIVE_STREAM_ID, updateLiveStreamEmbeddedSubtitlesRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<LiveStreamResponse> updateLiveStreamEmbeddedSubtitlesWithHttpInfo(String LIVE_STREAM_ID, UpdateLiveStreamEmbeddedSubtitlesRequest updateLiveStreamEmbeddedSubtitlesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateLiveStreamEmbeddedSubtitlesValidateBeforeCall(LIVE_STREAM_ID, updateLiveStreamEmbeddedSubtitlesRequest, null);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateLiveStreamEmbeddedSubtitlesAsync(String LIVE_STREAM_ID, UpdateLiveStreamEmbeddedSubtitlesRequest updateLiveStreamEmbeddedSubtitlesRequest, final ApiCallback<LiveStreamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLiveStreamEmbeddedSubtitlesValidateBeforeCall(LIVE_STREAM_ID, updateLiveStreamEmbeddedSubtitlesRequest, _callback);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateLiveStreamEmbeddedSubtitlesRequest {
        private final String LIVE_STREAM_ID;
        private final UpdateLiveStreamEmbeddedSubtitlesRequest updateLiveStreamEmbeddedSubtitlesRequest;

        private APIupdateLiveStreamEmbeddedSubtitlesRequest(String LIVE_STREAM_ID, UpdateLiveStreamEmbeddedSubtitlesRequest updateLiveStreamEmbeddedSubtitlesRequest) {
            this.LIVE_STREAM_ID = LIVE_STREAM_ID;
            this.updateLiveStreamEmbeddedSubtitlesRequest = updateLiveStreamEmbeddedSubtitlesRequest;
        }

        /**
         * Build call for updateLiveStreamEmbeddedSubtitles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateLiveStreamEmbeddedSubtitlesCall(LIVE_STREAM_ID, updateLiveStreamEmbeddedSubtitlesRequest, _callback);
        }

        /**
         * Execute updateLiveStreamEmbeddedSubtitles request
         * @return LiveStreamResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LiveStreamResponse execute() throws ApiException {
            ApiResponse<LiveStreamResponse> localVarResp = updateLiveStreamEmbeddedSubtitlesWithHttpInfo(LIVE_STREAM_ID, updateLiveStreamEmbeddedSubtitlesRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateLiveStreamEmbeddedSubtitles request with HTTP info returned
         * @return ApiResponse&lt;LiveStreamResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveStreamResponse> executeWithHttpInfo() throws ApiException {
            return updateLiveStreamEmbeddedSubtitlesWithHttpInfo(LIVE_STREAM_ID, updateLiveStreamEmbeddedSubtitlesRequest);
        }

        /**
         * Execute updateLiveStreamEmbeddedSubtitles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveStreamResponse> _callback) throws ApiException {
            return updateLiveStreamEmbeddedSubtitlesAsync(LIVE_STREAM_ID, updateLiveStreamEmbeddedSubtitlesRequest, _callback);
        }
    }

    /**
     * Update a live stream&#39;s embedded subtitles
     * Configures a live stream to receive embedded closed captions. The resulting Asset&#39;s subtitle text track will have &#x60;closed_captions: true&#x60; set. 
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param updateLiveStreamEmbeddedSubtitlesRequest  (required)
     * @return APIupdateLiveStreamEmbeddedSubtitlesRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateLiveStreamEmbeddedSubtitlesRequest updateLiveStreamEmbeddedSubtitles(String LIVE_STREAM_ID, UpdateLiveStreamEmbeddedSubtitlesRequest updateLiveStreamEmbeddedSubtitlesRequest) {
        return new APIupdateLiveStreamEmbeddedSubtitlesRequest(LIVE_STREAM_ID, updateLiveStreamEmbeddedSubtitlesRequest);
    }
    private okhttp3.Call updateLiveStreamGeneratedSubtitlesCall(String LIVE_STREAM_ID, UpdateLiveStreamGeneratedSubtitlesRequest updateLiveStreamGeneratedSubtitlesRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateLiveStreamGeneratedSubtitlesRequest;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/generated-subtitles"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLiveStreamGeneratedSubtitlesValidateBeforeCall(String LIVE_STREAM_ID, UpdateLiveStreamGeneratedSubtitlesRequest updateLiveStreamGeneratedSubtitlesRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling updateLiveStreamGeneratedSubtitles(Async)");
        }
        
        // verify the required parameter 'updateLiveStreamGeneratedSubtitlesRequest' is set
        if (updateLiveStreamGeneratedSubtitlesRequest == null) {
            throw new ApiException("Missing the required parameter 'updateLiveStreamGeneratedSubtitlesRequest' when calling updateLiveStreamGeneratedSubtitles(Async)");
        }
        

        okhttp3.Call localVarCall = updateLiveStreamGeneratedSubtitlesCall(LIVE_STREAM_ID, updateLiveStreamGeneratedSubtitlesRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<LiveStreamResponse> updateLiveStreamGeneratedSubtitlesWithHttpInfo(String LIVE_STREAM_ID, UpdateLiveStreamGeneratedSubtitlesRequest updateLiveStreamGeneratedSubtitlesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateLiveStreamGeneratedSubtitlesValidateBeforeCall(LIVE_STREAM_ID, updateLiveStreamGeneratedSubtitlesRequest, null);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateLiveStreamGeneratedSubtitlesAsync(String LIVE_STREAM_ID, UpdateLiveStreamGeneratedSubtitlesRequest updateLiveStreamGeneratedSubtitlesRequest, final ApiCallback<LiveStreamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLiveStreamGeneratedSubtitlesValidateBeforeCall(LIVE_STREAM_ID, updateLiveStreamGeneratedSubtitlesRequest, _callback);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateLiveStreamGeneratedSubtitlesRequest {
        private final String LIVE_STREAM_ID;
        private final UpdateLiveStreamGeneratedSubtitlesRequest updateLiveStreamGeneratedSubtitlesRequest;

        private APIupdateLiveStreamGeneratedSubtitlesRequest(String LIVE_STREAM_ID, UpdateLiveStreamGeneratedSubtitlesRequest updateLiveStreamGeneratedSubtitlesRequest) {
            this.LIVE_STREAM_ID = LIVE_STREAM_ID;
            this.updateLiveStreamGeneratedSubtitlesRequest = updateLiveStreamGeneratedSubtitlesRequest;
        }

        /**
         * Build call for updateLiveStreamGeneratedSubtitles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateLiveStreamGeneratedSubtitlesCall(LIVE_STREAM_ID, updateLiveStreamGeneratedSubtitlesRequest, _callback);
        }

        /**
         * Execute updateLiveStreamGeneratedSubtitles request
         * @return LiveStreamResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LiveStreamResponse execute() throws ApiException {
            ApiResponse<LiveStreamResponse> localVarResp = updateLiveStreamGeneratedSubtitlesWithHttpInfo(LIVE_STREAM_ID, updateLiveStreamGeneratedSubtitlesRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateLiveStreamGeneratedSubtitles request with HTTP info returned
         * @return ApiResponse&lt;LiveStreamResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveStreamResponse> executeWithHttpInfo() throws ApiException {
            return updateLiveStreamGeneratedSubtitlesWithHttpInfo(LIVE_STREAM_ID, updateLiveStreamGeneratedSubtitlesRequest);
        }

        /**
         * Execute updateLiveStreamGeneratedSubtitles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveStreamResponse> _callback) throws ApiException {
            return updateLiveStreamGeneratedSubtitlesAsync(LIVE_STREAM_ID, updateLiveStreamGeneratedSubtitlesRequest, _callback);
        }
    }

    /**
     * Update a live stream&#39;s generated subtitles
     * Updates a live stream&#39;s automatic-speech-recognition-generated subtitle configuration. Automatic speech recognition subtitles can be removed by sending an empty array in the request payload. 
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param updateLiveStreamGeneratedSubtitlesRequest  (required)
     * @return APIupdateLiveStreamGeneratedSubtitlesRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateLiveStreamGeneratedSubtitlesRequest updateLiveStreamGeneratedSubtitles(String LIVE_STREAM_ID, UpdateLiveStreamGeneratedSubtitlesRequest updateLiveStreamGeneratedSubtitlesRequest) {
        return new APIupdateLiveStreamGeneratedSubtitlesRequest(LIVE_STREAM_ID, updateLiveStreamGeneratedSubtitlesRequest);
    }
    private okhttp3.Call updateLiveStreamNewAssetSettingsStaticRenditionsCall(String LIVE_STREAM_ID, UpdateLiveStreamNewAssetSettingsStaticRenditionsRequest updateLiveStreamNewAssetSettingsStaticRenditionsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateLiveStreamNewAssetSettingsStaticRenditionsRequest;

        // create path and map variables
        String localVarPath = "/video/v1/live-streams/{LIVE_STREAM_ID}/new-asset-settings/static-renditions"
            .replaceAll("\\{" + "LIVE_STREAM_ID" + "\\}", localVarApiClient.escapeString(LIVE_STREAM_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLiveStreamNewAssetSettingsStaticRenditionsValidateBeforeCall(String LIVE_STREAM_ID, UpdateLiveStreamNewAssetSettingsStaticRenditionsRequest updateLiveStreamNewAssetSettingsStaticRenditionsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'LIVE_STREAM_ID' is set
        if (LIVE_STREAM_ID == null) {
            throw new ApiException("Missing the required parameter 'LIVE_STREAM_ID' when calling updateLiveStreamNewAssetSettingsStaticRenditions(Async)");
        }
        
        // verify the required parameter 'updateLiveStreamNewAssetSettingsStaticRenditionsRequest' is set
        if (updateLiveStreamNewAssetSettingsStaticRenditionsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateLiveStreamNewAssetSettingsStaticRenditionsRequest' when calling updateLiveStreamNewAssetSettingsStaticRenditions(Async)");
        }
        

        okhttp3.Call localVarCall = updateLiveStreamNewAssetSettingsStaticRenditionsCall(LIVE_STREAM_ID, updateLiveStreamNewAssetSettingsStaticRenditionsRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<LiveStreamResponse> updateLiveStreamNewAssetSettingsStaticRenditionsWithHttpInfo(String LIVE_STREAM_ID, UpdateLiveStreamNewAssetSettingsStaticRenditionsRequest updateLiveStreamNewAssetSettingsStaticRenditionsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateLiveStreamNewAssetSettingsStaticRenditionsValidateBeforeCall(LIVE_STREAM_ID, updateLiveStreamNewAssetSettingsStaticRenditionsRequest, null);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateLiveStreamNewAssetSettingsStaticRenditionsAsync(String LIVE_STREAM_ID, UpdateLiveStreamNewAssetSettingsStaticRenditionsRequest updateLiveStreamNewAssetSettingsStaticRenditionsRequest, final ApiCallback<LiveStreamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLiveStreamNewAssetSettingsStaticRenditionsValidateBeforeCall(LIVE_STREAM_ID, updateLiveStreamNewAssetSettingsStaticRenditionsRequest, _callback);
        Type localVarReturnType = new TypeToken<LiveStreamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateLiveStreamNewAssetSettingsStaticRenditionsRequest {
        private final String LIVE_STREAM_ID;
        private final UpdateLiveStreamNewAssetSettingsStaticRenditionsRequest updateLiveStreamNewAssetSettingsStaticRenditionsRequest;

        private APIupdateLiveStreamNewAssetSettingsStaticRenditionsRequest(String LIVE_STREAM_ID, UpdateLiveStreamNewAssetSettingsStaticRenditionsRequest updateLiveStreamNewAssetSettingsStaticRenditionsRequest) {
            this.LIVE_STREAM_ID = LIVE_STREAM_ID;
            this.updateLiveStreamNewAssetSettingsStaticRenditionsRequest = updateLiveStreamNewAssetSettingsStaticRenditionsRequest;
        }

        /**
         * Build call for updateLiveStreamNewAssetSettingsStaticRenditions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateLiveStreamNewAssetSettingsStaticRenditionsCall(LIVE_STREAM_ID, updateLiveStreamNewAssetSettingsStaticRenditionsRequest, _callback);
        }

        /**
         * Execute updateLiveStreamNewAssetSettingsStaticRenditions request
         * @return LiveStreamResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LiveStreamResponse execute() throws ApiException {
            ApiResponse<LiveStreamResponse> localVarResp = updateLiveStreamNewAssetSettingsStaticRenditionsWithHttpInfo(LIVE_STREAM_ID, updateLiveStreamNewAssetSettingsStaticRenditionsRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateLiveStreamNewAssetSettingsStaticRenditions request with HTTP info returned
         * @return ApiResponse&lt;LiveStreamResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LiveStreamResponse> executeWithHttpInfo() throws ApiException {
            return updateLiveStreamNewAssetSettingsStaticRenditionsWithHttpInfo(LIVE_STREAM_ID, updateLiveStreamNewAssetSettingsStaticRenditionsRequest);
        }

        /**
         * Execute updateLiveStreamNewAssetSettingsStaticRenditions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LiveStreamResponse> _callback) throws ApiException {
            return updateLiveStreamNewAssetSettingsStaticRenditionsAsync(LIVE_STREAM_ID, updateLiveStreamNewAssetSettingsStaticRenditionsRequest, _callback);
        }
    }

    /**
     * Update live stream static renditions for new assets
     * Updates a live stream&#39;s static renditions settings for new assets. Further assets made via this live stream will create static renditions per the settings provided. You must provide all static renditions desired.
     * @param LIVE_STREAM_ID The live stream ID (required)
     * @param updateLiveStreamNewAssetSettingsStaticRenditionsRequest  (required)
     * @return APIupdateLiveStreamNewAssetSettingsStaticRenditionsRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateLiveStreamNewAssetSettingsStaticRenditionsRequest updateLiveStreamNewAssetSettingsStaticRenditions(String LIVE_STREAM_ID, UpdateLiveStreamNewAssetSettingsStaticRenditionsRequest updateLiveStreamNewAssetSettingsStaticRenditionsRequest) {
        return new APIupdateLiveStreamNewAssetSettingsStaticRenditionsRequest(LIVE_STREAM_ID, updateLiveStreamNewAssetSettingsStaticRenditionsRequest);
    }
}
