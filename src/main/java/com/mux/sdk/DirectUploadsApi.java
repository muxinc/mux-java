/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mux.sdk;

import com.mux.ApiCallback;
import com.mux.ApiClient;
import com.mux.ApiException;
import com.mux.ApiResponse;
import com.mux.Configuration;
import com.mux.Pair;
import com.mux.ProgressRequestBody;
import com.mux.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mux.sdk.models.CreateUploadRequest;
import com.mux.sdk.models.ListUploadsResponse;
import com.mux.sdk.models.UploadResponse;

import java.lang.reflect.Type;

public class DirectUploadsApi {
    private ApiClient localVarApiClient;

    public DirectUploadsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DirectUploadsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for cancelDirectUpload
     * @param UPLOAD_ID ID of the Upload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Cancellation no longer possible </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelDirectUploadCall(String UPLOAD_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/uploads/{UPLOAD_ID}/cancel"
            .replaceAll("\\{" + "UPLOAD_ID" + "\\}", localVarApiClient.escapeString(UPLOAD_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelDirectUploadValidateBeforeCall(String UPLOAD_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'UPLOAD_ID' is set
        if (UPLOAD_ID == null) {
            throw new ApiException("Missing the required parameter 'UPLOAD_ID' when calling cancelDirectUpload(Async)");
        }
        

        okhttp3.Call localVarCall = cancelDirectUploadCall(UPLOAD_ID, _callback);
        return localVarCall;

    }

    /**
     * Cancel a direct upload
     * Cancels a direct upload and marks it as cancelled. If a pending upload finishes after this request, no asset will be created. This request will only succeed if the upload is still in the &#x60;waiting&#x60; state. 
     * @param UPLOAD_ID ID of the Upload (required)
     * @return UploadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Cancellation no longer possible </td><td>  -  </td></tr>
     </table>
     */
    public UploadResponse cancelDirectUpload(String UPLOAD_ID) throws ApiException {
        ApiResponse<UploadResponse> localVarResp = cancelDirectUploadWithHttpInfo(UPLOAD_ID);
        return localVarResp.getData();
    }

    /**
     * Cancel a direct upload
     * Cancels a direct upload and marks it as cancelled. If a pending upload finishes after this request, no asset will be created. This request will only succeed if the upload is still in the &#x60;waiting&#x60; state. 
     * @param UPLOAD_ID ID of the Upload (required)
     * @return ApiResponse&lt;UploadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Cancellation no longer possible </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadResponse> cancelDirectUploadWithHttpInfo(String UPLOAD_ID) throws ApiException {
        okhttp3.Call localVarCall = cancelDirectUploadValidateBeforeCall(UPLOAD_ID, null);
        Type localVarReturnType = new TypeToken<UploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a direct upload (asynchronously)
     * Cancels a direct upload and marks it as cancelled. If a pending upload finishes after this request, no asset will be created. This request will only succeed if the upload is still in the &#x60;waiting&#x60; state. 
     * @param UPLOAD_ID ID of the Upload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Cancellation no longer possible </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelDirectUploadAsync(String UPLOAD_ID, final ApiCallback<UploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelDirectUploadValidateBeforeCall(UPLOAD_ID, _callback);
        Type localVarReturnType = new TypeToken<UploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDirectUpload
     * @param createUploadRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDirectUploadCall(CreateUploadRequest createUploadRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createUploadRequest;

        // create path and map variables
        String localVarPath = "/video/v1/uploads";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDirectUploadValidateBeforeCall(CreateUploadRequest createUploadRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createUploadRequest' is set
        if (createUploadRequest == null) {
            throw new ApiException("Missing the required parameter 'createUploadRequest' when calling createDirectUpload(Async)");
        }
        

        okhttp3.Call localVarCall = createDirectUploadCall(createUploadRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a new direct upload URL
     * 
     * @param createUploadRequest  (required)
     * @return UploadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public UploadResponse createDirectUpload(CreateUploadRequest createUploadRequest) throws ApiException {
        ApiResponse<UploadResponse> localVarResp = createDirectUploadWithHttpInfo(createUploadRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new direct upload URL
     * 
     * @param createUploadRequest  (required)
     * @return ApiResponse&lt;UploadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadResponse> createDirectUploadWithHttpInfo(CreateUploadRequest createUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = createDirectUploadValidateBeforeCall(createUploadRequest, null);
        Type localVarReturnType = new TypeToken<UploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new direct upload URL (asynchronously)
     * 
     * @param createUploadRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDirectUploadAsync(CreateUploadRequest createUploadRequest, final ApiCallback<UploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDirectUploadValidateBeforeCall(createUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<UploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDirectUpload
     * @param UPLOAD_ID ID of the Upload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDirectUploadCall(String UPLOAD_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/uploads/{UPLOAD_ID}"
            .replaceAll("\\{" + "UPLOAD_ID" + "\\}", localVarApiClient.escapeString(UPLOAD_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDirectUploadValidateBeforeCall(String UPLOAD_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'UPLOAD_ID' is set
        if (UPLOAD_ID == null) {
            throw new ApiException("Missing the required parameter 'UPLOAD_ID' when calling getDirectUpload(Async)");
        }
        

        okhttp3.Call localVarCall = getDirectUploadCall(UPLOAD_ID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a single direct upload&#39;s info
     * 
     * @param UPLOAD_ID ID of the Upload (required)
     * @return UploadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UploadResponse getDirectUpload(String UPLOAD_ID) throws ApiException {
        ApiResponse<UploadResponse> localVarResp = getDirectUploadWithHttpInfo(UPLOAD_ID);
        return localVarResp.getData();
    }

    /**
     * Retrieve a single direct upload&#39;s info
     * 
     * @param UPLOAD_ID ID of the Upload (required)
     * @return ApiResponse&lt;UploadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadResponse> getDirectUploadWithHttpInfo(String UPLOAD_ID) throws ApiException {
        okhttp3.Call localVarCall = getDirectUploadValidateBeforeCall(UPLOAD_ID, null);
        Type localVarReturnType = new TypeToken<UploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a single direct upload&#39;s info (asynchronously)
     * 
     * @param UPLOAD_ID ID of the Upload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDirectUploadAsync(String UPLOAD_ID, final ApiCallback<UploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDirectUploadValidateBeforeCall(UPLOAD_ID, _callback);
        Type localVarReturnType = new TypeToken<UploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDirectUploads
     * @param limit Number of items to include in the response (optional, default to 25)
     * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDirectUploadsCall(Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/uploads";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDirectUploadsValidateBeforeCall(Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listDirectUploadsCall(limit, page, _callback);
        return localVarCall;

    }

    /**
     * List direct uploads
     * 
     * @param limit Number of items to include in the response (optional, default to 25)
     * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
     * @return ListUploadsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListUploadsResponse listDirectUploads(Integer limit, Integer page) throws ApiException {
        ApiResponse<ListUploadsResponse> localVarResp = listDirectUploadsWithHttpInfo(limit, page);
        return localVarResp.getData();
    }

    /**
     * List direct uploads
     * 
     * @param limit Number of items to include in the response (optional, default to 25)
     * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
     * @return ApiResponse&lt;ListUploadsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListUploadsResponse> listDirectUploadsWithHttpInfo(Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listDirectUploadsValidateBeforeCall(limit, page, null);
        Type localVarReturnType = new TypeToken<ListUploadsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List direct uploads (asynchronously)
     * 
     * @param limit Number of items to include in the response (optional, default to 25)
     * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDirectUploadsAsync(Integer limit, Integer page, final ApiCallback<ListUploadsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDirectUploadsValidateBeforeCall(limit, page, _callback);
        Type localVarReturnType = new TypeToken<ListUploadsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
