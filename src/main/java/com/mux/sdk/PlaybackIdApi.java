/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mux.sdk;

import com.mux.ApiCallback;
import com.mux.ApiClient;
import com.mux.ApiException;
import com.mux.ApiResponse;
import com.mux.Configuration;
import com.mux.Pair;
import com.mux.ProgressRequestBody;
import com.mux.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mux.sdk.models.GetAssetOrLiveStreamIdResponse;

import java.lang.reflect.Type;

public class PlaybackIdApi {
    private ApiClient localVarApiClient;

    public PlaybackIdApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlaybackIdApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getAssetOrLivestreamId
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetOrLivestreamIdCall(String PLAYBACK_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/playback-ids/{PLAYBACK_ID}"
            .replaceAll("\\{" + "PLAYBACK_ID" + "\\}", localVarApiClient.escapeString(PLAYBACK_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetOrLivestreamIdValidateBeforeCall(String PLAYBACK_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'PLAYBACK_ID' is set
        if (PLAYBACK_ID == null) {
            throw new ApiException("Missing the required parameter 'PLAYBACK_ID' when calling getAssetOrLivestreamId(Async)");
        }
        

        okhttp3.Call localVarCall = getAssetOrLivestreamIdCall(PLAYBACK_ID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an Asset or Live Stream ID
     * Retrieves the Identifier of the Asset or Live Stream associated with the Playback ID. 
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @return GetAssetOrLiveStreamIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAssetOrLiveStreamIdResponse getAssetOrLivestreamId(String PLAYBACK_ID) throws ApiException {
        ApiResponse<GetAssetOrLiveStreamIdResponse> localVarResp = getAssetOrLivestreamIdWithHttpInfo(PLAYBACK_ID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Asset or Live Stream ID
     * Retrieves the Identifier of the Asset or Live Stream associated with the Playback ID. 
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @return ApiResponse&lt;GetAssetOrLiveStreamIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAssetOrLiveStreamIdResponse> getAssetOrLivestreamIdWithHttpInfo(String PLAYBACK_ID) throws ApiException {
        okhttp3.Call localVarCall = getAssetOrLivestreamIdValidateBeforeCall(PLAYBACK_ID, null);
        Type localVarReturnType = new TypeToken<GetAssetOrLiveStreamIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Asset or Live Stream ID (asynchronously)
     * Retrieves the Identifier of the Asset or Live Stream associated with the Playback ID. 
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetOrLivestreamIdAsync(String PLAYBACK_ID, final ApiCallback<GetAssetOrLiveStreamIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetOrLivestreamIdValidateBeforeCall(PLAYBACK_ID, _callback);
        Type localVarReturnType = new TypeToken<GetAssetOrLiveStreamIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
