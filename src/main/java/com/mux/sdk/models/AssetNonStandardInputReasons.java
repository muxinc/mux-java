/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mux.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * An object containing one or more reasons the input file is non-standard. See [the guide on minimizing processing time](https://docs.mux.com/guides/video/minimize-processing-time) for more information on what a standard input is defined as. This object only exists on on-demand assets that have non-standard inputs, so if missing you can assume the input qualifies as standard.
 */
@ApiModel(description = "An object containing one or more reasons the input file is non-standard. See [the guide on minimizing processing time](https://docs.mux.com/guides/video/minimize-processing-time) for more information on what a standard input is defined as. This object only exists on on-demand assets that have non-standard inputs, so if missing you can assume the input qualifies as standard.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-19T15:36:24.532302-04:00[America/New_York]")
public class AssetNonStandardInputReasons {
  public static final String SERIALIZED_NAME_VIDEO_CODEC = "video_codec";
  @SerializedName(SERIALIZED_NAME_VIDEO_CODEC)
  private String videoCodec;

  public static final String SERIALIZED_NAME_AUDIO_CODEC = "audio_codec";
  @SerializedName(SERIALIZED_NAME_AUDIO_CODEC)
  private String audioCodec;

  /**
   * The video key frame Interval (also called as Group of Picture or GOP) of the input file is &#x60;high&#x60;. This parameter is present when the gop is greater than 10 seconds.
   */
  @JsonAdapter(VideoGopSizeEnum.Adapter.class)
  public enum VideoGopSizeEnum {
    HIGH("high");

    private String value;

    VideoGopSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VideoGopSizeEnum fromValue(String value) {
      for (VideoGopSizeEnum b : VideoGopSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VideoGopSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VideoGopSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VideoGopSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VideoGopSizeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VIDEO_GOP_SIZE = "video_gop_size";
  @SerializedName(SERIALIZED_NAME_VIDEO_GOP_SIZE)
  private VideoGopSizeEnum videoGopSize;

  public static final String SERIALIZED_NAME_VIDEO_FRAME_RATE = "video_frame_rate";
  @SerializedName(SERIALIZED_NAME_VIDEO_FRAME_RATE)
  private String videoFrameRate;

  public static final String SERIALIZED_NAME_VIDEO_RESOLUTION = "video_resolution";
  @SerializedName(SERIALIZED_NAME_VIDEO_RESOLUTION)
  private String videoResolution;

  public static final String SERIALIZED_NAME_PIXEL_ASPECT_RATIO = "pixel_aspect_ratio";
  @SerializedName(SERIALIZED_NAME_PIXEL_ASPECT_RATIO)
  private String pixelAspectRatio;

  /**
   * Video Edit List reason indicates that the input file&#39;s video track contains a complex Edit Decision List.
   */
  @JsonAdapter(VideoEditListEnum.Adapter.class)
  public enum VideoEditListEnum {
    NON_STANDARD("non-standard");

    private String value;

    VideoEditListEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VideoEditListEnum fromValue(String value) {
      for (VideoEditListEnum b : VideoEditListEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VideoEditListEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VideoEditListEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VideoEditListEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VideoEditListEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VIDEO_EDIT_LIST = "video_edit_list";
  @SerializedName(SERIALIZED_NAME_VIDEO_EDIT_LIST)
  private VideoEditListEnum videoEditList;

  /**
   * Audio Edit List reason indicates that the input file&#39;s audio track contains a complex Edit Decision List.
   */
  @JsonAdapter(AudioEditListEnum.Adapter.class)
  public enum AudioEditListEnum {
    NON_STANDARD("non-standard");

    private String value;

    AudioEditListEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AudioEditListEnum fromValue(String value) {
      for (AudioEditListEnum b : AudioEditListEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AudioEditListEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AudioEditListEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AudioEditListEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AudioEditListEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUDIO_EDIT_LIST = "audio_edit_list";
  @SerializedName(SERIALIZED_NAME_AUDIO_EDIT_LIST)
  private AudioEditListEnum audioEditList;

  /**
   * A catch-all reason when the input file in created with non-standard encoding parameters.
   */
  @JsonAdapter(UnexpectedMediaFileParametersEnum.Adapter.class)
  public enum UnexpectedMediaFileParametersEnum {
    NON_STANDARD("non-standard");

    private String value;

    UnexpectedMediaFileParametersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnexpectedMediaFileParametersEnum fromValue(String value) {
      for (UnexpectedMediaFileParametersEnum b : UnexpectedMediaFileParametersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnexpectedMediaFileParametersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnexpectedMediaFileParametersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnexpectedMediaFileParametersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnexpectedMediaFileParametersEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UNEXPECTED_MEDIA_FILE_PARAMETERS = "unexpected_media_file_parameters";
  @SerializedName(SERIALIZED_NAME_UNEXPECTED_MEDIA_FILE_PARAMETERS)
  private UnexpectedMediaFileParametersEnum unexpectedMediaFileParameters;


  public AssetNonStandardInputReasons videoCodec(String videoCodec) {
    
    this.videoCodec = videoCodec;
    return this;
  }

   /**
   * The video codec used on the input file. For example, the input file encoded with &#x60;hevc&#x60; video codec is non-standard and the value of this parameter is &#x60;hevc&#x60;.
   * @return videoCodec
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The video codec used on the input file. For example, the input file encoded with `hevc` video codec is non-standard and the value of this parameter is `hevc`.")

  public String getVideoCodec() {
    return videoCodec;
  }


  public void setVideoCodec(String videoCodec) {
    this.videoCodec = videoCodec;
  }


  public AssetNonStandardInputReasons audioCodec(String audioCodec) {
    
    this.audioCodec = audioCodec;
    return this;
  }

   /**
   * The audio codec used on the input file. Non-AAC audio codecs are non-standard.
   * @return audioCodec
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The audio codec used on the input file. Non-AAC audio codecs are non-standard.")

  public String getAudioCodec() {
    return audioCodec;
  }


  public void setAudioCodec(String audioCodec) {
    this.audioCodec = audioCodec;
  }


  public AssetNonStandardInputReasons videoGopSize(VideoGopSizeEnum videoGopSize) {
    
    this.videoGopSize = videoGopSize;
    return this;
  }

   /**
   * The video key frame Interval (also called as Group of Picture or GOP) of the input file is &#x60;high&#x60;. This parameter is present when the gop is greater than 10 seconds.
   * @return videoGopSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The video key frame Interval (also called as Group of Picture or GOP) of the input file is `high`. This parameter is present when the gop is greater than 10 seconds.")

  public VideoGopSizeEnum getVideoGopSize() {
    return videoGopSize;
  }


  public void setVideoGopSize(VideoGopSizeEnum videoGopSize) {
    this.videoGopSize = videoGopSize;
  }


  public AssetNonStandardInputReasons videoFrameRate(String videoFrameRate) {
    
    this.videoFrameRate = videoFrameRate;
    return this;
  }

   /**
   * The video frame rate of the input file. Video with average frames per second (fps) less than 10 or greater than 120 is non-standard. A &#x60;-1&#x60; frame rate value indicates Mux could not determine the frame rate of the video track.
   * @return videoFrameRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The video frame rate of the input file. Video with average frames per second (fps) less than 10 or greater than 120 is non-standard. A `-1` frame rate value indicates Mux could not determine the frame rate of the video track.")

  public String getVideoFrameRate() {
    return videoFrameRate;
  }


  public void setVideoFrameRate(String videoFrameRate) {
    this.videoFrameRate = videoFrameRate;
  }


  public AssetNonStandardInputReasons videoResolution(String videoResolution) {
    
    this.videoResolution = videoResolution;
    return this;
  }

   /**
   * The video resolution of the input file. Video resolution higher than 2048 pixels on any one dimension (height or width) is considered non-standard, The resolution value is presented as &#x60;width&#x60; x &#x60;height&#x60; in pixels.
   * @return videoResolution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The video resolution of the input file. Video resolution higher than 2048 pixels on any one dimension (height or width) is considered non-standard, The resolution value is presented as `width` x `height` in pixels.")

  public String getVideoResolution() {
    return videoResolution;
  }


  public void setVideoResolution(String videoResolution) {
    this.videoResolution = videoResolution;
  }


  public AssetNonStandardInputReasons pixelAspectRatio(String pixelAspectRatio) {
    
    this.pixelAspectRatio = pixelAspectRatio;
    return this;
  }

   /**
   * The video pixel aspect ratio of the input file.
   * @return pixelAspectRatio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The video pixel aspect ratio of the input file.")

  public String getPixelAspectRatio() {
    return pixelAspectRatio;
  }


  public void setPixelAspectRatio(String pixelAspectRatio) {
    this.pixelAspectRatio = pixelAspectRatio;
  }


  public AssetNonStandardInputReasons videoEditList(VideoEditListEnum videoEditList) {
    
    this.videoEditList = videoEditList;
    return this;
  }

   /**
   * Video Edit List reason indicates that the input file&#39;s video track contains a complex Edit Decision List.
   * @return videoEditList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Video Edit List reason indicates that the input file's video track contains a complex Edit Decision List.")

  public VideoEditListEnum getVideoEditList() {
    return videoEditList;
  }


  public void setVideoEditList(VideoEditListEnum videoEditList) {
    this.videoEditList = videoEditList;
  }


  public AssetNonStandardInputReasons audioEditList(AudioEditListEnum audioEditList) {
    
    this.audioEditList = audioEditList;
    return this;
  }

   /**
   * Audio Edit List reason indicates that the input file&#39;s audio track contains a complex Edit Decision List.
   * @return audioEditList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Audio Edit List reason indicates that the input file's audio track contains a complex Edit Decision List.")

  public AudioEditListEnum getAudioEditList() {
    return audioEditList;
  }


  public void setAudioEditList(AudioEditListEnum audioEditList) {
    this.audioEditList = audioEditList;
  }


  public AssetNonStandardInputReasons unexpectedMediaFileParameters(UnexpectedMediaFileParametersEnum unexpectedMediaFileParameters) {
    
    this.unexpectedMediaFileParameters = unexpectedMediaFileParameters;
    return this;
  }

   /**
   * A catch-all reason when the input file in created with non-standard encoding parameters.
   * @return unexpectedMediaFileParameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A catch-all reason when the input file in created with non-standard encoding parameters.")

  public UnexpectedMediaFileParametersEnum getUnexpectedMediaFileParameters() {
    return unexpectedMediaFileParameters;
  }


  public void setUnexpectedMediaFileParameters(UnexpectedMediaFileParametersEnum unexpectedMediaFileParameters) {
    this.unexpectedMediaFileParameters = unexpectedMediaFileParameters;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetNonStandardInputReasons assetNonStandardInputReasons = (AssetNonStandardInputReasons) o;
    return Objects.equals(this.videoCodec, assetNonStandardInputReasons.videoCodec) &&
        Objects.equals(this.audioCodec, assetNonStandardInputReasons.audioCodec) &&
        Objects.equals(this.videoGopSize, assetNonStandardInputReasons.videoGopSize) &&
        Objects.equals(this.videoFrameRate, assetNonStandardInputReasons.videoFrameRate) &&
        Objects.equals(this.videoResolution, assetNonStandardInputReasons.videoResolution) &&
        Objects.equals(this.pixelAspectRatio, assetNonStandardInputReasons.pixelAspectRatio) &&
        Objects.equals(this.videoEditList, assetNonStandardInputReasons.videoEditList) &&
        Objects.equals(this.audioEditList, assetNonStandardInputReasons.audioEditList) &&
        Objects.equals(this.unexpectedMediaFileParameters, assetNonStandardInputReasons.unexpectedMediaFileParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(videoCodec, audioCodec, videoGopSize, videoFrameRate, videoResolution, pixelAspectRatio, videoEditList, audioEditList, unexpectedMediaFileParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetNonStandardInputReasons {\n");
    sb.append("    videoCodec: ").append(toIndentedString(videoCodec)).append("\n");
    sb.append("    audioCodec: ").append(toIndentedString(audioCodec)).append("\n");
    sb.append("    videoGopSize: ").append(toIndentedString(videoGopSize)).append("\n");
    sb.append("    videoFrameRate: ").append(toIndentedString(videoFrameRate)).append("\n");
    sb.append("    videoResolution: ").append(toIndentedString(videoResolution)).append("\n");
    sb.append("    pixelAspectRatio: ").append(toIndentedString(pixelAspectRatio)).append("\n");
    sb.append("    videoEditList: ").append(toIndentedString(videoEditList)).append("\n");
    sb.append("    audioEditList: ").append(toIndentedString(audioEditList)).append("\n");
    sb.append("    unexpectedMediaFileParameters: ").append(toIndentedString(unexpectedMediaFileParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

