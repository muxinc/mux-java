/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mux.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mux.sdk.models.CreateAssetRequest;
import com.mux.sdk.models.CreateSimulcastTargetRequest;
import com.mux.sdk.models.PlaybackPolicy;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CreateLiveStreamRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-05-19T15:36:24.532302-04:00[America/New_York]")
public class CreateLiveStreamRequest {
  public static final String SERIALIZED_NAME_PLAYBACK_POLICY = "playback_policy";
  @SerializedName(SERIALIZED_NAME_PLAYBACK_POLICY)
  private java.util.List<PlaybackPolicy> playbackPolicy = null;

  public static final String SERIALIZED_NAME_NEW_ASSET_SETTINGS = "new_asset_settings";
  @SerializedName(SERIALIZED_NAME_NEW_ASSET_SETTINGS)
  private CreateAssetRequest newAssetSettings;

  public static final String SERIALIZED_NAME_RECONNECT_WINDOW = "reconnect_window";
  @SerializedName(SERIALIZED_NAME_RECONNECT_WINDOW)
  private Float reconnectWindow;

  public static final String SERIALIZED_NAME_PASSTHROUGH = "passthrough";
  @SerializedName(SERIALIZED_NAME_PASSTHROUGH)
  private String passthrough;

  public static final String SERIALIZED_NAME_REDUCED_LATENCY = "reduced_latency";
  @SerializedName(SERIALIZED_NAME_REDUCED_LATENCY)
  private Boolean reducedLatency;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private Boolean test;

  public static final String SERIALIZED_NAME_SIMULCAST_TARGETS = "simulcast_targets";
  @SerializedName(SERIALIZED_NAME_SIMULCAST_TARGETS)
  private java.util.List<CreateSimulcastTargetRequest> simulcastTargets = null;


  public CreateLiveStreamRequest playbackPolicy(java.util.List<PlaybackPolicy> playbackPolicy) {
    
    this.playbackPolicy = playbackPolicy;
    return this;
  }

  public CreateLiveStreamRequest addPlaybackPolicyItem(PlaybackPolicy playbackPolicyItem) {
    if (this.playbackPolicy == null) {
      this.playbackPolicy = new java.util.ArrayList<>();
    }
    this.playbackPolicy.add(playbackPolicyItem);
    return this;
  }

   /**
   * Get playbackPolicy
   * @return playbackPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public java.util.List<PlaybackPolicy> getPlaybackPolicy() {
    return playbackPolicy;
  }


  public void setPlaybackPolicy(java.util.List<PlaybackPolicy> playbackPolicy) {
    this.playbackPolicy = playbackPolicy;
  }


  public CreateLiveStreamRequest newAssetSettings(CreateAssetRequest newAssetSettings) {
    
    this.newAssetSettings = newAssetSettings;
    return this;
  }

   /**
   * Get newAssetSettings
   * @return newAssetSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CreateAssetRequest getNewAssetSettings() {
    return newAssetSettings;
  }


  public void setNewAssetSettings(CreateAssetRequest newAssetSettings) {
    this.newAssetSettings = newAssetSettings;
  }


  public CreateLiveStreamRequest reconnectWindow(Float reconnectWindow) {
    
    this.reconnectWindow = reconnectWindow;
    return this;
  }

   /**
   * When live streaming software disconnects from Mux, either intentionally or due to a drop in the network, the Reconnect Window is the time in seconds that Mux should wait for the streaming software to reconnect before considering the live stream finished and completing the recorded asset. Defaults to 60 seconds on the API if not specified.
   * minimum: 0.1
   * maximum: 300
   * @return reconnectWindow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When live streaming software disconnects from Mux, either intentionally or due to a drop in the network, the Reconnect Window is the time in seconds that Mux should wait for the streaming software to reconnect before considering the live stream finished and completing the recorded asset. Defaults to 60 seconds on the API if not specified.")

  public Float getReconnectWindow() {
    return reconnectWindow;
  }


  public void setReconnectWindow(Float reconnectWindow) {
    this.reconnectWindow = reconnectWindow;
  }


  public CreateLiveStreamRequest passthrough(String passthrough) {
    
    this.passthrough = passthrough;
    return this;
  }

   /**
   * Get passthrough
   * @return passthrough
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPassthrough() {
    return passthrough;
  }


  public void setPassthrough(String passthrough) {
    this.passthrough = passthrough;
  }


  public CreateLiveStreamRequest reducedLatency(Boolean reducedLatency) {
    
    this.reducedLatency = reducedLatency;
    return this;
  }

   /**
   * Latency is the time from when the streamer does something in real life to when you see it happen in the player. Set this if you want lower latency for your live stream. Note: Reconnect windows are incompatible with Reduced Latency and will always be set to zero (0) seconds. Read more here: https://mux.com/blog/reduced-latency-for-mux-live-streaming-now-available/
   * @return reducedLatency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Latency is the time from when the streamer does something in real life to when you see it happen in the player. Set this if you want lower latency for your live stream. Note: Reconnect windows are incompatible with Reduced Latency and will always be set to zero (0) seconds. Read more here: https://mux.com/blog/reduced-latency-for-mux-live-streaming-now-available/")

  public Boolean getReducedLatency() {
    return reducedLatency;
  }


  public void setReducedLatency(Boolean reducedLatency) {
    this.reducedLatency = reducedLatency;
  }


  public CreateLiveStreamRequest test(Boolean test) {
    
    this.test = test;
    return this;
  }

   /**
   * Marks the live stream as a test live stream when the value is set to true. A test live stream can help evaluate the Mux Video APIs without incurring any cost. There is no limit on number of test live streams created. Test live streams are watermarked with the Mux logo and limited to 5 minutes. The test live stream is disabled after the stream is active for 5 mins and the recorded asset also deleted after 24 hours.
   * @return test
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Marks the live stream as a test live stream when the value is set to true. A test live stream can help evaluate the Mux Video APIs without incurring any cost. There is no limit on number of test live streams created. Test live streams are watermarked with the Mux logo and limited to 5 minutes. The test live stream is disabled after the stream is active for 5 mins and the recorded asset also deleted after 24 hours.")

  public Boolean getTest() {
    return test;
  }


  public void setTest(Boolean test) {
    this.test = test;
  }


  public CreateLiveStreamRequest simulcastTargets(java.util.List<CreateSimulcastTargetRequest> simulcastTargets) {
    
    this.simulcastTargets = simulcastTargets;
    return this;
  }

  public CreateLiveStreamRequest addSimulcastTargetsItem(CreateSimulcastTargetRequest simulcastTargetsItem) {
    if (this.simulcastTargets == null) {
      this.simulcastTargets = new java.util.ArrayList<>();
    }
    this.simulcastTargets.add(simulcastTargetsItem);
    return this;
  }

   /**
   * Get simulcastTargets
   * @return simulcastTargets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public java.util.List<CreateSimulcastTargetRequest> getSimulcastTargets() {
    return simulcastTargets;
  }


  public void setSimulcastTargets(java.util.List<CreateSimulcastTargetRequest> simulcastTargets) {
    this.simulcastTargets = simulcastTargets;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateLiveStreamRequest createLiveStreamRequest = (CreateLiveStreamRequest) o;
    return Objects.equals(this.playbackPolicy, createLiveStreamRequest.playbackPolicy) &&
        Objects.equals(this.newAssetSettings, createLiveStreamRequest.newAssetSettings) &&
        Objects.equals(this.reconnectWindow, createLiveStreamRequest.reconnectWindow) &&
        Objects.equals(this.passthrough, createLiveStreamRequest.passthrough) &&
        Objects.equals(this.reducedLatency, createLiveStreamRequest.reducedLatency) &&
        Objects.equals(this.test, createLiveStreamRequest.test) &&
        Objects.equals(this.simulcastTargets, createLiveStreamRequest.simulcastTargets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(playbackPolicy, newAssetSettings, reconnectWindow, passthrough, reducedLatency, test, simulcastTargets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateLiveStreamRequest {\n");
    sb.append("    playbackPolicy: ").append(toIndentedString(playbackPolicy)).append("\n");
    sb.append("    newAssetSettings: ").append(toIndentedString(newAssetSettings)).append("\n");
    sb.append("    reconnectWindow: ").append(toIndentedString(reconnectWindow)).append("\n");
    sb.append("    passthrough: ").append(toIndentedString(passthrough)).append("\n");
    sb.append("    reducedLatency: ").append(toIndentedString(reducedLatency)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    simulcastTargets: ").append(toIndentedString(simulcastTargets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

