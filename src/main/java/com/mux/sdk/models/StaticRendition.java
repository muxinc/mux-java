/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mux.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * StaticRendition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class StaticRendition {
  /**
   * Name of the static rendition file
   */
  @JsonAdapter(NameEnum.Adapter.class)
  public enum NameEnum {
    LOW_MP4("low.mp4"),
    
    MEDIUM_MP4("medium.mp4"),
    
    HIGH_MP4("high.mp4"),
    
    HIGHEST_MP4("highest.mp4"),
    
    AUDIO_M4A("audio.m4a"),
    
    CAPPED_1080P_MP4("capped-1080p.mp4"),
    
    _2160P_MP4("2160p.mp4"),
    
    _1440P_MP4("1440p.mp4"),
    
    _1080P_MP4("1080p.mp4"),
    
    _720P_MP4("720p.mp4"),
    
    _540P_MP4("540p.mp4"),
    
    _480P_MP4("480p.mp4"),
    
    _360P_MP4("360p.mp4"),
    
    _270P_MP4("270p.mp4");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameEnum fromValue(String value) {
      for (NameEnum b : NameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private NameEnum name;

  /**
   * Extension of the static rendition file
   */
  @JsonAdapter(ExtEnum.Adapter.class)
  public enum ExtEnum {
    MP4("mp4"),
    
    M4A("m4a");

    private String value;

    ExtEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExtEnum fromValue(String value) {
      for (ExtEnum b : ExtEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExtEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExtEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExtEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExtEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EXT = "ext";
  @SerializedName(SERIALIZED_NAME_EXT)
  private ExtEnum ext;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public static final String SERIALIZED_NAME_BITRATE = "bitrate";
  @SerializedName(SERIALIZED_NAME_BITRATE)
  private Long bitrate;

  public static final String SERIALIZED_NAME_FILESIZE = "filesize";
  @SerializedName(SERIALIZED_NAME_FILESIZE)
  private String filesize;

  /**
   * Indicates the static rendition type of this specific MP4 version of this asset. This field is only valid for &#x60;static_renditions&#x60;, not for &#x60;mp4_support&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    STANDARD("standard"),
    
    ADVANCED("advanced");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * Indicates the status of this specific MP4 version of this asset. This field is only valid for &#x60;static_renditions&#x60;, not for &#x60;mp4_support&#x60;. * &#x60;ready&#x60; indicates the MP4 has been generated and is ready for download * &#x60;preparing&#x60; indicates the asset has not been ingested or the static rendition is still being generated after an asset is ready * &#x60;skipped&#x60; indicates the static rendition will not be generated because the requested resolution conflicts with the asset attributes after the asset has been ingested * &#x60;errored&#x60; indicates the static rendition cannot be generated. For example, an asset could not be ingested 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    READY("ready"),
    
    PREPARING("preparing"),
    
    SKIPPED("skipped"),
    
    ERRORED("errored");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Indicates the resolution tier of this specific MP4 version of this asset. This field is only valid for &#x60;static_renditions&#x60;, not for &#x60;mp4_support&#x60;.
   */
  @JsonAdapter(ResolutionTierEnum.Adapter.class)
  public enum ResolutionTierEnum {
    _2160P("2160p"),
    
    _1440P("1440p"),
    
    _1080P("1080p"),
    
    _720P("720p");

    private String value;

    ResolutionTierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResolutionTierEnum fromValue(String value) {
      for (ResolutionTierEnum b : ResolutionTierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResolutionTierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResolutionTierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResolutionTierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResolutionTierEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RESOLUTION_TIER = "resolution_tier";
  @SerializedName(SERIALIZED_NAME_RESOLUTION_TIER)
  private ResolutionTierEnum resolutionTier;

  /**
   * Indicates the resolution of this specific MP4 version of this asset. This field is only valid for &#x60;static_renditions&#x60;, not for &#x60;mp4_support&#x60;.
   */
  @JsonAdapter(ResolutionEnum.Adapter.class)
  public enum ResolutionEnum {
    HIGHEST("highest"),
    
    AUDIO_ONLY("audio-only"),
    
    _2160P("2160p"),
    
    _1440P("1440p"),
    
    _1080P("1080p"),
    
    _720P("720p"),
    
    _540P("540p"),
    
    _480P("480p"),
    
    _360P("360p"),
    
    _270P("270p");

    private String value;

    ResolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResolutionEnum fromValue(String value) {
      for (ResolutionEnum b : ResolutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResolutionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private ResolutionEnum resolution;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;


  public StaticRendition name(NameEnum name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the static rendition file
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the static rendition file")

  public NameEnum getName() {
    return name;
  }


  public void setName(NameEnum name) {
    this.name = name;
  }


  public StaticRendition ext(ExtEnum ext) {
    
    this.ext = ext;
    return this;
  }

   /**
   * Extension of the static rendition file
   * @return ext
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extension of the static rendition file")

  public ExtEnum getExt() {
    return ext;
  }


  public void setExt(ExtEnum ext) {
    this.ext = ext;
  }


  public StaticRendition height(Integer height) {
    
    this.height = height;
    return this;
  }

   /**
   * The height of the static rendition&#39;s file in pixels
   * @return height
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The height of the static rendition's file in pixels")

  public Integer getHeight() {
    return height;
  }


  public void setHeight(Integer height) {
    this.height = height;
  }


  public StaticRendition width(Integer width) {
    
    this.width = width;
    return this;
  }

   /**
   * The width of the static rendition&#39;s file in pixels
   * @return width
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The width of the static rendition's file in pixels")

  public Integer getWidth() {
    return width;
  }


  public void setWidth(Integer width) {
    this.width = width;
  }


  public StaticRendition bitrate(Long bitrate) {
    
    this.bitrate = bitrate;
    return this;
  }

   /**
   * The bitrate in bits per second
   * @return bitrate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The bitrate in bits per second")

  public Long getBitrate() {
    return bitrate;
  }


  public void setBitrate(Long bitrate) {
    this.bitrate = bitrate;
  }


  public StaticRendition filesize(String filesize) {
    
    this.filesize = filesize;
    return this;
  }

   /**
   * The file size in bytes
   * @return filesize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The file size in bytes")

  public String getFilesize() {
    return filesize;
  }


  public void setFilesize(String filesize) {
    this.filesize = filesize;
  }


  public StaticRendition type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Indicates the static rendition type of this specific MP4 version of this asset. This field is only valid for &#x60;static_renditions&#x60;, not for &#x60;mp4_support&#x60;.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates the static rendition type of this specific MP4 version of this asset. This field is only valid for `static_renditions`, not for `mp4_support`.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public StaticRendition status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Indicates the status of this specific MP4 version of this asset. This field is only valid for &#x60;static_renditions&#x60;, not for &#x60;mp4_support&#x60;. * &#x60;ready&#x60; indicates the MP4 has been generated and is ready for download * &#x60;preparing&#x60; indicates the asset has not been ingested or the static rendition is still being generated after an asset is ready * &#x60;skipped&#x60; indicates the static rendition will not be generated because the requested resolution conflicts with the asset attributes after the asset has been ingested * &#x60;errored&#x60; indicates the static rendition cannot be generated. For example, an asset could not be ingested 
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates the status of this specific MP4 version of this asset. This field is only valid for `static_renditions`, not for `mp4_support`. * `ready` indicates the MP4 has been generated and is ready for download * `preparing` indicates the asset has not been ingested or the static rendition is still being generated after an asset is ready * `skipped` indicates the static rendition will not be generated because the requested resolution conflicts with the asset attributes after the asset has been ingested * `errored` indicates the static rendition cannot be generated. For example, an asset could not be ingested ")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public StaticRendition resolutionTier(ResolutionTierEnum resolutionTier) {
    
    this.resolutionTier = resolutionTier;
    return this;
  }

   /**
   * Indicates the resolution tier of this specific MP4 version of this asset. This field is only valid for &#x60;static_renditions&#x60;, not for &#x60;mp4_support&#x60;.
   * @return resolutionTier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates the resolution tier of this specific MP4 version of this asset. This field is only valid for `static_renditions`, not for `mp4_support`.")

  public ResolutionTierEnum getResolutionTier() {
    return resolutionTier;
  }


  public void setResolutionTier(ResolutionTierEnum resolutionTier) {
    this.resolutionTier = resolutionTier;
  }


  public StaticRendition resolution(ResolutionEnum resolution) {
    
    this.resolution = resolution;
    return this;
  }

   /**
   * Indicates the resolution of this specific MP4 version of this asset. This field is only valid for &#x60;static_renditions&#x60;, not for &#x60;mp4_support&#x60;.
   * @return resolution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates the resolution of this specific MP4 version of this asset. This field is only valid for `static_renditions`, not for `mp4_support`.")

  public ResolutionEnum getResolution() {
    return resolution;
  }


  public void setResolution(ResolutionEnum resolution) {
    this.resolution = resolution;
  }


  public StaticRendition id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The ID of this static rendition, used in managing this static rendition. This field is only valid for &#x60;static_renditions&#x60;, not for &#x60;mp4_support&#x60;.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of this static rendition, used in managing this static rendition. This field is only valid for `static_renditions`, not for `mp4_support`.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StaticRendition staticRendition = (StaticRendition) o;
    return Objects.equals(this.name, staticRendition.name) &&
        Objects.equals(this.ext, staticRendition.ext) &&
        Objects.equals(this.height, staticRendition.height) &&
        Objects.equals(this.width, staticRendition.width) &&
        Objects.equals(this.bitrate, staticRendition.bitrate) &&
        Objects.equals(this.filesize, staticRendition.filesize) &&
        Objects.equals(this.type, staticRendition.type) &&
        Objects.equals(this.status, staticRendition.status) &&
        Objects.equals(this.resolutionTier, staticRendition.resolutionTier) &&
        Objects.equals(this.resolution, staticRendition.resolution) &&
        Objects.equals(this.id, staticRendition.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, ext, height, width, bitrate, filesize, type, status, resolutionTier, resolution, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StaticRendition {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ext: ").append(toIndentedString(ext)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("    filesize: ").append(toIndentedString(filesize)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    resolutionTier: ").append(toIndentedString(resolutionTier)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

