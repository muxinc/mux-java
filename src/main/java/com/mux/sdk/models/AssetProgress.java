/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mux.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Detailed state information about the asset ingest process.
 */
@ApiModel(description = "Detailed state information about the asset ingest process.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AssetProgress {
  /**
   * The detailed state of the asset ingest process. This field is useful for relaying more granular processing information to end users when a [non-standard input is encountered](https://www.mux.com/docs/guides/minimize-processing-time#non-standard-input).  - &#x60;ingesting&#x60;: Asset is being ingested (initial processing before or after transcoding). While in this state, the &#x60;progress&#x60; percentage will be 0. - &#x60;transcoding&#x60;: Asset is undergoing non-standard transcoding. - &#x60;completed&#x60;: Asset processing is complete (&#x60;status&#x60; is &#x60;ready&#x60;). While in this state, the &#x60;progress&#x60; percentage will be 100. - &#x60;live&#x60;: Asset is a live stream currently in progress. While in this state, the &#x60;progress&#x60; percentage will be -1. - &#x60;errored&#x60;: Asset has encountered an error (&#x60;status&#x60; is &#x60;errored&#x60;). While in this state, the &#x60;progress&#x60; percentage will be -1. 
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    INGESTING("ingesting"),
    
    TRANSCODING("transcoding"),
    
    COMPLETED("completed"),
    
    LIVE("live"),
    
    ERRORED("errored");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Double progress;


  public AssetProgress state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * The detailed state of the asset ingest process. This field is useful for relaying more granular processing information to end users when a [non-standard input is encountered](https://www.mux.com/docs/guides/minimize-processing-time#non-standard-input).  - &#x60;ingesting&#x60;: Asset is being ingested (initial processing before or after transcoding). While in this state, the &#x60;progress&#x60; percentage will be 0. - &#x60;transcoding&#x60;: Asset is undergoing non-standard transcoding. - &#x60;completed&#x60;: Asset processing is complete (&#x60;status&#x60; is &#x60;ready&#x60;). While in this state, the &#x60;progress&#x60; percentage will be 100. - &#x60;live&#x60;: Asset is a live stream currently in progress. While in this state, the &#x60;progress&#x60; percentage will be -1. - &#x60;errored&#x60;: Asset has encountered an error (&#x60;status&#x60; is &#x60;errored&#x60;). While in this state, the &#x60;progress&#x60; percentage will be -1. 
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The detailed state of the asset ingest process. This field is useful for relaying more granular processing information to end users when a [non-standard input is encountered](https://www.mux.com/docs/guides/minimize-processing-time#non-standard-input).  - `ingesting`: Asset is being ingested (initial processing before or after transcoding). While in this state, the `progress` percentage will be 0. - `transcoding`: Asset is undergoing non-standard transcoding. - `completed`: Asset processing is complete (`status` is `ready`). While in this state, the `progress` percentage will be 100. - `live`: Asset is a live stream currently in progress. While in this state, the `progress` percentage will be -1. - `errored`: Asset has encountered an error (`status` is `errored`). While in this state, the `progress` percentage will be -1. ")

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }


  public AssetProgress progress(Double progress) {
    
    this.progress = progress;
    return this;
  }

   /**
   * Represents the estimated completion percentage. Returns &#x60;0 - 100&#x60; when in &#x60;ingesting&#x60;, &#x60;transcoding&#x60;, or &#x60;completed&#x60; state, and &#x60;-1&#x60; when in &#x60;live&#x60; or &#x60;errored&#x60; state.
   * minimum: -1
   * maximum: 100
   * @return progress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Represents the estimated completion percentage. Returns `0 - 100` when in `ingesting`, `transcoding`, or `completed` state, and `-1` when in `live` or `errored` state.")

  public Double getProgress() {
    return progress;
  }


  public void setProgress(Double progress) {
    this.progress = progress;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetProgress assetProgress = (AssetProgress) o;
    return Objects.equals(this.state, assetProgress.state) &&
        Objects.equals(this.progress, assetProgress.progress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, progress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetProgress {\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

