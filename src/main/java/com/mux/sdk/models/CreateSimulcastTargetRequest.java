/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mux.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CreateSimulcastTargetRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-03-15T16:07:59.745206-04:00[America/New_York]")
public class CreateSimulcastTargetRequest {
  public static final String SERIALIZED_NAME_PASSTHROUGH = "passthrough";
  @SerializedName(SERIALIZED_NAME_PASSTHROUGH)
  private String passthrough;

  public static final String SERIALIZED_NAME_STREAM_KEY = "stream_key";
  @SerializedName(SERIALIZED_NAME_STREAM_KEY)
  private String streamKey;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;


  public CreateSimulcastTargetRequest passthrough(String passthrough) {
    
    this.passthrough = passthrough;
    return this;
  }

   /**
   * Arbitrary user-supplied metadata set by you when creating a simulcast target.
   * @return passthrough
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Arbitrary user-supplied metadata set by you when creating a simulcast target.")

  public String getPassthrough() {
    return passthrough;
  }


  public void setPassthrough(String passthrough) {
    this.passthrough = passthrough;
  }


  public CreateSimulcastTargetRequest streamKey(String streamKey) {
    
    this.streamKey = streamKey;
    return this;
  }

   /**
   * Stream Key represents a stream identifier on the third party live streaming service to send the parent live stream to.
   * @return streamKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Stream Key represents a stream identifier on the third party live streaming service to send the parent live stream to.")

  public String getStreamKey() {
    return streamKey;
  }


  public void setStreamKey(String streamKey) {
    this.streamKey = streamKey;
  }


  public CreateSimulcastTargetRequest url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * RTMP hostname including application name for the third party live streaming service. Example: &#39;rtmp://live.example.com/app&#39;.
   * @return url
  **/
  @ApiModelProperty(required = true, value = "RTMP hostname including application name for the third party live streaming service. Example: 'rtmp://live.example.com/app'.")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSimulcastTargetRequest createSimulcastTargetRequest = (CreateSimulcastTargetRequest) o;
    return Objects.equals(this.passthrough, createSimulcastTargetRequest.passthrough) &&
        Objects.equals(this.streamKey, createSimulcastTargetRequest.streamKey) &&
        Objects.equals(this.url, createSimulcastTargetRequest.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(passthrough, streamKey, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSimulcastTargetRequest {\n");
    sb.append("    passthrough: ").append(toIndentedString(passthrough)).append("\n");
    sb.append("    streamKey: ").append(toIndentedString(streamKey)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

