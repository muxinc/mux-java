/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mux.sdk;

import com.mux.ApiCallback;
import com.mux.ApiClient;
import com.mux.ApiException;
import com.mux.ApiResponse;
import com.mux.Configuration;
import com.mux.Pair;
import com.mux.ProgressRequestBody;
import com.mux.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mux.sdk.models.AssetResponse;
import com.mux.sdk.models.CreateAssetRequest;
import com.mux.sdk.models.CreatePlaybackIDRequest;
import com.mux.sdk.models.CreatePlaybackIDResponse;
import com.mux.sdk.models.CreateTrackRequest;
import com.mux.sdk.models.CreateTrackResponse;
import com.mux.sdk.models.GetAssetInputInfoResponse;
import com.mux.sdk.models.GetAssetPlaybackIDResponse;
import com.mux.sdk.models.ListAssetsResponse;
import com.mux.sdk.models.UpdateAssetMP4SupportRequest;
import com.mux.sdk.models.UpdateAssetMasterAccessRequest;
import com.mux.sdk.models.UpdateAssetRequest;
// TODO: due to import parsing issues for the RDR type; fix in spec in future
import com.mux.sdk.models.ReferrerDomainRestriction;

import java.lang.reflect.Type;

public class AssetsApi {
    private ApiClient localVarApiClient;

    public AssetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call createAssetCall(CreateAssetRequest createAssetRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createAssetRequest;

        // create path and map variables
        String localVarPath = "/video/v1/assets";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAssetValidateBeforeCall(CreateAssetRequest createAssetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createAssetRequest' is set
        if (createAssetRequest == null) {
            throw new ApiException("Missing the required parameter 'createAssetRequest' when calling createAsset(Async)");
        }
        

        okhttp3.Call localVarCall = createAssetCall(createAssetRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<AssetResponse> createAssetWithHttpInfo(CreateAssetRequest createAssetRequest) throws ApiException {
        okhttp3.Call localVarCall = createAssetValidateBeforeCall(createAssetRequest, null);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAssetAsync(CreateAssetRequest createAssetRequest, final ApiCallback<AssetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAssetValidateBeforeCall(createAssetRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateAssetRequest {
        private final CreateAssetRequest createAssetRequest;

        private APIcreateAssetRequest(CreateAssetRequest createAssetRequest) {
            this.createAssetRequest = createAssetRequest;
        }

        /**
         * Build call for createAsset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Asset Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createAssetCall(createAssetRequest, _callback);
        }

        /**
         * Execute createAsset request
         * @return AssetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Asset Created </td><td>  -  </td></tr>
         </table>
         */
        public AssetResponse execute() throws ApiException {
            ApiResponse<AssetResponse> localVarResp = createAssetWithHttpInfo(createAssetRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createAsset request with HTTP info returned
         * @return ApiResponse&lt;AssetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Asset Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetResponse> executeWithHttpInfo() throws ApiException {
            return createAssetWithHttpInfo(createAssetRequest);
        }

        /**
         * Execute createAsset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Asset Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetResponse> _callback) throws ApiException {
            return createAssetAsync(createAssetRequest, _callback);
        }
    }

    /**
     * Create an asset
     * Create a new Mux Video asset.
     * @param createAssetRequest  (required)
     * @return APIcreateAssetRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Asset Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateAssetRequest createAsset(CreateAssetRequest createAssetRequest) {
        return new APIcreateAssetRequest(createAssetRequest);
    }
    private okhttp3.Call createAssetPlaybackIdCall(String ASSET_ID, CreatePlaybackIDRequest createPlaybackIDRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createPlaybackIDRequest;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}/playback-ids"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAssetPlaybackIdValidateBeforeCall(String ASSET_ID, CreatePlaybackIDRequest createPlaybackIDRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling createAssetPlaybackId(Async)");
        }
        
        // verify the required parameter 'createPlaybackIDRequest' is set
        if (createPlaybackIDRequest == null) {
            throw new ApiException("Missing the required parameter 'createPlaybackIDRequest' when calling createAssetPlaybackId(Async)");
        }
        

        okhttp3.Call localVarCall = createAssetPlaybackIdCall(ASSET_ID, createPlaybackIDRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<CreatePlaybackIDResponse> createAssetPlaybackIdWithHttpInfo(String ASSET_ID, CreatePlaybackIDRequest createPlaybackIDRequest) throws ApiException {
        okhttp3.Call localVarCall = createAssetPlaybackIdValidateBeforeCall(ASSET_ID, createPlaybackIDRequest, null);
        Type localVarReturnType = new TypeToken<CreatePlaybackIDResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAssetPlaybackIdAsync(String ASSET_ID, CreatePlaybackIDRequest createPlaybackIDRequest, final ApiCallback<CreatePlaybackIDResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAssetPlaybackIdValidateBeforeCall(ASSET_ID, createPlaybackIDRequest, _callback);
        Type localVarReturnType = new TypeToken<CreatePlaybackIDResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateAssetPlaybackIdRequest {
        private final String ASSET_ID;
        private final CreatePlaybackIDRequest createPlaybackIDRequest;

        private APIcreateAssetPlaybackIdRequest(String ASSET_ID, CreatePlaybackIDRequest createPlaybackIDRequest) {
            this.ASSET_ID = ASSET_ID;
            this.createPlaybackIDRequest = createPlaybackIDRequest;
        }

        /**
         * Build call for createAssetPlaybackId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createAssetPlaybackIdCall(ASSET_ID, createPlaybackIDRequest, _callback);
        }

        /**
         * Execute createAssetPlaybackId request
         * @return CreatePlaybackIDResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public CreatePlaybackIDResponse execute() throws ApiException {
            ApiResponse<CreatePlaybackIDResponse> localVarResp = createAssetPlaybackIdWithHttpInfo(ASSET_ID, createPlaybackIDRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createAssetPlaybackId request with HTTP info returned
         * @return ApiResponse&lt;CreatePlaybackIDResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreatePlaybackIDResponse> executeWithHttpInfo() throws ApiException {
            return createAssetPlaybackIdWithHttpInfo(ASSET_ID, createPlaybackIDRequest);
        }

        /**
         * Execute createAssetPlaybackId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreatePlaybackIDResponse> _callback) throws ApiException {
            return createAssetPlaybackIdAsync(ASSET_ID, createPlaybackIDRequest, _callback);
        }
    }

    /**
     * Create a playback ID
     * Creates a playback ID that can be used to stream the asset to a viewer.
     * @param ASSET_ID The asset ID. (required)
     * @param createPlaybackIDRequest  (required)
     * @return APIcreateAssetPlaybackIdRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateAssetPlaybackIdRequest createAssetPlaybackId(String ASSET_ID, CreatePlaybackIDRequest createPlaybackIDRequest) {
        return new APIcreateAssetPlaybackIdRequest(ASSET_ID, createPlaybackIDRequest);
    }
    private okhttp3.Call createAssetTrackCall(String ASSET_ID, CreateTrackRequest createTrackRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createTrackRequest;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}/tracks"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAssetTrackValidateBeforeCall(String ASSET_ID, CreateTrackRequest createTrackRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling createAssetTrack(Async)");
        }
        
        // verify the required parameter 'createTrackRequest' is set
        if (createTrackRequest == null) {
            throw new ApiException("Missing the required parameter 'createTrackRequest' when calling createAssetTrack(Async)");
        }
        

        okhttp3.Call localVarCall = createAssetTrackCall(ASSET_ID, createTrackRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<CreateTrackResponse> createAssetTrackWithHttpInfo(String ASSET_ID, CreateTrackRequest createTrackRequest) throws ApiException {
        okhttp3.Call localVarCall = createAssetTrackValidateBeforeCall(ASSET_ID, createTrackRequest, null);
        Type localVarReturnType = new TypeToken<CreateTrackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAssetTrackAsync(String ASSET_ID, CreateTrackRequest createTrackRequest, final ApiCallback<CreateTrackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAssetTrackValidateBeforeCall(ASSET_ID, createTrackRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateTrackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateAssetTrackRequest {
        private final String ASSET_ID;
        private final CreateTrackRequest createTrackRequest;

        private APIcreateAssetTrackRequest(String ASSET_ID, CreateTrackRequest createTrackRequest) {
            this.ASSET_ID = ASSET_ID;
            this.createTrackRequest = createTrackRequest;
        }

        /**
         * Build call for createAssetTrack
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createAssetTrackCall(ASSET_ID, createTrackRequest, _callback);
        }

        /**
         * Execute createAssetTrack request
         * @return CreateTrackResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public CreateTrackResponse execute() throws ApiException {
            ApiResponse<CreateTrackResponse> localVarResp = createAssetTrackWithHttpInfo(ASSET_ID, createTrackRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createAssetTrack request with HTTP info returned
         * @return ApiResponse&lt;CreateTrackResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateTrackResponse> executeWithHttpInfo() throws ApiException {
            return createAssetTrackWithHttpInfo(ASSET_ID, createTrackRequest);
        }

        /**
         * Execute createAssetTrack request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateTrackResponse> _callback) throws ApiException {
            return createAssetTrackAsync(ASSET_ID, createTrackRequest, _callback);
        }
    }

    /**
     * Create an asset track
     * Adds an asset track (for example, subtitles, or an alternate audio track) to an asset.
     * @param ASSET_ID The asset ID. (required)
     * @param createTrackRequest  (required)
     * @return APIcreateAssetTrackRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateAssetTrackRequest createAssetTrack(String ASSET_ID, CreateTrackRequest createTrackRequest) {
        return new APIcreateAssetTrackRequest(ASSET_ID, createTrackRequest);
    }
    private okhttp3.Call deleteAssetCall(String ASSET_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAssetValidateBeforeCall(String ASSET_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling deleteAsset(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAssetCall(ASSET_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<Void> deleteAssetWithHttpInfo(String ASSET_ID) throws ApiException {
        okhttp3.Call localVarCall = deleteAssetValidateBeforeCall(ASSET_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAssetAsync(String ASSET_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAssetValidateBeforeCall(ASSET_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteAssetRequest {
        private final String ASSET_ID;

        private APIdeleteAssetRequest(String ASSET_ID) {
            this.ASSET_ID = ASSET_ID;
        }

        /**
         * Build call for deleteAsset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAssetCall(ASSET_ID, _callback);
        }

        /**
         * Execute deleteAsset request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAssetWithHttpInfo(ASSET_ID);
        }

        /**
         * Execute deleteAsset request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAssetWithHttpInfo(ASSET_ID);
        }

        /**
         * Execute deleteAsset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAssetAsync(ASSET_ID, _callback);
        }
    }

    /**
     * Delete an asset
     * Deletes a video asset and all its data.
     * @param ASSET_ID The asset ID. (required)
     * @return APIdeleteAssetRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAssetRequest deleteAsset(String ASSET_ID) {
        return new APIdeleteAssetRequest(ASSET_ID);
    }
    private okhttp3.Call deleteAssetPlaybackIdCall(String ASSET_ID, String PLAYBACK_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}/playback-ids/{PLAYBACK_ID}"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()))
            .replaceAll("\\{" + "PLAYBACK_ID" + "\\}", localVarApiClient.escapeString(PLAYBACK_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAssetPlaybackIdValidateBeforeCall(String ASSET_ID, String PLAYBACK_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling deleteAssetPlaybackId(Async)");
        }
        
        // verify the required parameter 'PLAYBACK_ID' is set
        if (PLAYBACK_ID == null) {
            throw new ApiException("Missing the required parameter 'PLAYBACK_ID' when calling deleteAssetPlaybackId(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAssetPlaybackIdCall(ASSET_ID, PLAYBACK_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<Void> deleteAssetPlaybackIdWithHttpInfo(String ASSET_ID, String PLAYBACK_ID) throws ApiException {
        okhttp3.Call localVarCall = deleteAssetPlaybackIdValidateBeforeCall(ASSET_ID, PLAYBACK_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAssetPlaybackIdAsync(String ASSET_ID, String PLAYBACK_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAssetPlaybackIdValidateBeforeCall(ASSET_ID, PLAYBACK_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteAssetPlaybackIdRequest {
        private final String ASSET_ID;
        private final String PLAYBACK_ID;

        private APIdeleteAssetPlaybackIdRequest(String ASSET_ID, String PLAYBACK_ID) {
            this.ASSET_ID = ASSET_ID;
            this.PLAYBACK_ID = PLAYBACK_ID;
        }

        /**
         * Build call for deleteAssetPlaybackId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAssetPlaybackIdCall(ASSET_ID, PLAYBACK_ID, _callback);
        }

        /**
         * Execute deleteAssetPlaybackId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAssetPlaybackIdWithHttpInfo(ASSET_ID, PLAYBACK_ID);
        }

        /**
         * Execute deleteAssetPlaybackId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAssetPlaybackIdWithHttpInfo(ASSET_ID, PLAYBACK_ID);
        }

        /**
         * Execute deleteAssetPlaybackId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAssetPlaybackIdAsync(ASSET_ID, PLAYBACK_ID, _callback);
        }
    }

    /**
     * Delete a playback ID
     * Deletes a playback ID, rendering it nonfunctional for viewing an asset&#39;s video content. Please note that deleting the playback ID removes access to the underlying asset; a viewer who started playback before the playback ID was deleted may be able to watch the entire video for a limited duration.
     * @param ASSET_ID The asset ID. (required)
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @return APIdeleteAssetPlaybackIdRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAssetPlaybackIdRequest deleteAssetPlaybackId(String ASSET_ID, String PLAYBACK_ID) {
        return new APIdeleteAssetPlaybackIdRequest(ASSET_ID, PLAYBACK_ID);
    }
    private okhttp3.Call deleteAssetTrackCall(String ASSET_ID, String TRACK_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}/tracks/{TRACK_ID}"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()))
            .replaceAll("\\{" + "TRACK_ID" + "\\}", localVarApiClient.escapeString(TRACK_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAssetTrackValidateBeforeCall(String ASSET_ID, String TRACK_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling deleteAssetTrack(Async)");
        }
        
        // verify the required parameter 'TRACK_ID' is set
        if (TRACK_ID == null) {
            throw new ApiException("Missing the required parameter 'TRACK_ID' when calling deleteAssetTrack(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAssetTrackCall(ASSET_ID, TRACK_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<Void> deleteAssetTrackWithHttpInfo(String ASSET_ID, String TRACK_ID) throws ApiException {
        okhttp3.Call localVarCall = deleteAssetTrackValidateBeforeCall(ASSET_ID, TRACK_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAssetTrackAsync(String ASSET_ID, String TRACK_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAssetTrackValidateBeforeCall(ASSET_ID, TRACK_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteAssetTrackRequest {
        private final String ASSET_ID;
        private final String TRACK_ID;

        private APIdeleteAssetTrackRequest(String ASSET_ID, String TRACK_ID) {
            this.ASSET_ID = ASSET_ID;
            this.TRACK_ID = TRACK_ID;
        }

        /**
         * Build call for deleteAssetTrack
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAssetTrackCall(ASSET_ID, TRACK_ID, _callback);
        }

        /**
         * Execute deleteAssetTrack request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAssetTrackWithHttpInfo(ASSET_ID, TRACK_ID);
        }

        /**
         * Execute deleteAssetTrack request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAssetTrackWithHttpInfo(ASSET_ID, TRACK_ID);
        }

        /**
         * Execute deleteAssetTrack request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAssetTrackAsync(ASSET_ID, TRACK_ID, _callback);
        }
    }

    /**
     * Delete an asset track
     * Removes a text track from an asset. Audio and video tracks on assets cannot be removed.
     * @param ASSET_ID The asset ID. (required)
     * @param TRACK_ID The track ID. (required)
     * @return APIdeleteAssetTrackRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAssetTrackRequest deleteAssetTrack(String ASSET_ID, String TRACK_ID) {
        return new APIdeleteAssetTrackRequest(ASSET_ID, TRACK_ID);
    }
    private okhttp3.Call getAssetCall(String ASSET_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetValidateBeforeCall(String ASSET_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling getAsset(Async)");
        }
        

        okhttp3.Call localVarCall = getAssetCall(ASSET_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<AssetResponse> getAssetWithHttpInfo(String ASSET_ID) throws ApiException {
        okhttp3.Call localVarCall = getAssetValidateBeforeCall(ASSET_ID, null);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssetAsync(String ASSET_ID, final ApiCallback<AssetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetValidateBeforeCall(ASSET_ID, _callback);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAssetRequest {
        private final String ASSET_ID;

        private APIgetAssetRequest(String ASSET_ID) {
            this.ASSET_ID = ASSET_ID;
        }

        /**
         * Build call for getAsset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssetCall(ASSET_ID, _callback);
        }

        /**
         * Execute getAsset request
         * @return AssetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AssetResponse execute() throws ApiException {
            ApiResponse<AssetResponse> localVarResp = getAssetWithHttpInfo(ASSET_ID);
            return localVarResp.getData();
        }

        /**
         * Execute getAsset request with HTTP info returned
         * @return ApiResponse&lt;AssetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetResponse> executeWithHttpInfo() throws ApiException {
            return getAssetWithHttpInfo(ASSET_ID);
        }

        /**
         * Execute getAsset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetResponse> _callback) throws ApiException {
            return getAssetAsync(ASSET_ID, _callback);
        }
    }

    /**
     * Retrieve an asset
     * Retrieves the details of an asset that has previously been created. Supply the unique asset ID that was returned from your previous request, and Mux will return the corresponding asset information. The same information is returned when creating an asset.
     * @param ASSET_ID The asset ID. (required)
     * @return APIgetAssetRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAssetRequest getAsset(String ASSET_ID) {
        return new APIgetAssetRequest(ASSET_ID);
    }
    private okhttp3.Call getAssetInputInfoCall(String ASSET_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}/input-info"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetInputInfoValidateBeforeCall(String ASSET_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling getAssetInputInfo(Async)");
        }
        

        okhttp3.Call localVarCall = getAssetInputInfoCall(ASSET_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<GetAssetInputInfoResponse> getAssetInputInfoWithHttpInfo(String ASSET_ID) throws ApiException {
        okhttp3.Call localVarCall = getAssetInputInfoValidateBeforeCall(ASSET_ID, null);
        Type localVarReturnType = new TypeToken<GetAssetInputInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssetInputInfoAsync(String ASSET_ID, final ApiCallback<GetAssetInputInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetInputInfoValidateBeforeCall(ASSET_ID, _callback);
        Type localVarReturnType = new TypeToken<GetAssetInputInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAssetInputInfoRequest {
        private final String ASSET_ID;

        private APIgetAssetInputInfoRequest(String ASSET_ID) {
            this.ASSET_ID = ASSET_ID;
        }

        /**
         * Build call for getAssetInputInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssetInputInfoCall(ASSET_ID, _callback);
        }

        /**
         * Execute getAssetInputInfo request
         * @return GetAssetInputInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GetAssetInputInfoResponse execute() throws ApiException {
            ApiResponse<GetAssetInputInfoResponse> localVarResp = getAssetInputInfoWithHttpInfo(ASSET_ID);
            return localVarResp.getData();
        }

        /**
         * Execute getAssetInputInfo request with HTTP info returned
         * @return ApiResponse&lt;GetAssetInputInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetAssetInputInfoResponse> executeWithHttpInfo() throws ApiException {
            return getAssetInputInfoWithHttpInfo(ASSET_ID);
        }

        /**
         * Execute getAssetInputInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetAssetInputInfoResponse> _callback) throws ApiException {
            return getAssetInputInfoAsync(ASSET_ID, _callback);
        }
    }

    /**
     * Retrieve asset input info
     * Returns a list of the input objects that were used to create the asset along with any settings that were applied to each input.
     * @param ASSET_ID The asset ID. (required)
     * @return APIgetAssetInputInfoRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAssetInputInfoRequest getAssetInputInfo(String ASSET_ID) {
        return new APIgetAssetInputInfoRequest(ASSET_ID);
    }
    private okhttp3.Call getAssetPlaybackIdCall(String ASSET_ID, String PLAYBACK_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}/playback-ids/{PLAYBACK_ID}"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()))
            .replaceAll("\\{" + "PLAYBACK_ID" + "\\}", localVarApiClient.escapeString(PLAYBACK_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetPlaybackIdValidateBeforeCall(String ASSET_ID, String PLAYBACK_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling getAssetPlaybackId(Async)");
        }
        
        // verify the required parameter 'PLAYBACK_ID' is set
        if (PLAYBACK_ID == null) {
            throw new ApiException("Missing the required parameter 'PLAYBACK_ID' when calling getAssetPlaybackId(Async)");
        }
        

        okhttp3.Call localVarCall = getAssetPlaybackIdCall(ASSET_ID, PLAYBACK_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<GetAssetPlaybackIDResponse> getAssetPlaybackIdWithHttpInfo(String ASSET_ID, String PLAYBACK_ID) throws ApiException {
        okhttp3.Call localVarCall = getAssetPlaybackIdValidateBeforeCall(ASSET_ID, PLAYBACK_ID, null);
        Type localVarReturnType = new TypeToken<GetAssetPlaybackIDResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssetPlaybackIdAsync(String ASSET_ID, String PLAYBACK_ID, final ApiCallback<GetAssetPlaybackIDResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetPlaybackIdValidateBeforeCall(ASSET_ID, PLAYBACK_ID, _callback);
        Type localVarReturnType = new TypeToken<GetAssetPlaybackIDResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAssetPlaybackIdRequest {
        private final String ASSET_ID;
        private final String PLAYBACK_ID;

        private APIgetAssetPlaybackIdRequest(String ASSET_ID, String PLAYBACK_ID) {
            this.ASSET_ID = ASSET_ID;
            this.PLAYBACK_ID = PLAYBACK_ID;
        }

        /**
         * Build call for getAssetPlaybackId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssetPlaybackIdCall(ASSET_ID, PLAYBACK_ID, _callback);
        }

        /**
         * Execute getAssetPlaybackId request
         * @return GetAssetPlaybackIDResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GetAssetPlaybackIDResponse execute() throws ApiException {
            ApiResponse<GetAssetPlaybackIDResponse> localVarResp = getAssetPlaybackIdWithHttpInfo(ASSET_ID, PLAYBACK_ID);
            return localVarResp.getData();
        }

        /**
         * Execute getAssetPlaybackId request with HTTP info returned
         * @return ApiResponse&lt;GetAssetPlaybackIDResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetAssetPlaybackIDResponse> executeWithHttpInfo() throws ApiException {
            return getAssetPlaybackIdWithHttpInfo(ASSET_ID, PLAYBACK_ID);
        }

        /**
         * Execute getAssetPlaybackId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetAssetPlaybackIDResponse> _callback) throws ApiException {
            return getAssetPlaybackIdAsync(ASSET_ID, PLAYBACK_ID, _callback);
        }
    }

    /**
     * Retrieve a playback ID
     * Retrieves information about the specified playback ID.
     * @param ASSET_ID The asset ID. (required)
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @return APIgetAssetPlaybackIdRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAssetPlaybackIdRequest getAssetPlaybackId(String ASSET_ID, String PLAYBACK_ID) {
        return new APIgetAssetPlaybackIdRequest(ASSET_ID, PLAYBACK_ID);
    }
    private okhttp3.Call listAssetsCall(Integer limit, Integer page, String liveStreamId, String uploadId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/assets";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (liveStreamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("live_stream_id", liveStreamId));
        }

        if (uploadId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_id", uploadId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssetsValidateBeforeCall(Integer limit, Integer page, String liveStreamId, String uploadId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listAssetsCall(limit, page, liveStreamId, uploadId, _callback);
        return localVarCall;

    }


    private ApiResponse<ListAssetsResponse> listAssetsWithHttpInfo(Integer limit, Integer page, String liveStreamId, String uploadId) throws ApiException {
        okhttp3.Call localVarCall = listAssetsValidateBeforeCall(limit, page, liveStreamId, uploadId, null);
        Type localVarReturnType = new TypeToken<ListAssetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAssetsAsync(Integer limit, Integer page, String liveStreamId, String uploadId, final ApiCallback<ListAssetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssetsValidateBeforeCall(limit, page, liveStreamId, uploadId, _callback);
        Type localVarReturnType = new TypeToken<ListAssetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistAssetsRequest {
        private Integer limit;
        private Integer page;
        private String liveStreamId;
        private String uploadId;

        private APIlistAssetsRequest() {
        }

        /**
         * Set limit
         * @param limit Number of items to include in the response (optional, default to 25)
         * @return APIlistAssetsRequest
         */
        public APIlistAssetsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
         * @return APIlistAssetsRequest
         */
        public APIlistAssetsRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set liveStreamId
         * @param liveStreamId Filter response to return all the assets for this live stream only (optional)
         * @return APIlistAssetsRequest
         */
        public APIlistAssetsRequest liveStreamId(String liveStreamId) {
            this.liveStreamId = liveStreamId;
            return this;
        }

        /**
         * Set uploadId
         * @param uploadId Filter response to return an asset created from this direct upload only (optional)
         * @return APIlistAssetsRequest
         */
        public APIlistAssetsRequest uploadId(String uploadId) {
            this.uploadId = uploadId;
            return this;
        }

        /**
         * Build call for listAssets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAssetsCall(limit, page, liveStreamId, uploadId, _callback);
        }

        /**
         * Execute listAssets request
         * @return ListAssetsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ListAssetsResponse execute() throws ApiException {
            ApiResponse<ListAssetsResponse> localVarResp = listAssetsWithHttpInfo(limit, page, liveStreamId, uploadId);
            return localVarResp.getData();
        }

        /**
         * Execute listAssets request with HTTP info returned
         * @return ApiResponse&lt;ListAssetsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListAssetsResponse> executeWithHttpInfo() throws ApiException {
            return listAssetsWithHttpInfo(limit, page, liveStreamId, uploadId);
        }

        /**
         * Execute listAssets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListAssetsResponse> _callback) throws ApiException {
            return listAssetsAsync(limit, page, liveStreamId, uploadId, _callback);
        }
    }

    /**
     * List assets
     * List all Mux assets.
     * @return APIlistAssetsRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIlistAssetsRequest listAssets() {
        return new APIlistAssetsRequest();
    }
    private okhttp3.Call updateAssetCall(String ASSET_ID, UpdateAssetRequest updateAssetRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateAssetRequest;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAssetValidateBeforeCall(String ASSET_ID, UpdateAssetRequest updateAssetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling updateAsset(Async)");
        }
        
        // verify the required parameter 'updateAssetRequest' is set
        if (updateAssetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAssetRequest' when calling updateAsset(Async)");
        }
        

        okhttp3.Call localVarCall = updateAssetCall(ASSET_ID, updateAssetRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<AssetResponse> updateAssetWithHttpInfo(String ASSET_ID, UpdateAssetRequest updateAssetRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAssetValidateBeforeCall(ASSET_ID, updateAssetRequest, null);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAssetAsync(String ASSET_ID, UpdateAssetRequest updateAssetRequest, final ApiCallback<AssetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAssetValidateBeforeCall(ASSET_ID, updateAssetRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateAssetRequest {
        private final String ASSET_ID;
        private final UpdateAssetRequest updateAssetRequest;

        private APIupdateAssetRequest(String ASSET_ID, UpdateAssetRequest updateAssetRequest) {
            this.ASSET_ID = ASSET_ID;
            this.updateAssetRequest = updateAssetRequest;
        }

        /**
         * Build call for updateAsset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateAssetCall(ASSET_ID, updateAssetRequest, _callback);
        }

        /**
         * Execute updateAsset request
         * @return AssetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AssetResponse execute() throws ApiException {
            ApiResponse<AssetResponse> localVarResp = updateAssetWithHttpInfo(ASSET_ID, updateAssetRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateAsset request with HTTP info returned
         * @return ApiResponse&lt;AssetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetResponse> executeWithHttpInfo() throws ApiException {
            return updateAssetWithHttpInfo(ASSET_ID, updateAssetRequest);
        }

        /**
         * Execute updateAsset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetResponse> _callback) throws ApiException {
            return updateAssetAsync(ASSET_ID, updateAssetRequest, _callback);
        }
    }

    /**
     * Update an Asset
     * Updates the details of an already-created Asset with the provided Asset ID. This currently supports only the &#x60;passthrough&#x60; field.
     * @param ASSET_ID The asset ID. (required)
     * @param updateAssetRequest  (required)
     * @return APIupdateAssetRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateAssetRequest updateAsset(String ASSET_ID, UpdateAssetRequest updateAssetRequest) {
        return new APIupdateAssetRequest(ASSET_ID, updateAssetRequest);
    }
    private okhttp3.Call updateAssetMasterAccessCall(String ASSET_ID, UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateAssetMasterAccessRequest;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}/master-access"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAssetMasterAccessValidateBeforeCall(String ASSET_ID, UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling updateAssetMasterAccess(Async)");
        }
        
        // verify the required parameter 'updateAssetMasterAccessRequest' is set
        if (updateAssetMasterAccessRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAssetMasterAccessRequest' when calling updateAssetMasterAccess(Async)");
        }
        

        okhttp3.Call localVarCall = updateAssetMasterAccessCall(ASSET_ID, updateAssetMasterAccessRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<AssetResponse> updateAssetMasterAccessWithHttpInfo(String ASSET_ID, UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAssetMasterAccessValidateBeforeCall(ASSET_ID, updateAssetMasterAccessRequest, null);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAssetMasterAccessAsync(String ASSET_ID, UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest, final ApiCallback<AssetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAssetMasterAccessValidateBeforeCall(ASSET_ID, updateAssetMasterAccessRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateAssetMasterAccessRequest {
        private final String ASSET_ID;
        private final UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest;

        private APIupdateAssetMasterAccessRequest(String ASSET_ID, UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest) {
            this.ASSET_ID = ASSET_ID;
            this.updateAssetMasterAccessRequest = updateAssetMasterAccessRequest;
        }

        /**
         * Build call for updateAssetMasterAccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateAssetMasterAccessCall(ASSET_ID, updateAssetMasterAccessRequest, _callback);
        }

        /**
         * Execute updateAssetMasterAccess request
         * @return AssetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AssetResponse execute() throws ApiException {
            ApiResponse<AssetResponse> localVarResp = updateAssetMasterAccessWithHttpInfo(ASSET_ID, updateAssetMasterAccessRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateAssetMasterAccess request with HTTP info returned
         * @return ApiResponse&lt;AssetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetResponse> executeWithHttpInfo() throws ApiException {
            return updateAssetMasterAccessWithHttpInfo(ASSET_ID, updateAssetMasterAccessRequest);
        }

        /**
         * Execute updateAssetMasterAccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetResponse> _callback) throws ApiException {
            return updateAssetMasterAccessAsync(ASSET_ID, updateAssetMasterAccessRequest, _callback);
        }
    }

    /**
     * Update master access
     * Allows you to add temporary access to the master (highest-quality) version of the asset in MP4 format. A URL will be created that can be used to download the master version for 24 hours. After 24 hours Master Access will revert to \&quot;none\&quot;. This master version is not optimized for web and not meant to be streamed, only downloaded for purposes like archiving or editing the video offline.
     * @param ASSET_ID The asset ID. (required)
     * @param updateAssetMasterAccessRequest  (required)
     * @return APIupdateAssetMasterAccessRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateAssetMasterAccessRequest updateAssetMasterAccess(String ASSET_ID, UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest) {
        return new APIupdateAssetMasterAccessRequest(ASSET_ID, updateAssetMasterAccessRequest);
    }
    private okhttp3.Call updateAssetMp4SupportCall(String ASSET_ID, UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateAssetMP4SupportRequest;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}/mp4-support"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAssetMp4SupportValidateBeforeCall(String ASSET_ID, UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling updateAssetMp4Support(Async)");
        }
        
        // verify the required parameter 'updateAssetMP4SupportRequest' is set
        if (updateAssetMP4SupportRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAssetMP4SupportRequest' when calling updateAssetMp4Support(Async)");
        }
        

        okhttp3.Call localVarCall = updateAssetMp4SupportCall(ASSET_ID, updateAssetMP4SupportRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<AssetResponse> updateAssetMp4SupportWithHttpInfo(String ASSET_ID, UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAssetMp4SupportValidateBeforeCall(ASSET_ID, updateAssetMP4SupportRequest, null);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAssetMp4SupportAsync(String ASSET_ID, UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest, final ApiCallback<AssetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAssetMp4SupportValidateBeforeCall(ASSET_ID, updateAssetMP4SupportRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateAssetMp4SupportRequest {
        private final String ASSET_ID;
        private final UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest;

        private APIupdateAssetMp4SupportRequest(String ASSET_ID, UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest) {
            this.ASSET_ID = ASSET_ID;
            this.updateAssetMP4SupportRequest = updateAssetMP4SupportRequest;
        }

        /**
         * Build call for updateAssetMp4Support
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateAssetMp4SupportCall(ASSET_ID, updateAssetMP4SupportRequest, _callback);
        }

        /**
         * Execute updateAssetMp4Support request
         * @return AssetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AssetResponse execute() throws ApiException {
            ApiResponse<AssetResponse> localVarResp = updateAssetMp4SupportWithHttpInfo(ASSET_ID, updateAssetMP4SupportRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateAssetMp4Support request with HTTP info returned
         * @return ApiResponse&lt;AssetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetResponse> executeWithHttpInfo() throws ApiException {
            return updateAssetMp4SupportWithHttpInfo(ASSET_ID, updateAssetMP4SupportRequest);
        }

        /**
         * Execute updateAssetMp4Support request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetResponse> _callback) throws ApiException {
            return updateAssetMp4SupportAsync(ASSET_ID, updateAssetMP4SupportRequest, _callback);
        }
    }

    /**
     * Update MP4 support
     * Allows you to add or remove mp4 support for assets that were created without it. Currently there are two values supported in this request, &#x60;standard&#x60; and &#x60;none&#x60;. &#x60;none&#x60; means that an asset *does not* have mp4 support, so submitting a request with &#x60;mp4_support&#x60; set to &#x60;none&#x60; will delete the mp4 assets from the asset in question.
     * @param ASSET_ID The asset ID. (required)
     * @param updateAssetMP4SupportRequest  (required)
     * @return APIupdateAssetMp4SupportRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateAssetMp4SupportRequest updateAssetMp4Support(String ASSET_ID, UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest) {
        return new APIupdateAssetMp4SupportRequest(ASSET_ID, updateAssetMP4SupportRequest);
    }
}
