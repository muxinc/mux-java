/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mux.sdk;

import com.mux.ApiCallback;
import com.mux.ApiClient;
import com.mux.ApiException;
import com.mux.ApiResponse;
import com.mux.Configuration;
import com.mux.Pair;
import com.mux.ProgressRequestBody;
import com.mux.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mux.sdk.models.AssetResponse;
import com.mux.sdk.models.CreateAssetRequest;
import com.mux.sdk.models.CreatePlaybackIDRequest;
import com.mux.sdk.models.CreatePlaybackIDResponse;
import com.mux.sdk.models.CreateTrackRequest;
import com.mux.sdk.models.CreateTrackResponse;
import com.mux.sdk.models.GetAssetInputInfoResponse;
import com.mux.sdk.models.GetAssetPlaybackIDResponse;
import com.mux.sdk.models.ListAssetsResponse;
import com.mux.sdk.models.UpdateAssetMP4SupportRequest;
import com.mux.sdk.models.UpdateAssetMasterAccessRequest;

import java.lang.reflect.Type;

public class AssetsApi {
    private ApiClient localVarApiClient;

    public AssetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createAsset
     * @param createAssetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Asset Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetCall(CreateAssetRequest createAssetRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createAssetRequest;

        // create path and map variables
        String localVarPath = "/video/v1/assets";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAssetValidateBeforeCall(CreateAssetRequest createAssetRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createAssetRequest' is set
        if (createAssetRequest == null) {
            throw new ApiException("Missing the required parameter 'createAssetRequest' when calling createAsset(Async)");
        }
        

        okhttp3.Call localVarCall = createAssetCall(createAssetRequest, _callback);
        return localVarCall;

    }

    /**
     * Create an asset
     * Create a new Mux Video asset. 
     * @param createAssetRequest  (required)
     * @return AssetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Asset Created </td><td>  -  </td></tr>
     </table>
     */
    public AssetResponse createAsset(CreateAssetRequest createAssetRequest) throws ApiException {
        ApiResponse<AssetResponse> localVarResp = createAssetWithHttpInfo(createAssetRequest);
        return localVarResp.getData();
    }

    /**
     * Create an asset
     * Create a new Mux Video asset. 
     * @param createAssetRequest  (required)
     * @return ApiResponse&lt;AssetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Asset Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetResponse> createAssetWithHttpInfo(CreateAssetRequest createAssetRequest) throws ApiException {
        okhttp3.Call localVarCall = createAssetValidateBeforeCall(createAssetRequest, null);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an asset (asynchronously)
     * Create a new Mux Video asset. 
     * @param createAssetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Asset Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetAsync(CreateAssetRequest createAssetRequest, final ApiCallback<AssetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAssetValidateBeforeCall(createAssetRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAssetPlaybackId
     * @param ASSET_ID The asset ID. (required)
     * @param createPlaybackIDRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetPlaybackIdCall(String ASSET_ID, CreatePlaybackIDRequest createPlaybackIDRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createPlaybackIDRequest;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}/playback-ids"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAssetPlaybackIdValidateBeforeCall(String ASSET_ID, CreatePlaybackIDRequest createPlaybackIDRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling createAssetPlaybackId(Async)");
        }
        
        // verify the required parameter 'createPlaybackIDRequest' is set
        if (createPlaybackIDRequest == null) {
            throw new ApiException("Missing the required parameter 'createPlaybackIDRequest' when calling createAssetPlaybackId(Async)");
        }
        

        okhttp3.Call localVarCall = createAssetPlaybackIdCall(ASSET_ID, createPlaybackIDRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a playback ID
     * 
     * @param ASSET_ID The asset ID. (required)
     * @param createPlaybackIDRequest  (required)
     * @return CreatePlaybackIDResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreatePlaybackIDResponse createAssetPlaybackId(String ASSET_ID, CreatePlaybackIDRequest createPlaybackIDRequest) throws ApiException {
        ApiResponse<CreatePlaybackIDResponse> localVarResp = createAssetPlaybackIdWithHttpInfo(ASSET_ID, createPlaybackIDRequest);
        return localVarResp.getData();
    }

    /**
     * Create a playback ID
     * 
     * @param ASSET_ID The asset ID. (required)
     * @param createPlaybackIDRequest  (required)
     * @return ApiResponse&lt;CreatePlaybackIDResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePlaybackIDResponse> createAssetPlaybackIdWithHttpInfo(String ASSET_ID, CreatePlaybackIDRequest createPlaybackIDRequest) throws ApiException {
        okhttp3.Call localVarCall = createAssetPlaybackIdValidateBeforeCall(ASSET_ID, createPlaybackIDRequest, null);
        Type localVarReturnType = new TypeToken<CreatePlaybackIDResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a playback ID (asynchronously)
     * 
     * @param ASSET_ID The asset ID. (required)
     * @param createPlaybackIDRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetPlaybackIdAsync(String ASSET_ID, CreatePlaybackIDRequest createPlaybackIDRequest, final ApiCallback<CreatePlaybackIDResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAssetPlaybackIdValidateBeforeCall(ASSET_ID, createPlaybackIDRequest, _callback);
        Type localVarReturnType = new TypeToken<CreatePlaybackIDResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAssetTrack
     * @param ASSET_ID The asset ID. (required)
     * @param createTrackRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetTrackCall(String ASSET_ID, CreateTrackRequest createTrackRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createTrackRequest;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}/tracks"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAssetTrackValidateBeforeCall(String ASSET_ID, CreateTrackRequest createTrackRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling createAssetTrack(Async)");
        }
        
        // verify the required parameter 'createTrackRequest' is set
        if (createTrackRequest == null) {
            throw new ApiException("Missing the required parameter 'createTrackRequest' when calling createAssetTrack(Async)");
        }
        

        okhttp3.Call localVarCall = createAssetTrackCall(ASSET_ID, createTrackRequest, _callback);
        return localVarCall;

    }

    /**
     * Create an asset track
     * 
     * @param ASSET_ID The asset ID. (required)
     * @param createTrackRequest  (required)
     * @return CreateTrackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateTrackResponse createAssetTrack(String ASSET_ID, CreateTrackRequest createTrackRequest) throws ApiException {
        ApiResponse<CreateTrackResponse> localVarResp = createAssetTrackWithHttpInfo(ASSET_ID, createTrackRequest);
        return localVarResp.getData();
    }

    /**
     * Create an asset track
     * 
     * @param ASSET_ID The asset ID. (required)
     * @param createTrackRequest  (required)
     * @return ApiResponse&lt;CreateTrackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTrackResponse> createAssetTrackWithHttpInfo(String ASSET_ID, CreateTrackRequest createTrackRequest) throws ApiException {
        okhttp3.Call localVarCall = createAssetTrackValidateBeforeCall(ASSET_ID, createTrackRequest, null);
        Type localVarReturnType = new TypeToken<CreateTrackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an asset track (asynchronously)
     * 
     * @param ASSET_ID The asset ID. (required)
     * @param createTrackRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetTrackAsync(String ASSET_ID, CreateTrackRequest createTrackRequest, final ApiCallback<CreateTrackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAssetTrackValidateBeforeCall(ASSET_ID, createTrackRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateTrackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAsset
     * @param ASSET_ID The asset ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAssetCall(String ASSET_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAssetValidateBeforeCall(String ASSET_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling deleteAsset(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAssetCall(ASSET_ID, _callback);
        return localVarCall;

    }

    /**
     * Delete an asset
     * Deletes a video asset and all its data 
     * @param ASSET_ID The asset ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAsset(String ASSET_ID) throws ApiException {
        deleteAssetWithHttpInfo(ASSET_ID);
    }

    /**
     * Delete an asset
     * Deletes a video asset and all its data 
     * @param ASSET_ID The asset ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAssetWithHttpInfo(String ASSET_ID) throws ApiException {
        okhttp3.Call localVarCall = deleteAssetValidateBeforeCall(ASSET_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an asset (asynchronously)
     * Deletes a video asset and all its data 
     * @param ASSET_ID The asset ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAssetAsync(String ASSET_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAssetValidateBeforeCall(ASSET_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAssetPlaybackId
     * @param ASSET_ID The asset ID. (required)
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAssetPlaybackIdCall(String ASSET_ID, String PLAYBACK_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}/playback-ids/{PLAYBACK_ID}"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()))
            .replaceAll("\\{" + "PLAYBACK_ID" + "\\}", localVarApiClient.escapeString(PLAYBACK_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAssetPlaybackIdValidateBeforeCall(String ASSET_ID, String PLAYBACK_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling deleteAssetPlaybackId(Async)");
        }
        
        // verify the required parameter 'PLAYBACK_ID' is set
        if (PLAYBACK_ID == null) {
            throw new ApiException("Missing the required parameter 'PLAYBACK_ID' when calling deleteAssetPlaybackId(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAssetPlaybackIdCall(ASSET_ID, PLAYBACK_ID, _callback);
        return localVarCall;

    }

    /**
     * Delete a playback ID
     * 
     * @param ASSET_ID The asset ID. (required)
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAssetPlaybackId(String ASSET_ID, String PLAYBACK_ID) throws ApiException {
        deleteAssetPlaybackIdWithHttpInfo(ASSET_ID, PLAYBACK_ID);
    }

    /**
     * Delete a playback ID
     * 
     * @param ASSET_ID The asset ID. (required)
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAssetPlaybackIdWithHttpInfo(String ASSET_ID, String PLAYBACK_ID) throws ApiException {
        okhttp3.Call localVarCall = deleteAssetPlaybackIdValidateBeforeCall(ASSET_ID, PLAYBACK_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a playback ID (asynchronously)
     * 
     * @param ASSET_ID The asset ID. (required)
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAssetPlaybackIdAsync(String ASSET_ID, String PLAYBACK_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAssetPlaybackIdValidateBeforeCall(ASSET_ID, PLAYBACK_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAssetTrack
     * @param ASSET_ID The asset ID. (required)
     * @param TRACK_ID The track ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAssetTrackCall(String ASSET_ID, String TRACK_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}/tracks/{TRACK_ID}"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()))
            .replaceAll("\\{" + "TRACK_ID" + "\\}", localVarApiClient.escapeString(TRACK_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAssetTrackValidateBeforeCall(String ASSET_ID, String TRACK_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling deleteAssetTrack(Async)");
        }
        
        // verify the required parameter 'TRACK_ID' is set
        if (TRACK_ID == null) {
            throw new ApiException("Missing the required parameter 'TRACK_ID' when calling deleteAssetTrack(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAssetTrackCall(ASSET_ID, TRACK_ID, _callback);
        return localVarCall;

    }

    /**
     * Delete an asset track
     * 
     * @param ASSET_ID The asset ID. (required)
     * @param TRACK_ID The track ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAssetTrack(String ASSET_ID, String TRACK_ID) throws ApiException {
        deleteAssetTrackWithHttpInfo(ASSET_ID, TRACK_ID);
    }

    /**
     * Delete an asset track
     * 
     * @param ASSET_ID The asset ID. (required)
     * @param TRACK_ID The track ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAssetTrackWithHttpInfo(String ASSET_ID, String TRACK_ID) throws ApiException {
        okhttp3.Call localVarCall = deleteAssetTrackValidateBeforeCall(ASSET_ID, TRACK_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an asset track (asynchronously)
     * 
     * @param ASSET_ID The asset ID. (required)
     * @param TRACK_ID The track ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAssetTrackAsync(String ASSET_ID, String TRACK_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAssetTrackValidateBeforeCall(ASSET_ID, TRACK_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAsset
     * @param ASSET_ID The asset ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetCall(String ASSET_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetValidateBeforeCall(String ASSET_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling getAsset(Async)");
        }
        

        okhttp3.Call localVarCall = getAssetCall(ASSET_ID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an asset
     * Retrieves the details of an asset that has previously been created. Supply the unique asset ID that was returned from your previous request, and Mux will return the corresponding asset information. The same information is returned when creating an asset.
     * @param ASSET_ID The asset ID. (required)
     * @return AssetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AssetResponse getAsset(String ASSET_ID) throws ApiException {
        ApiResponse<AssetResponse> localVarResp = getAssetWithHttpInfo(ASSET_ID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an asset
     * Retrieves the details of an asset that has previously been created. Supply the unique asset ID that was returned from your previous request, and Mux will return the corresponding asset information. The same information is returned when creating an asset.
     * @param ASSET_ID The asset ID. (required)
     * @return ApiResponse&lt;AssetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetResponse> getAssetWithHttpInfo(String ASSET_ID) throws ApiException {
        okhttp3.Call localVarCall = getAssetValidateBeforeCall(ASSET_ID, null);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an asset (asynchronously)
     * Retrieves the details of an asset that has previously been created. Supply the unique asset ID that was returned from your previous request, and Mux will return the corresponding asset information. The same information is returned when creating an asset.
     * @param ASSET_ID The asset ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetAsync(String ASSET_ID, final ApiCallback<AssetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetValidateBeforeCall(ASSET_ID, _callback);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssetInputInfo
     * @param ASSET_ID The asset ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetInputInfoCall(String ASSET_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}/input-info"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetInputInfoValidateBeforeCall(String ASSET_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling getAssetInputInfo(Async)");
        }
        

        okhttp3.Call localVarCall = getAssetInputInfoCall(ASSET_ID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve asset input info
     * Returns a list of the input objects that were used to create the asset along with any settings that were applied to each input.
     * @param ASSET_ID The asset ID. (required)
     * @return GetAssetInputInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAssetInputInfoResponse getAssetInputInfo(String ASSET_ID) throws ApiException {
        ApiResponse<GetAssetInputInfoResponse> localVarResp = getAssetInputInfoWithHttpInfo(ASSET_ID);
        return localVarResp.getData();
    }

    /**
     * Retrieve asset input info
     * Returns a list of the input objects that were used to create the asset along with any settings that were applied to each input.
     * @param ASSET_ID The asset ID. (required)
     * @return ApiResponse&lt;GetAssetInputInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAssetInputInfoResponse> getAssetInputInfoWithHttpInfo(String ASSET_ID) throws ApiException {
        okhttp3.Call localVarCall = getAssetInputInfoValidateBeforeCall(ASSET_ID, null);
        Type localVarReturnType = new TypeToken<GetAssetInputInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve asset input info (asynchronously)
     * Returns a list of the input objects that were used to create the asset along with any settings that were applied to each input.
     * @param ASSET_ID The asset ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetInputInfoAsync(String ASSET_ID, final ApiCallback<GetAssetInputInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetInputInfoValidateBeforeCall(ASSET_ID, _callback);
        Type localVarReturnType = new TypeToken<GetAssetInputInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssetPlaybackId
     * @param ASSET_ID The asset ID. (required)
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetPlaybackIdCall(String ASSET_ID, String PLAYBACK_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}/playback-ids/{PLAYBACK_ID}"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()))
            .replaceAll("\\{" + "PLAYBACK_ID" + "\\}", localVarApiClient.escapeString(PLAYBACK_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetPlaybackIdValidateBeforeCall(String ASSET_ID, String PLAYBACK_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling getAssetPlaybackId(Async)");
        }
        
        // verify the required parameter 'PLAYBACK_ID' is set
        if (PLAYBACK_ID == null) {
            throw new ApiException("Missing the required parameter 'PLAYBACK_ID' when calling getAssetPlaybackId(Async)");
        }
        

        okhttp3.Call localVarCall = getAssetPlaybackIdCall(ASSET_ID, PLAYBACK_ID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a playback ID
     * 
     * @param ASSET_ID The asset ID. (required)
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @return GetAssetPlaybackIDResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAssetPlaybackIDResponse getAssetPlaybackId(String ASSET_ID, String PLAYBACK_ID) throws ApiException {
        ApiResponse<GetAssetPlaybackIDResponse> localVarResp = getAssetPlaybackIdWithHttpInfo(ASSET_ID, PLAYBACK_ID);
        return localVarResp.getData();
    }

    /**
     * Retrieve a playback ID
     * 
     * @param ASSET_ID The asset ID. (required)
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @return ApiResponse&lt;GetAssetPlaybackIDResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAssetPlaybackIDResponse> getAssetPlaybackIdWithHttpInfo(String ASSET_ID, String PLAYBACK_ID) throws ApiException {
        okhttp3.Call localVarCall = getAssetPlaybackIdValidateBeforeCall(ASSET_ID, PLAYBACK_ID, null);
        Type localVarReturnType = new TypeToken<GetAssetPlaybackIDResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a playback ID (asynchronously)
     * 
     * @param ASSET_ID The asset ID. (required)
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetPlaybackIdAsync(String ASSET_ID, String PLAYBACK_ID, final ApiCallback<GetAssetPlaybackIDResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetPlaybackIdValidateBeforeCall(ASSET_ID, PLAYBACK_ID, _callback);
        Type localVarReturnType = new TypeToken<GetAssetPlaybackIDResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAssets
     * @param limit Number of items to include in the response (optional, default to 25)
     * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAssetsCall(Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/assets";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssetsValidateBeforeCall(Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listAssetsCall(limit, page, _callback);
        return localVarCall;

    }

    /**
     * List assets
     * List all Mux assets. 
     * @param limit Number of items to include in the response (optional, default to 25)
     * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
     * @return ListAssetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListAssetsResponse listAssets(Integer limit, Integer page) throws ApiException {
        ApiResponse<ListAssetsResponse> localVarResp = listAssetsWithHttpInfo(limit, page);
        return localVarResp.getData();
    }

    /**
     * List assets
     * List all Mux assets. 
     * @param limit Number of items to include in the response (optional, default to 25)
     * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
     * @return ApiResponse&lt;ListAssetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAssetsResponse> listAssetsWithHttpInfo(Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listAssetsValidateBeforeCall(limit, page, null);
        Type localVarReturnType = new TypeToken<ListAssetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List assets (asynchronously)
     * List all Mux assets. 
     * @param limit Number of items to include in the response (optional, default to 25)
     * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAssetsAsync(Integer limit, Integer page, final ApiCallback<ListAssetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssetsValidateBeforeCall(limit, page, _callback);
        Type localVarReturnType = new TypeToken<ListAssetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAssetMasterAccess
     * @param ASSET_ID The asset ID. (required)
     * @param updateAssetMasterAccessRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAssetMasterAccessCall(String ASSET_ID, UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateAssetMasterAccessRequest;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}/master-access"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAssetMasterAccessValidateBeforeCall(String ASSET_ID, UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling updateAssetMasterAccess(Async)");
        }
        
        // verify the required parameter 'updateAssetMasterAccessRequest' is set
        if (updateAssetMasterAccessRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAssetMasterAccessRequest' when calling updateAssetMasterAccess(Async)");
        }
        

        okhttp3.Call localVarCall = updateAssetMasterAccessCall(ASSET_ID, updateAssetMasterAccessRequest, _callback);
        return localVarCall;

    }

    /**
     * Update master access
     * Allows you to add temporary access to the master (highest-quality) version of the asset in MP4 format. A URL will be created that can be used to download the master version for 24 hours. After 24 hours Master Access will revert to \&quot;none\&quot;. This master version is not optimized for web and not meant to be streamed, only downloaded for purposes like archiving or editing the video offline.
     * @param ASSET_ID The asset ID. (required)
     * @param updateAssetMasterAccessRequest  (required)
     * @return AssetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AssetResponse updateAssetMasterAccess(String ASSET_ID, UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest) throws ApiException {
        ApiResponse<AssetResponse> localVarResp = updateAssetMasterAccessWithHttpInfo(ASSET_ID, updateAssetMasterAccessRequest);
        return localVarResp.getData();
    }

    /**
     * Update master access
     * Allows you to add temporary access to the master (highest-quality) version of the asset in MP4 format. A URL will be created that can be used to download the master version for 24 hours. After 24 hours Master Access will revert to \&quot;none\&quot;. This master version is not optimized for web and not meant to be streamed, only downloaded for purposes like archiving or editing the video offline.
     * @param ASSET_ID The asset ID. (required)
     * @param updateAssetMasterAccessRequest  (required)
     * @return ApiResponse&lt;AssetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetResponse> updateAssetMasterAccessWithHttpInfo(String ASSET_ID, UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAssetMasterAccessValidateBeforeCall(ASSET_ID, updateAssetMasterAccessRequest, null);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update master access (asynchronously)
     * Allows you to add temporary access to the master (highest-quality) version of the asset in MP4 format. A URL will be created that can be used to download the master version for 24 hours. After 24 hours Master Access will revert to \&quot;none\&quot;. This master version is not optimized for web and not meant to be streamed, only downloaded for purposes like archiving or editing the video offline.
     * @param ASSET_ID The asset ID. (required)
     * @param updateAssetMasterAccessRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAssetMasterAccessAsync(String ASSET_ID, UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest, final ApiCallback<AssetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAssetMasterAccessValidateBeforeCall(ASSET_ID, updateAssetMasterAccessRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAssetMp4Support
     * @param ASSET_ID The asset ID. (required)
     * @param updateAssetMP4SupportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAssetMp4SupportCall(String ASSET_ID, UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateAssetMP4SupportRequest;

        // create path and map variables
        String localVarPath = "/video/v1/assets/{ASSET_ID}/mp4-support"
            .replaceAll("\\{" + "ASSET_ID" + "\\}", localVarApiClient.escapeString(ASSET_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAssetMp4SupportValidateBeforeCall(String ASSET_ID, UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ASSET_ID' is set
        if (ASSET_ID == null) {
            throw new ApiException("Missing the required parameter 'ASSET_ID' when calling updateAssetMp4Support(Async)");
        }
        
        // verify the required parameter 'updateAssetMP4SupportRequest' is set
        if (updateAssetMP4SupportRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAssetMP4SupportRequest' when calling updateAssetMp4Support(Async)");
        }
        

        okhttp3.Call localVarCall = updateAssetMp4SupportCall(ASSET_ID, updateAssetMP4SupportRequest, _callback);
        return localVarCall;

    }

    /**
     * Update MP4 support
     * Allows you to add or remove mp4 support for assets that were created without it. Currently there are two values supported in this request, &#x60;standard&#x60; and &#x60;none&#x60;. &#x60;none&#x60; means that an asset *does not* have mp4 support, so submitting a request with &#x60;mp4_support&#x60; set to &#x60;none&#x60; will delete the mp4 assets from the asset in question.
     * @param ASSET_ID The asset ID. (required)
     * @param updateAssetMP4SupportRequest  (required)
     * @return AssetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AssetResponse updateAssetMp4Support(String ASSET_ID, UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest) throws ApiException {
        ApiResponse<AssetResponse> localVarResp = updateAssetMp4SupportWithHttpInfo(ASSET_ID, updateAssetMP4SupportRequest);
        return localVarResp.getData();
    }

    /**
     * Update MP4 support
     * Allows you to add or remove mp4 support for assets that were created without it. Currently there are two values supported in this request, &#x60;standard&#x60; and &#x60;none&#x60;. &#x60;none&#x60; means that an asset *does not* have mp4 support, so submitting a request with &#x60;mp4_support&#x60; set to &#x60;none&#x60; will delete the mp4 assets from the asset in question.
     * @param ASSET_ID The asset ID. (required)
     * @param updateAssetMP4SupportRequest  (required)
     * @return ApiResponse&lt;AssetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetResponse> updateAssetMp4SupportWithHttpInfo(String ASSET_ID, UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAssetMp4SupportValidateBeforeCall(ASSET_ID, updateAssetMP4SupportRequest, null);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update MP4 support (asynchronously)
     * Allows you to add or remove mp4 support for assets that were created without it. Currently there are two values supported in this request, &#x60;standard&#x60; and &#x60;none&#x60;. &#x60;none&#x60; means that an asset *does not* have mp4 support, so submitting a request with &#x60;mp4_support&#x60; set to &#x60;none&#x60; will delete the mp4 assets from the asset in question.
     * @param ASSET_ID The asset ID. (required)
     * @param updateAssetMP4SupportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAssetMp4SupportAsync(String ASSET_ID, UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest, final ApiCallback<AssetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAssetMp4SupportValidateBeforeCall(ASSET_ID, updateAssetMP4SupportRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
