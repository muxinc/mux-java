/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mux.sdk;

import com.mux.ApiCallback;
import com.mux.ApiClient;
import com.mux.ApiException;
import com.mux.ApiResponse;
import com.mux.Configuration;
import com.mux.Pair;
import com.mux.ProgressRequestBody;
import com.mux.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mux.sdk.models.BroadcastResponse;
import com.mux.sdk.models.CreateBroadcastRequest;
import com.mux.sdk.models.CreateSpaceRequest;
import com.mux.sdk.models.ListSpacesResponse;
import com.mux.sdk.models.SpaceResponse;
import com.mux.sdk.models.StartSpaceBroadcastResponse;
import com.mux.sdk.models.StopSpaceBroadcastResponse;
// TODO: due to import parsing issues for the RDR type; fix in spec in future
import com.mux.sdk.models.ReferrerDomainRestriction;

import java.lang.reflect.Type;

public class SpacesApi {
    private ApiClient localVarApiClient;

    public SpacesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SpacesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call createSpaceCall(CreateSpaceRequest createSpaceRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createSpaceRequest;

        // create path and map variables
        String localVarPath = "/video/v1/spaces";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSpaceValidateBeforeCall(CreateSpaceRequest createSpaceRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createSpaceRequest' is set
        if (createSpaceRequest == null) {
            throw new ApiException("Missing the required parameter 'createSpaceRequest' when calling createSpace(Async)");
        }
        

        okhttp3.Call localVarCall = createSpaceCall(createSpaceRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<SpaceResponse> createSpaceWithHttpInfo(CreateSpaceRequest createSpaceRequest) throws ApiException {
        okhttp3.Call localVarCall = createSpaceValidateBeforeCall(createSpaceRequest, null);
        Type localVarReturnType = new TypeToken<SpaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSpaceAsync(CreateSpaceRequest createSpaceRequest, final ApiCallback<SpaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSpaceValidateBeforeCall(createSpaceRequest, _callback);
        Type localVarReturnType = new TypeToken<SpaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateSpaceRequest {
        private final CreateSpaceRequest createSpaceRequest;

        private APIcreateSpaceRequest(CreateSpaceRequest createSpaceRequest) {
            this.createSpaceRequest = createSpaceRequest;
        }

        /**
         * Build call for createSpace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Space Created </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createSpaceCall(createSpaceRequest, _callback);
        }

        /**
         * Execute createSpace request
         * @return SpaceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Space Created </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public SpaceResponse execute() throws ApiException {
            ApiResponse<SpaceResponse> localVarResp = createSpaceWithHttpInfo(createSpaceRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createSpace request with HTTP info returned
         * @return ApiResponse&lt;SpaceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Space Created </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<SpaceResponse> executeWithHttpInfo() throws ApiException {
            return createSpaceWithHttpInfo(createSpaceRequest);
        }

        /**
         * Execute createSpace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Space Created </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<SpaceResponse> _callback) throws ApiException {
            return createSpaceAsync(createSpaceRequest, _callback);
        }
    }

    /**
     * Create a space
     * Create a new space. Spaces are used to build [real-time video applications.](https://mux.com/real-time-video)
     * @param createSpaceRequest  (required)
     * @return APIcreateSpaceRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Space Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIcreateSpaceRequest createSpace(CreateSpaceRequest createSpaceRequest) {
        return new APIcreateSpaceRequest(createSpaceRequest);
    }
    private okhttp3.Call createSpaceBroadcastCall(String SPACE_ID, CreateBroadcastRequest createBroadcastRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createBroadcastRequest;

        // create path and map variables
        String localVarPath = "/video/v1/spaces/{SPACE_ID}/broadcasts"
            .replaceAll("\\{" + "SPACE_ID" + "\\}", localVarApiClient.escapeString(SPACE_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSpaceBroadcastValidateBeforeCall(String SPACE_ID, CreateBroadcastRequest createBroadcastRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'SPACE_ID' is set
        if (SPACE_ID == null) {
            throw new ApiException("Missing the required parameter 'SPACE_ID' when calling createSpaceBroadcast(Async)");
        }
        
        // verify the required parameter 'createBroadcastRequest' is set
        if (createBroadcastRequest == null) {
            throw new ApiException("Missing the required parameter 'createBroadcastRequest' when calling createSpaceBroadcast(Async)");
        }
        

        okhttp3.Call localVarCall = createSpaceBroadcastCall(SPACE_ID, createBroadcastRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<BroadcastResponse> createSpaceBroadcastWithHttpInfo(String SPACE_ID, CreateBroadcastRequest createBroadcastRequest) throws ApiException {
        okhttp3.Call localVarCall = createSpaceBroadcastValidateBeforeCall(SPACE_ID, createBroadcastRequest, null);
        Type localVarReturnType = new TypeToken<BroadcastResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSpaceBroadcastAsync(String SPACE_ID, CreateBroadcastRequest createBroadcastRequest, final ApiCallback<BroadcastResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSpaceBroadcastValidateBeforeCall(SPACE_ID, createBroadcastRequest, _callback);
        Type localVarReturnType = new TypeToken<BroadcastResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateSpaceBroadcastRequest {
        private final String SPACE_ID;
        private final CreateBroadcastRequest createBroadcastRequest;

        private APIcreateSpaceBroadcastRequest(String SPACE_ID, CreateBroadcastRequest createBroadcastRequest) {
            this.SPACE_ID = SPACE_ID;
            this.createBroadcastRequest = createBroadcastRequest;
        }

        /**
         * Build call for createSpaceBroadcast
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Broadcast Created </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createSpaceBroadcastCall(SPACE_ID, createBroadcastRequest, _callback);
        }

        /**
         * Execute createSpaceBroadcast request
         * @return BroadcastResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Broadcast Created </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public BroadcastResponse execute() throws ApiException {
            ApiResponse<BroadcastResponse> localVarResp = createSpaceBroadcastWithHttpInfo(SPACE_ID, createBroadcastRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createSpaceBroadcast request with HTTP info returned
         * @return ApiResponse&lt;BroadcastResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Broadcast Created </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<BroadcastResponse> executeWithHttpInfo() throws ApiException {
            return createSpaceBroadcastWithHttpInfo(SPACE_ID, createBroadcastRequest);
        }

        /**
         * Execute createSpaceBroadcast request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Broadcast Created </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<BroadcastResponse> _callback) throws ApiException {
            return createSpaceBroadcastAsync(SPACE_ID, createBroadcastRequest, _callback);
        }
    }

    /**
     * Create a space broadcast
     * Creates a new broadcast. Broadcasts are used to create composited versions of your space, which can be broadcast to live streams. **Note:** By default only a single broadcast destination can be specified. Contact Mux support if you need more.
     * @param SPACE_ID The space ID. (required)
     * @param createBroadcastRequest  (required)
     * @return APIcreateSpaceBroadcastRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Broadcast Created </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIcreateSpaceBroadcastRequest createSpaceBroadcast(String SPACE_ID, CreateBroadcastRequest createBroadcastRequest) {
        return new APIcreateSpaceBroadcastRequest(SPACE_ID, createBroadcastRequest);
    }
    private okhttp3.Call deleteSpaceCall(String SPACE_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/spaces/{SPACE_ID}"
            .replaceAll("\\{" + "SPACE_ID" + "\\}", localVarApiClient.escapeString(SPACE_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSpaceValidateBeforeCall(String SPACE_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'SPACE_ID' is set
        if (SPACE_ID == null) {
            throw new ApiException("Missing the required parameter 'SPACE_ID' when calling deleteSpace(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSpaceCall(SPACE_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<Void> deleteSpaceWithHttpInfo(String SPACE_ID) throws ApiException {
        okhttp3.Call localVarCall = deleteSpaceValidateBeforeCall(SPACE_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSpaceAsync(String SPACE_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSpaceValidateBeforeCall(SPACE_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteSpaceRequest {
        private final String SPACE_ID;

        private APIdeleteSpaceRequest(String SPACE_ID) {
            this.SPACE_ID = SPACE_ID;
        }

        /**
         * Build call for deleteSpace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSpaceCall(SPACE_ID, _callback);
        }

        /**
         * Execute deleteSpace request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public void execute() throws ApiException {
            deleteSpaceWithHttpInfo(SPACE_ID);
        }

        /**
         * Execute deleteSpace request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSpaceWithHttpInfo(SPACE_ID);
        }

        /**
         * Execute deleteSpace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSpaceAsync(SPACE_ID, _callback);
        }
    }

    /**
     * Delete a space
     * Deletes a space. Spaces can only be deleted when &#x60;idle&#x60;.
     * @param SPACE_ID The space ID. (required)
     * @return APIdeleteSpaceRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIdeleteSpaceRequest deleteSpace(String SPACE_ID) {
        return new APIdeleteSpaceRequest(SPACE_ID);
    }
    private okhttp3.Call deleteSpaceBroadcastCall(String SPACE_ID, String BROADCAST_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/spaces/{SPACE_ID}/broadcasts/{BROADCAST_ID}"
            .replaceAll("\\{" + "SPACE_ID" + "\\}", localVarApiClient.escapeString(SPACE_ID.toString()))
            .replaceAll("\\{" + "BROADCAST_ID" + "\\}", localVarApiClient.escapeString(BROADCAST_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSpaceBroadcastValidateBeforeCall(String SPACE_ID, String BROADCAST_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'SPACE_ID' is set
        if (SPACE_ID == null) {
            throw new ApiException("Missing the required parameter 'SPACE_ID' when calling deleteSpaceBroadcast(Async)");
        }
        
        // verify the required parameter 'BROADCAST_ID' is set
        if (BROADCAST_ID == null) {
            throw new ApiException("Missing the required parameter 'BROADCAST_ID' when calling deleteSpaceBroadcast(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSpaceBroadcastCall(SPACE_ID, BROADCAST_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<Void> deleteSpaceBroadcastWithHttpInfo(String SPACE_ID, String BROADCAST_ID) throws ApiException {
        okhttp3.Call localVarCall = deleteSpaceBroadcastValidateBeforeCall(SPACE_ID, BROADCAST_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSpaceBroadcastAsync(String SPACE_ID, String BROADCAST_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSpaceBroadcastValidateBeforeCall(SPACE_ID, BROADCAST_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteSpaceBroadcastRequest {
        private final String SPACE_ID;
        private final String BROADCAST_ID;

        private APIdeleteSpaceBroadcastRequest(String SPACE_ID, String BROADCAST_ID) {
            this.SPACE_ID = SPACE_ID;
            this.BROADCAST_ID = BROADCAST_ID;
        }

        /**
         * Build call for deleteSpaceBroadcast
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSpaceBroadcastCall(SPACE_ID, BROADCAST_ID, _callback);
        }

        /**
         * Execute deleteSpaceBroadcast request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public void execute() throws ApiException {
            deleteSpaceBroadcastWithHttpInfo(SPACE_ID, BROADCAST_ID);
        }

        /**
         * Execute deleteSpaceBroadcast request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSpaceBroadcastWithHttpInfo(SPACE_ID, BROADCAST_ID);
        }

        /**
         * Execute deleteSpaceBroadcast request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSpaceBroadcastAsync(SPACE_ID, BROADCAST_ID, _callback);
        }
    }

    /**
     * Delete a space broadcast
     * Deletes a single broadcast of a specific space. Broadcasts can only be deleted when &#x60;idle&#x60;.
     * @param SPACE_ID The space ID. (required)
     * @param BROADCAST_ID The broadcast ID. (required)
     * @return APIdeleteSpaceBroadcastRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIdeleteSpaceBroadcastRequest deleteSpaceBroadcast(String SPACE_ID, String BROADCAST_ID) {
        return new APIdeleteSpaceBroadcastRequest(SPACE_ID, BROADCAST_ID);
    }
    private okhttp3.Call getSpaceCall(String SPACE_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/spaces/{SPACE_ID}"
            .replaceAll("\\{" + "SPACE_ID" + "\\}", localVarApiClient.escapeString(SPACE_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpaceValidateBeforeCall(String SPACE_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'SPACE_ID' is set
        if (SPACE_ID == null) {
            throw new ApiException("Missing the required parameter 'SPACE_ID' when calling getSpace(Async)");
        }
        

        okhttp3.Call localVarCall = getSpaceCall(SPACE_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<SpaceResponse> getSpaceWithHttpInfo(String SPACE_ID) throws ApiException {
        okhttp3.Call localVarCall = getSpaceValidateBeforeCall(SPACE_ID, null);
        Type localVarReturnType = new TypeToken<SpaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpaceAsync(String SPACE_ID, final ApiCallback<SpaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpaceValidateBeforeCall(SPACE_ID, _callback);
        Type localVarReturnType = new TypeToken<SpaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSpaceRequest {
        private final String SPACE_ID;

        private APIgetSpaceRequest(String SPACE_ID) {
            this.SPACE_ID = SPACE_ID;
        }

        /**
         * Build call for getSpace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpaceCall(SPACE_ID, _callback);
        }

        /**
         * Execute getSpace request
         * @return SpaceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public SpaceResponse execute() throws ApiException {
            ApiResponse<SpaceResponse> localVarResp = getSpaceWithHttpInfo(SPACE_ID);
            return localVarResp.getData();
        }

        /**
         * Execute getSpace request with HTTP info returned
         * @return ApiResponse&lt;SpaceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<SpaceResponse> executeWithHttpInfo() throws ApiException {
            return getSpaceWithHttpInfo(SPACE_ID);
        }

        /**
         * Execute getSpace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<SpaceResponse> _callback) throws ApiException {
            return getSpaceAsync(SPACE_ID, _callback);
        }
    }

    /**
     * Retrieve a space
     * Retrieves the details of a space that has previously been created. Supply the unique space ID that was returned from your create space request, and Mux will return the information about the corresponding space. The same information is returned when creating a space.
     * @param SPACE_ID The space ID. (required)
     * @return APIgetSpaceRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIgetSpaceRequest getSpace(String SPACE_ID) {
        return new APIgetSpaceRequest(SPACE_ID);
    }
    private okhttp3.Call getSpaceBroadcastCall(String SPACE_ID, String BROADCAST_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/spaces/{SPACE_ID}/broadcasts/{BROADCAST_ID}"
            .replaceAll("\\{" + "SPACE_ID" + "\\}", localVarApiClient.escapeString(SPACE_ID.toString()))
            .replaceAll("\\{" + "BROADCAST_ID" + "\\}", localVarApiClient.escapeString(BROADCAST_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpaceBroadcastValidateBeforeCall(String SPACE_ID, String BROADCAST_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'SPACE_ID' is set
        if (SPACE_ID == null) {
            throw new ApiException("Missing the required parameter 'SPACE_ID' when calling getSpaceBroadcast(Async)");
        }
        
        // verify the required parameter 'BROADCAST_ID' is set
        if (BROADCAST_ID == null) {
            throw new ApiException("Missing the required parameter 'BROADCAST_ID' when calling getSpaceBroadcast(Async)");
        }
        

        okhttp3.Call localVarCall = getSpaceBroadcastCall(SPACE_ID, BROADCAST_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<BroadcastResponse> getSpaceBroadcastWithHttpInfo(String SPACE_ID, String BROADCAST_ID) throws ApiException {
        okhttp3.Call localVarCall = getSpaceBroadcastValidateBeforeCall(SPACE_ID, BROADCAST_ID, null);
        Type localVarReturnType = new TypeToken<BroadcastResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpaceBroadcastAsync(String SPACE_ID, String BROADCAST_ID, final ApiCallback<BroadcastResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpaceBroadcastValidateBeforeCall(SPACE_ID, BROADCAST_ID, _callback);
        Type localVarReturnType = new TypeToken<BroadcastResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSpaceBroadcastRequest {
        private final String SPACE_ID;
        private final String BROADCAST_ID;

        private APIgetSpaceBroadcastRequest(String SPACE_ID, String BROADCAST_ID) {
            this.SPACE_ID = SPACE_ID;
            this.BROADCAST_ID = BROADCAST_ID;
        }

        /**
         * Build call for getSpaceBroadcast
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpaceBroadcastCall(SPACE_ID, BROADCAST_ID, _callback);
        }

        /**
         * Execute getSpaceBroadcast request
         * @return BroadcastResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public BroadcastResponse execute() throws ApiException {
            ApiResponse<BroadcastResponse> localVarResp = getSpaceBroadcastWithHttpInfo(SPACE_ID, BROADCAST_ID);
            return localVarResp.getData();
        }

        /**
         * Execute getSpaceBroadcast request with HTTP info returned
         * @return ApiResponse&lt;BroadcastResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<BroadcastResponse> executeWithHttpInfo() throws ApiException {
            return getSpaceBroadcastWithHttpInfo(SPACE_ID, BROADCAST_ID);
        }

        /**
         * Execute getSpaceBroadcast request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<BroadcastResponse> _callback) throws ApiException {
            return getSpaceBroadcastAsync(SPACE_ID, BROADCAST_ID, _callback);
        }
    }

    /**
     * Retrieve space broadcast
     * Retrieves the details of a broadcast of a specific space.
     * @param SPACE_ID The space ID. (required)
     * @param BROADCAST_ID The broadcast ID. (required)
     * @return APIgetSpaceBroadcastRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIgetSpaceBroadcastRequest getSpaceBroadcast(String SPACE_ID, String BROADCAST_ID) {
        return new APIgetSpaceBroadcastRequest(SPACE_ID, BROADCAST_ID);
    }
    private okhttp3.Call listSpacesCall(Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/spaces";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSpacesValidateBeforeCall(Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listSpacesCall(limit, page, _callback);
        return localVarCall;

    }


    private ApiResponse<ListSpacesResponse> listSpacesWithHttpInfo(Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listSpacesValidateBeforeCall(limit, page, null);
        Type localVarReturnType = new TypeToken<ListSpacesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSpacesAsync(Integer limit, Integer page, final ApiCallback<ListSpacesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSpacesValidateBeforeCall(limit, page, _callback);
        Type localVarReturnType = new TypeToken<ListSpacesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistSpacesRequest {
        private Integer limit;
        private Integer page;

        private APIlistSpacesRequest() {
        }

        /**
         * Set limit
         * @param limit Number of items to include in the response (optional, default to 25)
         * @return APIlistSpacesRequest
         */
        public APIlistSpacesRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
         * @return APIlistSpacesRequest
         */
        public APIlistSpacesRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Build call for listSpaces
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSpacesCall(limit, page, _callback);
        }

        /**
         * Execute listSpaces request
         * @return ListSpacesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ListSpacesResponse execute() throws ApiException {
            ApiResponse<ListSpacesResponse> localVarResp = listSpacesWithHttpInfo(limit, page);
            return localVarResp.getData();
        }

        /**
         * Execute listSpaces request with HTTP info returned
         * @return ApiResponse&lt;ListSpacesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<ListSpacesResponse> executeWithHttpInfo() throws ApiException {
            return listSpacesWithHttpInfo(limit, page);
        }

        /**
         * Execute listSpaces request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<ListSpacesResponse> _callback) throws ApiException {
            return listSpacesAsync(limit, page, _callback);
        }
    }

    /**
     * List spaces
     * List all spaces in the current enviroment.
     * @return APIlistSpacesRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIlistSpacesRequest listSpaces() {
        return new APIlistSpacesRequest();
    }
    private okhttp3.Call startSpaceBroadcastCall(String SPACE_ID, String BROADCAST_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/spaces/{SPACE_ID}/broadcasts/{BROADCAST_ID}/start"
            .replaceAll("\\{" + "SPACE_ID" + "\\}", localVarApiClient.escapeString(SPACE_ID.toString()))
            .replaceAll("\\{" + "BROADCAST_ID" + "\\}", localVarApiClient.escapeString(BROADCAST_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call startSpaceBroadcastValidateBeforeCall(String SPACE_ID, String BROADCAST_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'SPACE_ID' is set
        if (SPACE_ID == null) {
            throw new ApiException("Missing the required parameter 'SPACE_ID' when calling startSpaceBroadcast(Async)");
        }
        
        // verify the required parameter 'BROADCAST_ID' is set
        if (BROADCAST_ID == null) {
            throw new ApiException("Missing the required parameter 'BROADCAST_ID' when calling startSpaceBroadcast(Async)");
        }
        

        okhttp3.Call localVarCall = startSpaceBroadcastCall(SPACE_ID, BROADCAST_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<StartSpaceBroadcastResponse> startSpaceBroadcastWithHttpInfo(String SPACE_ID, String BROADCAST_ID) throws ApiException {
        okhttp3.Call localVarCall = startSpaceBroadcastValidateBeforeCall(SPACE_ID, BROADCAST_ID, null);
        Type localVarReturnType = new TypeToken<StartSpaceBroadcastResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call startSpaceBroadcastAsync(String SPACE_ID, String BROADCAST_ID, final ApiCallback<StartSpaceBroadcastResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startSpaceBroadcastValidateBeforeCall(SPACE_ID, BROADCAST_ID, _callback);
        Type localVarReturnType = new TypeToken<StartSpaceBroadcastResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIstartSpaceBroadcastRequest {
        private final String SPACE_ID;
        private final String BROADCAST_ID;

        private APIstartSpaceBroadcastRequest(String SPACE_ID, String BROADCAST_ID) {
            this.SPACE_ID = SPACE_ID;
            this.BROADCAST_ID = BROADCAST_ID;
        }

        /**
         * Build call for startSpaceBroadcast
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return startSpaceBroadcastCall(SPACE_ID, BROADCAST_ID, _callback);
        }

        /**
         * Execute startSpaceBroadcast request
         * @return StartSpaceBroadcastResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public StartSpaceBroadcastResponse execute() throws ApiException {
            ApiResponse<StartSpaceBroadcastResponse> localVarResp = startSpaceBroadcastWithHttpInfo(SPACE_ID, BROADCAST_ID);
            return localVarResp.getData();
        }

        /**
         * Execute startSpaceBroadcast request with HTTP info returned
         * @return ApiResponse&lt;StartSpaceBroadcastResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<StartSpaceBroadcastResponse> executeWithHttpInfo() throws ApiException {
            return startSpaceBroadcastWithHttpInfo(SPACE_ID, BROADCAST_ID);
        }

        /**
         * Execute startSpaceBroadcast request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<StartSpaceBroadcastResponse> _callback) throws ApiException {
            return startSpaceBroadcastAsync(SPACE_ID, BROADCAST_ID, _callback);
        }
    }

    /**
     * Start a space broadcast
     * Starts broadcasting a space to the associated destination. Broadcasts can only be started when the space is &#x60;active&#x60; (when there are participants connected).
     * @param SPACE_ID The space ID. (required)
     * @param BROADCAST_ID The broadcast ID. (required)
     * @return APIstartSpaceBroadcastRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIstartSpaceBroadcastRequest startSpaceBroadcast(String SPACE_ID, String BROADCAST_ID) {
        return new APIstartSpaceBroadcastRequest(SPACE_ID, BROADCAST_ID);
    }
    private okhttp3.Call stopSpaceBroadcastCall(String SPACE_ID, String BROADCAST_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/spaces/{SPACE_ID}/broadcasts/{BROADCAST_ID}/stop"
            .replaceAll("\\{" + "SPACE_ID" + "\\}", localVarApiClient.escapeString(SPACE_ID.toString()))
            .replaceAll("\\{" + "BROADCAST_ID" + "\\}", localVarApiClient.escapeString(BROADCAST_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopSpaceBroadcastValidateBeforeCall(String SPACE_ID, String BROADCAST_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'SPACE_ID' is set
        if (SPACE_ID == null) {
            throw new ApiException("Missing the required parameter 'SPACE_ID' when calling stopSpaceBroadcast(Async)");
        }
        
        // verify the required parameter 'BROADCAST_ID' is set
        if (BROADCAST_ID == null) {
            throw new ApiException("Missing the required parameter 'BROADCAST_ID' when calling stopSpaceBroadcast(Async)");
        }
        

        okhttp3.Call localVarCall = stopSpaceBroadcastCall(SPACE_ID, BROADCAST_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<StopSpaceBroadcastResponse> stopSpaceBroadcastWithHttpInfo(String SPACE_ID, String BROADCAST_ID) throws ApiException {
        okhttp3.Call localVarCall = stopSpaceBroadcastValidateBeforeCall(SPACE_ID, BROADCAST_ID, null);
        Type localVarReturnType = new TypeToken<StopSpaceBroadcastResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call stopSpaceBroadcastAsync(String SPACE_ID, String BROADCAST_ID, final ApiCallback<StopSpaceBroadcastResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopSpaceBroadcastValidateBeforeCall(SPACE_ID, BROADCAST_ID, _callback);
        Type localVarReturnType = new TypeToken<StopSpaceBroadcastResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIstopSpaceBroadcastRequest {
        private final String SPACE_ID;
        private final String BROADCAST_ID;

        private APIstopSpaceBroadcastRequest(String SPACE_ID, String BROADCAST_ID) {
            this.SPACE_ID = SPACE_ID;
            this.BROADCAST_ID = BROADCAST_ID;
        }

        /**
         * Build call for stopSpaceBroadcast
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return stopSpaceBroadcastCall(SPACE_ID, BROADCAST_ID, _callback);
        }

        /**
         * Execute stopSpaceBroadcast request
         * @return StopSpaceBroadcastResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public StopSpaceBroadcastResponse execute() throws ApiException {
            ApiResponse<StopSpaceBroadcastResponse> localVarResp = stopSpaceBroadcastWithHttpInfo(SPACE_ID, BROADCAST_ID);
            return localVarResp.getData();
        }

        /**
         * Execute stopSpaceBroadcast request with HTTP info returned
         * @return ApiResponse&lt;StopSpaceBroadcastResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<StopSpaceBroadcastResponse> executeWithHttpInfo() throws ApiException {
            return stopSpaceBroadcastWithHttpInfo(SPACE_ID, BROADCAST_ID);
        }

        /**
         * Execute stopSpaceBroadcast request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<StopSpaceBroadcastResponse> _callback) throws ApiException {
            return stopSpaceBroadcastAsync(SPACE_ID, BROADCAST_ID, _callback);
        }
    }

    /**
     * Stop a space broadcast
     * Stops broadcasting a space, causing the destination live stream to become idle. This API also automatically calls &#x60;complete&#x60; on the destination live stream. Broadcasts are also automatically stopped when a space becomes idle.
     * @param SPACE_ID The space ID. (required)
     * @param BROADCAST_ID The broadcast ID. (required)
     * @return APIstopSpaceBroadcastRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIstopSpaceBroadcastRequest stopSpaceBroadcast(String SPACE_ID, String BROADCAST_ID) {
        return new APIstopSpaceBroadcastRequest(SPACE_ID, BROADCAST_ID);
    }
}
