/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mux.sdk;

import com.mux.ApiCallback;
import com.mux.ApiClient;
import com.mux.ApiException;
import com.mux.ApiResponse;
import com.mux.Configuration;
import com.mux.Pair;
import com.mux.ProgressRequestBody;
import com.mux.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mux.sdk.models.CreateWebInputRequest;
import com.mux.sdk.models.LaunchWebInputResponse;
import com.mux.sdk.models.ListWebInputsResponse;
import com.mux.sdk.models.ReloadWebInputResponse;
import com.mux.sdk.models.ShutdownWebInputResponse;
import com.mux.sdk.models.UpdateWebInputUrlRequest;
import com.mux.sdk.models.WebInputResponse;
// TODO: due to import parsing issues for the RDR type; fix in spec in future
import com.mux.sdk.models.ReferrerDomainRestriction;

import java.lang.reflect.Type;

public class WebInputsApi {
    private ApiClient localVarApiClient;

    public WebInputsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebInputsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call createWebInputCall(CreateWebInputRequest createWebInputRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createWebInputRequest;

        // create path and map variables
        String localVarPath = "/video/v1/web-inputs";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebInputValidateBeforeCall(CreateWebInputRequest createWebInputRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createWebInputRequest' is set
        if (createWebInputRequest == null) {
            throw new ApiException("Missing the required parameter 'createWebInputRequest' when calling createWebInput(Async)");
        }
        

        okhttp3.Call localVarCall = createWebInputCall(createWebInputRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<WebInputResponse> createWebInputWithHttpInfo(CreateWebInputRequest createWebInputRequest) throws ApiException {
        okhttp3.Call localVarCall = createWebInputValidateBeforeCall(createWebInputRequest, null);
        Type localVarReturnType = new TypeToken<WebInputResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createWebInputAsync(CreateWebInputRequest createWebInputRequest, final ApiCallback<WebInputResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebInputValidateBeforeCall(createWebInputRequest, _callback);
        Type localVarReturnType = new TypeToken<WebInputResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateWebInputRequest {
        private final CreateWebInputRequest createWebInputRequest;

        private APIcreateWebInputRequest(CreateWebInputRequest createWebInputRequest) {
            this.createWebInputRequest = createWebInputRequest;
        }

        /**
         * Build call for createWebInput
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Web Input Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createWebInputCall(createWebInputRequest, _callback);
        }

        /**
         * Execute createWebInput request
         * @return WebInputResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Web Input Created </td><td>  -  </td></tr>
         </table>
         */
        public WebInputResponse execute() throws ApiException {
            ApiResponse<WebInputResponse> localVarResp = createWebInputWithHttpInfo(createWebInputRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createWebInput request with HTTP info returned
         * @return ApiResponse&lt;WebInputResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Web Input Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebInputResponse> executeWithHttpInfo() throws ApiException {
            return createWebInputWithHttpInfo(createWebInputRequest);
        }

        /**
         * Execute createWebInput request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Web Input Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebInputResponse> _callback) throws ApiException {
            return createWebInputAsync(createWebInputRequest, _callback);
        }
    }

    /**
     * Create a new Web Input
     * Create a new Web Input
     * @param createWebInputRequest  (required)
     * @return APIcreateWebInputRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Web Input Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateWebInputRequest createWebInput(CreateWebInputRequest createWebInputRequest) {
        return new APIcreateWebInputRequest(createWebInputRequest);
    }
    private okhttp3.Call deleteWebInputCall(String WEB_INPUT_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/web-inputs/{WEB_INPUT_ID}"
            .replaceAll("\\{" + "WEB_INPUT_ID" + "\\}", localVarApiClient.escapeString(WEB_INPUT_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWebInputValidateBeforeCall(String WEB_INPUT_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'WEB_INPUT_ID' is set
        if (WEB_INPUT_ID == null) {
            throw new ApiException("Missing the required parameter 'WEB_INPUT_ID' when calling deleteWebInput(Async)");
        }
        

        okhttp3.Call localVarCall = deleteWebInputCall(WEB_INPUT_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<Void> deleteWebInputWithHttpInfo(String WEB_INPUT_ID) throws ApiException {
        okhttp3.Call localVarCall = deleteWebInputValidateBeforeCall(WEB_INPUT_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteWebInputAsync(String WEB_INPUT_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWebInputValidateBeforeCall(WEB_INPUT_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteWebInputRequest {
        private final String WEB_INPUT_ID;

        private APIdeleteWebInputRequest(String WEB_INPUT_ID) {
            this.WEB_INPUT_ID = WEB_INPUT_ID;
        }

        /**
         * Build call for deleteWebInput
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteWebInputCall(WEB_INPUT_ID, _callback);
        }

        /**
         * Execute deleteWebInput request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteWebInputWithHttpInfo(WEB_INPUT_ID);
        }

        /**
         * Execute deleteWebInput request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteWebInputWithHttpInfo(WEB_INPUT_ID);
        }

        /**
         * Execute deleteWebInput request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteWebInputAsync(WEB_INPUT_ID, _callback);
        }
    }

    /**
     * Delete a Web Input
     * Deletes a Web Input and all its data
     * @param WEB_INPUT_ID The Web Input ID (required)
     * @return APIdeleteWebInputRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteWebInputRequest deleteWebInput(String WEB_INPUT_ID) {
        return new APIdeleteWebInputRequest(WEB_INPUT_ID);
    }
    private okhttp3.Call getWebInputCall(String WEB_INPUT_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/web-inputs/{WEB_INPUT_ID}"
            .replaceAll("\\{" + "WEB_INPUT_ID" + "\\}", localVarApiClient.escapeString(WEB_INPUT_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebInputValidateBeforeCall(String WEB_INPUT_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'WEB_INPUT_ID' is set
        if (WEB_INPUT_ID == null) {
            throw new ApiException("Missing the required parameter 'WEB_INPUT_ID' when calling getWebInput(Async)");
        }
        

        okhttp3.Call localVarCall = getWebInputCall(WEB_INPUT_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<WebInputResponse> getWebInputWithHttpInfo(String WEB_INPUT_ID) throws ApiException {
        okhttp3.Call localVarCall = getWebInputValidateBeforeCall(WEB_INPUT_ID, null);
        Type localVarReturnType = new TypeToken<WebInputResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWebInputAsync(String WEB_INPUT_ID, final ApiCallback<WebInputResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebInputValidateBeforeCall(WEB_INPUT_ID, _callback);
        Type localVarReturnType = new TypeToken<WebInputResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetWebInputRequest {
        private final String WEB_INPUT_ID;

        private APIgetWebInputRequest(String WEB_INPUT_ID) {
            this.WEB_INPUT_ID = WEB_INPUT_ID;
        }

        /**
         * Build call for getWebInput
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWebInputCall(WEB_INPUT_ID, _callback);
        }

        /**
         * Execute getWebInput request
         * @return WebInputResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebInputResponse execute() throws ApiException {
            ApiResponse<WebInputResponse> localVarResp = getWebInputWithHttpInfo(WEB_INPUT_ID);
            return localVarResp.getData();
        }

        /**
         * Execute getWebInput request with HTTP info returned
         * @return ApiResponse&lt;WebInputResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebInputResponse> executeWithHttpInfo() throws ApiException {
            return getWebInputWithHttpInfo(WEB_INPUT_ID);
        }

        /**
         * Execute getWebInput request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebInputResponse> _callback) throws ApiException {
            return getWebInputAsync(WEB_INPUT_ID, _callback);
        }
    }

    /**
     * Retrieve a Web Input
     * Retrieve a single Web Input&#39;s info
     * @param WEB_INPUT_ID The Web Input ID (required)
     * @return APIgetWebInputRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetWebInputRequest getWebInput(String WEB_INPUT_ID) {
        return new APIgetWebInputRequest(WEB_INPUT_ID);
    }
    private okhttp3.Call launchWebInputCall(String WEB_INPUT_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/web-inputs/{WEB_INPUT_ID}/launch"
            .replaceAll("\\{" + "WEB_INPUT_ID" + "\\}", localVarApiClient.escapeString(WEB_INPUT_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call launchWebInputValidateBeforeCall(String WEB_INPUT_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'WEB_INPUT_ID' is set
        if (WEB_INPUT_ID == null) {
            throw new ApiException("Missing the required parameter 'WEB_INPUT_ID' when calling launchWebInput(Async)");
        }
        

        okhttp3.Call localVarCall = launchWebInputCall(WEB_INPUT_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<LaunchWebInputResponse> launchWebInputWithHttpInfo(String WEB_INPUT_ID) throws ApiException {
        okhttp3.Call localVarCall = launchWebInputValidateBeforeCall(WEB_INPUT_ID, null);
        Type localVarReturnType = new TypeToken<LaunchWebInputResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call launchWebInputAsync(String WEB_INPUT_ID, final ApiCallback<LaunchWebInputResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = launchWebInputValidateBeforeCall(WEB_INPUT_ID, _callback);
        Type localVarReturnType = new TypeToken<LaunchWebInputResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlaunchWebInputRequest {
        private final String WEB_INPUT_ID;

        private APIlaunchWebInputRequest(String WEB_INPUT_ID) {
            this.WEB_INPUT_ID = WEB_INPUT_ID;
        }

        /**
         * Build call for launchWebInput
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return launchWebInputCall(WEB_INPUT_ID, _callback);
        }

        /**
         * Execute launchWebInput request
         * @return LaunchWebInputResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LaunchWebInputResponse execute() throws ApiException {
            ApiResponse<LaunchWebInputResponse> localVarResp = launchWebInputWithHttpInfo(WEB_INPUT_ID);
            return localVarResp.getData();
        }

        /**
         * Execute launchWebInput request with HTTP info returned
         * @return ApiResponse&lt;LaunchWebInputResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LaunchWebInputResponse> executeWithHttpInfo() throws ApiException {
            return launchWebInputWithHttpInfo(WEB_INPUT_ID);
        }

        /**
         * Execute launchWebInput request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LaunchWebInputResponse> _callback) throws ApiException {
            return launchWebInputAsync(WEB_INPUT_ID, _callback);
        }
    }

    /**
     * Launch a Web Input
     * Launches the browsers instance, loads the URL specified, and then starts streaming to the specified Live Stream.
     * @param WEB_INPUT_ID The Web Input ID (required)
     * @return APIlaunchWebInputRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIlaunchWebInputRequest launchWebInput(String WEB_INPUT_ID) {
        return new APIlaunchWebInputRequest(WEB_INPUT_ID);
    }
    private okhttp3.Call listWebInputsCall(Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/web-inputs";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWebInputsValidateBeforeCall(Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listWebInputsCall(limit, page, _callback);
        return localVarCall;

    }


    private ApiResponse<ListWebInputsResponse> listWebInputsWithHttpInfo(Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listWebInputsValidateBeforeCall(limit, page, null);
        Type localVarReturnType = new TypeToken<ListWebInputsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWebInputsAsync(Integer limit, Integer page, final ApiCallback<ListWebInputsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWebInputsValidateBeforeCall(limit, page, _callback);
        Type localVarReturnType = new TypeToken<ListWebInputsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistWebInputsRequest {
        private Integer limit;
        private Integer page;

        private APIlistWebInputsRequest() {
        }

        /**
         * Set limit
         * @param limit Number of items to include in the response (optional, default to 25)
         * @return APIlistWebInputsRequest
         */
        public APIlistWebInputsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
         * @return APIlistWebInputsRequest
         */
        public APIlistWebInputsRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Build call for listWebInputs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWebInputsCall(limit, page, _callback);
        }

        /**
         * Execute listWebInputs request
         * @return ListWebInputsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ListWebInputsResponse execute() throws ApiException {
            ApiResponse<ListWebInputsResponse> localVarResp = listWebInputsWithHttpInfo(limit, page);
            return localVarResp.getData();
        }

        /**
         * Execute listWebInputs request with HTTP info returned
         * @return ApiResponse&lt;ListWebInputsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListWebInputsResponse> executeWithHttpInfo() throws ApiException {
            return listWebInputsWithHttpInfo(limit, page);
        }

        /**
         * Execute listWebInputs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListWebInputsResponse> _callback) throws ApiException {
            return listWebInputsAsync(limit, page, _callback);
        }
    }

    /**
     * List Web Inputs
     * List Web Inputs
     * @return APIlistWebInputsRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIlistWebInputsRequest listWebInputs() {
        return new APIlistWebInputsRequest();
    }
    private okhttp3.Call reloadWebInputCall(String WEB_INPUT_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/web-inputs/{WEB_INPUT_ID}/reload"
            .replaceAll("\\{" + "WEB_INPUT_ID" + "\\}", localVarApiClient.escapeString(WEB_INPUT_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reloadWebInputValidateBeforeCall(String WEB_INPUT_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'WEB_INPUT_ID' is set
        if (WEB_INPUT_ID == null) {
            throw new ApiException("Missing the required parameter 'WEB_INPUT_ID' when calling reloadWebInput(Async)");
        }
        

        okhttp3.Call localVarCall = reloadWebInputCall(WEB_INPUT_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<ReloadWebInputResponse> reloadWebInputWithHttpInfo(String WEB_INPUT_ID) throws ApiException {
        okhttp3.Call localVarCall = reloadWebInputValidateBeforeCall(WEB_INPUT_ID, null);
        Type localVarReturnType = new TypeToken<ReloadWebInputResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call reloadWebInputAsync(String WEB_INPUT_ID, final ApiCallback<ReloadWebInputResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reloadWebInputValidateBeforeCall(WEB_INPUT_ID, _callback);
        Type localVarReturnType = new TypeToken<ReloadWebInputResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIreloadWebInputRequest {
        private final String WEB_INPUT_ID;

        private APIreloadWebInputRequest(String WEB_INPUT_ID) {
            this.WEB_INPUT_ID = WEB_INPUT_ID;
        }

        /**
         * Build call for reloadWebInput
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return reloadWebInputCall(WEB_INPUT_ID, _callback);
        }

        /**
         * Execute reloadWebInput request
         * @return ReloadWebInputResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ReloadWebInputResponse execute() throws ApiException {
            ApiResponse<ReloadWebInputResponse> localVarResp = reloadWebInputWithHttpInfo(WEB_INPUT_ID);
            return localVarResp.getData();
        }

        /**
         * Execute reloadWebInput request with HTTP info returned
         * @return ApiResponse&lt;ReloadWebInputResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReloadWebInputResponse> executeWithHttpInfo() throws ApiException {
            return reloadWebInputWithHttpInfo(WEB_INPUT_ID);
        }

        /**
         * Execute reloadWebInput request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReloadWebInputResponse> _callback) throws ApiException {
            return reloadWebInputAsync(WEB_INPUT_ID, _callback);
        }
    }

    /**
     * Reload a Web Input
     * Reloads the page that a Web Input is displaying.  Note: Using this when the Web Input is streaming will display the page reloading. 
     * @param WEB_INPUT_ID The Web Input ID (required)
     * @return APIreloadWebInputRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIreloadWebInputRequest reloadWebInput(String WEB_INPUT_ID) {
        return new APIreloadWebInputRequest(WEB_INPUT_ID);
    }
    private okhttp3.Call shutdownWebInputCall(String WEB_INPUT_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/web-inputs/{WEB_INPUT_ID}/shutdown"
            .replaceAll("\\{" + "WEB_INPUT_ID" + "\\}", localVarApiClient.escapeString(WEB_INPUT_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shutdownWebInputValidateBeforeCall(String WEB_INPUT_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'WEB_INPUT_ID' is set
        if (WEB_INPUT_ID == null) {
            throw new ApiException("Missing the required parameter 'WEB_INPUT_ID' when calling shutdownWebInput(Async)");
        }
        

        okhttp3.Call localVarCall = shutdownWebInputCall(WEB_INPUT_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<ShutdownWebInputResponse> shutdownWebInputWithHttpInfo(String WEB_INPUT_ID) throws ApiException {
        okhttp3.Call localVarCall = shutdownWebInputValidateBeforeCall(WEB_INPUT_ID, null);
        Type localVarReturnType = new TypeToken<ShutdownWebInputResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call shutdownWebInputAsync(String WEB_INPUT_ID, final ApiCallback<ShutdownWebInputResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = shutdownWebInputValidateBeforeCall(WEB_INPUT_ID, _callback);
        Type localVarReturnType = new TypeToken<ShutdownWebInputResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIshutdownWebInputRequest {
        private final String WEB_INPUT_ID;

        private APIshutdownWebInputRequest(String WEB_INPUT_ID) {
            this.WEB_INPUT_ID = WEB_INPUT_ID;
        }

        /**
         * Build call for shutdownWebInput
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return shutdownWebInputCall(WEB_INPUT_ID, _callback);
        }

        /**
         * Execute shutdownWebInput request
         * @return ShutdownWebInputResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ShutdownWebInputResponse execute() throws ApiException {
            ApiResponse<ShutdownWebInputResponse> localVarResp = shutdownWebInputWithHttpInfo(WEB_INPUT_ID);
            return localVarResp.getData();
        }

        /**
         * Execute shutdownWebInput request with HTTP info returned
         * @return ApiResponse&lt;ShutdownWebInputResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShutdownWebInputResponse> executeWithHttpInfo() throws ApiException {
            return shutdownWebInputWithHttpInfo(WEB_INPUT_ID);
        }

        /**
         * Execute shutdownWebInput request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShutdownWebInputResponse> _callback) throws ApiException {
            return shutdownWebInputAsync(WEB_INPUT_ID, _callback);
        }
    }

    /**
     * Shut down a Web Input
     * Ends streaming to the specified Live Stream, and then shuts down the Web Input browser instance.
     * @param WEB_INPUT_ID The Web Input ID (required)
     * @return APIshutdownWebInputRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIshutdownWebInputRequest shutdownWebInput(String WEB_INPUT_ID) {
        return new APIshutdownWebInputRequest(WEB_INPUT_ID);
    }
    private okhttp3.Call updateWebInputUrlCall(String WEB_INPUT_ID, UpdateWebInputUrlRequest updateWebInputUrlRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateWebInputUrlRequest;

        // create path and map variables
        String localVarPath = "/video/v1/web-inputs/{WEB_INPUT_ID}/url"
            .replaceAll("\\{" + "WEB_INPUT_ID" + "\\}", localVarApiClient.escapeString(WEB_INPUT_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebInputUrlValidateBeforeCall(String WEB_INPUT_ID, UpdateWebInputUrlRequest updateWebInputUrlRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'WEB_INPUT_ID' is set
        if (WEB_INPUT_ID == null) {
            throw new ApiException("Missing the required parameter 'WEB_INPUT_ID' when calling updateWebInputUrl(Async)");
        }
        
        // verify the required parameter 'updateWebInputUrlRequest' is set
        if (updateWebInputUrlRequest == null) {
            throw new ApiException("Missing the required parameter 'updateWebInputUrlRequest' when calling updateWebInputUrl(Async)");
        }
        

        okhttp3.Call localVarCall = updateWebInputUrlCall(WEB_INPUT_ID, updateWebInputUrlRequest, _callback);
        return localVarCall;

    }


    private ApiResponse<WebInputResponse> updateWebInputUrlWithHttpInfo(String WEB_INPUT_ID, UpdateWebInputUrlRequest updateWebInputUrlRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWebInputUrlValidateBeforeCall(WEB_INPUT_ID, updateWebInputUrlRequest, null);
        Type localVarReturnType = new TypeToken<WebInputResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWebInputUrlAsync(String WEB_INPUT_ID, UpdateWebInputUrlRequest updateWebInputUrlRequest, final ApiCallback<WebInputResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebInputUrlValidateBeforeCall(WEB_INPUT_ID, updateWebInputUrlRequest, _callback);
        Type localVarReturnType = new TypeToken<WebInputResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateWebInputUrlRequest {
        private final String WEB_INPUT_ID;
        private final UpdateWebInputUrlRequest updateWebInputUrlRequest;

        private APIupdateWebInputUrlRequest(String WEB_INPUT_ID, UpdateWebInputUrlRequest updateWebInputUrlRequest) {
            this.WEB_INPUT_ID = WEB_INPUT_ID;
            this.updateWebInputUrlRequest = updateWebInputUrlRequest;
        }

        /**
         * Build call for updateWebInputUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateWebInputUrlCall(WEB_INPUT_ID, updateWebInputUrlRequest, _callback);
        }

        /**
         * Execute updateWebInputUrl request
         * @return WebInputResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebInputResponse execute() throws ApiException {
            ApiResponse<WebInputResponse> localVarResp = updateWebInputUrlWithHttpInfo(WEB_INPUT_ID, updateWebInputUrlRequest);
            return localVarResp.getData();
        }

        /**
         * Execute updateWebInputUrl request with HTTP info returned
         * @return ApiResponse&lt;WebInputResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebInputResponse> executeWithHttpInfo() throws ApiException {
            return updateWebInputUrlWithHttpInfo(WEB_INPUT_ID, updateWebInputUrlRequest);
        }

        /**
         * Execute updateWebInputUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebInputResponse> _callback) throws ApiException {
            return updateWebInputUrlAsync(WEB_INPUT_ID, updateWebInputUrlRequest, _callback);
        }
    }

    /**
     * Update Web Input URL
     * Changes the URL that a Web Input loads when it launches.  Note: This can only be called when the Web Input is idle. 
     * @param WEB_INPUT_ID The Web Input ID (required)
     * @param updateWebInputUrlRequest  (required)
     * @return APIupdateWebInputUrlRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateWebInputUrlRequest updateWebInputUrl(String WEB_INPUT_ID, UpdateWebInputUrlRequest updateWebInputUrlRequest) {
        return new APIupdateWebInputUrlRequest(WEB_INPUT_ID, updateWebInputUrlRequest);
    }
}
