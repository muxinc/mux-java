/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mux.sdk;

import com.mux.ApiCallback;
import com.mux.ApiClient;
import com.mux.ApiException;
import com.mux.ApiResponse;
import com.mux.Configuration;
import com.mux.Pair;
import com.mux.ProgressRequestBody;
import com.mux.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mux.sdk.models.AnnotationInput;
import com.mux.sdk.models.AnnotationResponse;
import com.mux.sdk.models.ListAnnotationsResponse;
// TODO: due to import parsing issues for the RDR type; fix in spec in future
import com.mux.sdk.models.ReferrerDomainRestriction;

import java.lang.reflect.Type;

public class AnnotationsApi {
    private ApiClient localVarApiClient;

    public AnnotationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnnotationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call createAnnotationCall(AnnotationInput annotationInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = annotationInput;

        // create path and map variables
        String localVarPath = "/data/v1/annotations";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAnnotationValidateBeforeCall(AnnotationInput annotationInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'annotationInput' is set
        if (annotationInput == null) {
            throw new ApiException("Missing the required parameter 'annotationInput' when calling createAnnotation(Async)");
        }
        

        okhttp3.Call localVarCall = createAnnotationCall(annotationInput, _callback);
        return localVarCall;

    }


    private ApiResponse<AnnotationResponse> createAnnotationWithHttpInfo(AnnotationInput annotationInput) throws ApiException {
        okhttp3.Call localVarCall = createAnnotationValidateBeforeCall(annotationInput, null);
        Type localVarReturnType = new TypeToken<AnnotationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAnnotationAsync(AnnotationInput annotationInput, final ApiCallback<AnnotationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAnnotationValidateBeforeCall(annotationInput, _callback);
        Type localVarReturnType = new TypeToken<AnnotationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateAnnotationRequest {
        private final AnnotationInput annotationInput;

        private APIcreateAnnotationRequest(AnnotationInput annotationInput) {
            this.annotationInput = annotationInput;
        }

        /**
         * Build call for createAnnotation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createAnnotationCall(annotationInput, _callback);
        }

        /**
         * Execute createAnnotation request
         * @return AnnotationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public AnnotationResponse execute() throws ApiException {
            ApiResponse<AnnotationResponse> localVarResp = createAnnotationWithHttpInfo(annotationInput);
            return localVarResp.getData();
        }

        /**
         * Execute createAnnotation request with HTTP info returned
         * @return ApiResponse&lt;AnnotationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnnotationResponse> executeWithHttpInfo() throws ApiException {
            return createAnnotationWithHttpInfo(annotationInput);
        }

        /**
         * Execute createAnnotation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnnotationResponse> _callback) throws ApiException {
            return createAnnotationAsync(annotationInput, _callback);
        }
    }

    /**
     * Create Annotation
     * Creates a new annotation.
     * @param annotationInput  (required)
     * @return APIcreateAnnotationRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateAnnotationRequest createAnnotation(AnnotationInput annotationInput) {
        return new APIcreateAnnotationRequest(annotationInput);
    }
    private okhttp3.Call deleteAnnotationCall(java.util.UUID ANNOTATION_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/annotations/{ANNOTATION_ID}"
            .replaceAll("\\{" + "ANNOTATION_ID" + "\\}", localVarApiClient.escapeString(ANNOTATION_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAnnotationValidateBeforeCall(java.util.UUID ANNOTATION_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ANNOTATION_ID' is set
        if (ANNOTATION_ID == null) {
            throw new ApiException("Missing the required parameter 'ANNOTATION_ID' when calling deleteAnnotation(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAnnotationCall(ANNOTATION_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<Void> deleteAnnotationWithHttpInfo(java.util.UUID ANNOTATION_ID) throws ApiException {
        okhttp3.Call localVarCall = deleteAnnotationValidateBeforeCall(ANNOTATION_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAnnotationAsync(java.util.UUID ANNOTATION_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAnnotationValidateBeforeCall(ANNOTATION_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteAnnotationRequest {
        private final java.util.UUID ANNOTATION_ID;

        private APIdeleteAnnotationRequest(java.util.UUID ANNOTATION_ID) {
            this.ANNOTATION_ID = ANNOTATION_ID;
        }

        /**
         * Build call for deleteAnnotation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAnnotationCall(ANNOTATION_ID, _callback);
        }

        /**
         * Execute deleteAnnotation request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAnnotationWithHttpInfo(ANNOTATION_ID);
        }

        /**
         * Execute deleteAnnotation request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAnnotationWithHttpInfo(ANNOTATION_ID);
        }

        /**
         * Execute deleteAnnotation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAnnotationAsync(ANNOTATION_ID, _callback);
        }
    }

    /**
     * Delete Annotation
     * Deletes an annotation.
     * @param ANNOTATION_ID The annotation ID (required)
     * @return APIdeleteAnnotationRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAnnotationRequest deleteAnnotation(java.util.UUID ANNOTATION_ID) {
        return new APIdeleteAnnotationRequest(ANNOTATION_ID);
    }
    private okhttp3.Call getAnnotationCall(java.util.UUID ANNOTATION_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/annotations/{ANNOTATION_ID}"
            .replaceAll("\\{" + "ANNOTATION_ID" + "\\}", localVarApiClient.escapeString(ANNOTATION_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnnotationValidateBeforeCall(java.util.UUID ANNOTATION_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ANNOTATION_ID' is set
        if (ANNOTATION_ID == null) {
            throw new ApiException("Missing the required parameter 'ANNOTATION_ID' when calling getAnnotation(Async)");
        }
        

        okhttp3.Call localVarCall = getAnnotationCall(ANNOTATION_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<AnnotationResponse> getAnnotationWithHttpInfo(java.util.UUID ANNOTATION_ID) throws ApiException {
        okhttp3.Call localVarCall = getAnnotationValidateBeforeCall(ANNOTATION_ID, null);
        Type localVarReturnType = new TypeToken<AnnotationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAnnotationAsync(java.util.UUID ANNOTATION_ID, final ApiCallback<AnnotationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnnotationValidateBeforeCall(ANNOTATION_ID, _callback);
        Type localVarReturnType = new TypeToken<AnnotationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAnnotationRequest {
        private final java.util.UUID ANNOTATION_ID;

        private APIgetAnnotationRequest(java.util.UUID ANNOTATION_ID) {
            this.ANNOTATION_ID = ANNOTATION_ID;
        }

        /**
         * Build call for getAnnotation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAnnotationCall(ANNOTATION_ID, _callback);
        }

        /**
         * Execute getAnnotation request
         * @return AnnotationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AnnotationResponse execute() throws ApiException {
            ApiResponse<AnnotationResponse> localVarResp = getAnnotationWithHttpInfo(ANNOTATION_ID);
            return localVarResp.getData();
        }

        /**
         * Execute getAnnotation request with HTTP info returned
         * @return ApiResponse&lt;AnnotationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnnotationResponse> executeWithHttpInfo() throws ApiException {
            return getAnnotationWithHttpInfo(ANNOTATION_ID);
        }

        /**
         * Execute getAnnotation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnnotationResponse> _callback) throws ApiException {
            return getAnnotationAsync(ANNOTATION_ID, _callback);
        }
    }

    /**
     * Get Annotation
     * Returns the details of a specific annotation.
     * @param ANNOTATION_ID The annotation ID (required)
     * @return APIgetAnnotationRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAnnotationRequest getAnnotation(java.util.UUID ANNOTATION_ID) {
        return new APIgetAnnotationRequest(ANNOTATION_ID);
    }
    private okhttp3.Call listAnnotationsCall(Integer limit, Integer page, String orderDirection, java.util.List<String> timeframe, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/annotations";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (orderDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_direction", orderDirection));
        }

        if (timeframe != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "timeframe[]", timeframe));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAnnotationsValidateBeforeCall(Integer limit, Integer page, String orderDirection, java.util.List<String> timeframe, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listAnnotationsCall(limit, page, orderDirection, timeframe, _callback);
        return localVarCall;

    }


    private ApiResponse<ListAnnotationsResponse> listAnnotationsWithHttpInfo(Integer limit, Integer page, String orderDirection, java.util.List<String> timeframe) throws ApiException {
        okhttp3.Call localVarCall = listAnnotationsValidateBeforeCall(limit, page, orderDirection, timeframe, null);
        Type localVarReturnType = new TypeToken<ListAnnotationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAnnotationsAsync(Integer limit, Integer page, String orderDirection, java.util.List<String> timeframe, final ApiCallback<ListAnnotationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAnnotationsValidateBeforeCall(limit, page, orderDirection, timeframe, _callback);
        Type localVarReturnType = new TypeToken<ListAnnotationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistAnnotationsRequest {
        private Integer limit;
        private Integer page;
        private String orderDirection;
        private java.util.List<String> timeframe;

        private APIlistAnnotationsRequest() {
        }

        /**
         * Set limit
         * @param limit Number of items to include in the response (optional, default to 25)
         * @return APIlistAnnotationsRequest
         */
        public APIlistAnnotationsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
         * @return APIlistAnnotationsRequest
         */
        public APIlistAnnotationsRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set orderDirection
         * @param orderDirection Sort order. (optional)
         * @return APIlistAnnotationsRequest
         */
        public APIlistAnnotationsRequest orderDirection(String orderDirection) {
            this.orderDirection = orderDirection;
            return this;
        }

        /**
         * Set timeframe
         * @param timeframe Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;).  Accepted formats are...    * array of epoch timestamps e.g. &#x60;timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600&#x60;   * duration string e.g. &#x60;timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days&#x60;  (optional)
         * @return APIlistAnnotationsRequest
         */
        public APIlistAnnotationsRequest timeframe(java.util.List<String> timeframe) {
            this.timeframe = timeframe;
            return this;
        }

        /**
         * Build call for listAnnotations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAnnotationsCall(limit, page, orderDirection, timeframe, _callback);
        }

        /**
         * Execute listAnnotations request
         * @return ListAnnotationsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ListAnnotationsResponse execute() throws ApiException {
            ApiResponse<ListAnnotationsResponse> localVarResp = listAnnotationsWithHttpInfo(limit, page, orderDirection, timeframe);
            return localVarResp.getData();
        }

        /**
         * Execute listAnnotations request with HTTP info returned
         * @return ApiResponse&lt;ListAnnotationsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListAnnotationsResponse> executeWithHttpInfo() throws ApiException {
            return listAnnotationsWithHttpInfo(limit, page, orderDirection, timeframe);
        }

        /**
         * Execute listAnnotations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListAnnotationsResponse> _callback) throws ApiException {
            return listAnnotationsAsync(limit, page, orderDirection, timeframe, _callback);
        }
    }

    /**
     * List Annotations
     * Returns a list of annotations.
     * @return APIlistAnnotationsRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIlistAnnotationsRequest listAnnotations() {
        return new APIlistAnnotationsRequest();
    }
    private okhttp3.Call updateAnnotationCall(java.util.UUID ANNOTATION_ID, AnnotationInput annotationInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = annotationInput;

        // create path and map variables
        String localVarPath = "/data/v1/annotations/{ANNOTATION_ID}"
            .replaceAll("\\{" + "ANNOTATION_ID" + "\\}", localVarApiClient.escapeString(ANNOTATION_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAnnotationValidateBeforeCall(java.util.UUID ANNOTATION_ID, AnnotationInput annotationInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ANNOTATION_ID' is set
        if (ANNOTATION_ID == null) {
            throw new ApiException("Missing the required parameter 'ANNOTATION_ID' when calling updateAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationInput' is set
        if (annotationInput == null) {
            throw new ApiException("Missing the required parameter 'annotationInput' when calling updateAnnotation(Async)");
        }
        

        okhttp3.Call localVarCall = updateAnnotationCall(ANNOTATION_ID, annotationInput, _callback);
        return localVarCall;

    }


    private ApiResponse<AnnotationResponse> updateAnnotationWithHttpInfo(java.util.UUID ANNOTATION_ID, AnnotationInput annotationInput) throws ApiException {
        okhttp3.Call localVarCall = updateAnnotationValidateBeforeCall(ANNOTATION_ID, annotationInput, null);
        Type localVarReturnType = new TypeToken<AnnotationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAnnotationAsync(java.util.UUID ANNOTATION_ID, AnnotationInput annotationInput, final ApiCallback<AnnotationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAnnotationValidateBeforeCall(ANNOTATION_ID, annotationInput, _callback);
        Type localVarReturnType = new TypeToken<AnnotationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateAnnotationRequest {
        private final java.util.UUID ANNOTATION_ID;
        private final AnnotationInput annotationInput;

        private APIupdateAnnotationRequest(java.util.UUID ANNOTATION_ID, AnnotationInput annotationInput) {
            this.ANNOTATION_ID = ANNOTATION_ID;
            this.annotationInput = annotationInput;
        }

        /**
         * Build call for updateAnnotation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateAnnotationCall(ANNOTATION_ID, annotationInput, _callback);
        }

        /**
         * Execute updateAnnotation request
         * @return AnnotationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AnnotationResponse execute() throws ApiException {
            ApiResponse<AnnotationResponse> localVarResp = updateAnnotationWithHttpInfo(ANNOTATION_ID, annotationInput);
            return localVarResp.getData();
        }

        /**
         * Execute updateAnnotation request with HTTP info returned
         * @return ApiResponse&lt;AnnotationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AnnotationResponse> executeWithHttpInfo() throws ApiException {
            return updateAnnotationWithHttpInfo(ANNOTATION_ID, annotationInput);
        }

        /**
         * Execute updateAnnotation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AnnotationResponse> _callback) throws ApiException {
            return updateAnnotationAsync(ANNOTATION_ID, annotationInput, _callback);
        }
    }

    /**
     * Update Annotation
     * Updates an existing annotation.
     * @param ANNOTATION_ID The annotation ID (required)
     * @param annotationInput  (required)
     * @return APIupdateAnnotationRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateAnnotationRequest updateAnnotation(java.util.UUID ANNOTATION_ID, AnnotationInput annotationInput) {
        return new APIupdateAnnotationRequest(ANNOTATION_ID, annotationInput);
    }
}
