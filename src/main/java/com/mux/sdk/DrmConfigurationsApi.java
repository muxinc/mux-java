/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mux.sdk;

import com.mux.ApiCallback;
import com.mux.ApiClient;
import com.mux.ApiException;
import com.mux.ApiResponse;
import com.mux.Configuration;
import com.mux.Pair;
import com.mux.ProgressRequestBody;
import com.mux.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mux.sdk.models.DRMConfigurationResponse;
import com.mux.sdk.models.ListDRMConfigurationsResponse;
// TODO: due to import parsing issues for the RDR type; fix in spec in future
import com.mux.sdk.models.ReferrerDomainRestriction;

import java.lang.reflect.Type;

public class DrmConfigurationsApi {
    private ApiClient localVarApiClient;

    public DrmConfigurationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DrmConfigurationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call getDrmConfigurationCall(String DRM_CONFIGURATION_ID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/drm-configurations/{DRM_CONFIGURATION_ID}"
            .replaceAll("\\{" + "DRM_CONFIGURATION_ID" + "\\}", localVarApiClient.escapeString(DRM_CONFIGURATION_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDrmConfigurationValidateBeforeCall(String DRM_CONFIGURATION_ID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'DRM_CONFIGURATION_ID' is set
        if (DRM_CONFIGURATION_ID == null) {
            throw new ApiException("Missing the required parameter 'DRM_CONFIGURATION_ID' when calling getDrmConfiguration(Async)");
        }
        

        okhttp3.Call localVarCall = getDrmConfigurationCall(DRM_CONFIGURATION_ID, _callback);
        return localVarCall;

    }


    private ApiResponse<DRMConfigurationResponse> getDrmConfigurationWithHttpInfo(String DRM_CONFIGURATION_ID) throws ApiException {
        okhttp3.Call localVarCall = getDrmConfigurationValidateBeforeCall(DRM_CONFIGURATION_ID, null);
        Type localVarReturnType = new TypeToken<DRMConfigurationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDrmConfigurationAsync(String DRM_CONFIGURATION_ID, final ApiCallback<DRMConfigurationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDrmConfigurationValidateBeforeCall(DRM_CONFIGURATION_ID, _callback);
        Type localVarReturnType = new TypeToken<DRMConfigurationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetDrmConfigurationRequest {
        private final String DRM_CONFIGURATION_ID;

        private APIgetDrmConfigurationRequest(String DRM_CONFIGURATION_ID) {
            this.DRM_CONFIGURATION_ID = DRM_CONFIGURATION_ID;
        }

        /**
         * Build call for getDrmConfiguration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDrmConfigurationCall(DRM_CONFIGURATION_ID, _callback);
        }

        /**
         * Execute getDrmConfiguration request
         * @return DRMConfigurationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DRMConfigurationResponse execute() throws ApiException {
            ApiResponse<DRMConfigurationResponse> localVarResp = getDrmConfigurationWithHttpInfo(DRM_CONFIGURATION_ID);
            return localVarResp.getData();
        }

        /**
         * Execute getDrmConfiguration request with HTTP info returned
         * @return ApiResponse&lt;DRMConfigurationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DRMConfigurationResponse> executeWithHttpInfo() throws ApiException {
            return getDrmConfigurationWithHttpInfo(DRM_CONFIGURATION_ID);
        }

        /**
         * Execute getDrmConfiguration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DRMConfigurationResponse> _callback) throws ApiException {
            return getDrmConfigurationAsync(DRM_CONFIGURATION_ID, _callback);
        }
    }

    /**
     * Retrieve a DRM Configuration
     * Retrieves a single DRM Configuration.
     * @param DRM_CONFIGURATION_ID The DRM Configuration ID. (required)
     * @return APIgetDrmConfigurationRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetDrmConfigurationRequest getDrmConfiguration(String DRM_CONFIGURATION_ID) {
        return new APIgetDrmConfigurationRequest(DRM_CONFIGURATION_ID);
    }
    private okhttp3.Call listDrmConfigurationsCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/drm-configurations";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDrmConfigurationsValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listDrmConfigurationsCall(page, limit, _callback);
        return localVarCall;

    }


    private ApiResponse<ListDRMConfigurationsResponse> listDrmConfigurationsWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listDrmConfigurationsValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<ListDRMConfigurationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDrmConfigurationsAsync(Integer page, Integer limit, final ApiCallback<ListDRMConfigurationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDrmConfigurationsValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<ListDRMConfigurationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistDrmConfigurationsRequest {
        private Integer page;
        private Integer limit;

        private APIlistDrmConfigurationsRequest() {
        }

        /**
         * Set page
         * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
         * @return APIlistDrmConfigurationsRequest
         */
        public APIlistDrmConfigurationsRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set limit
         * @param limit Number of items to include in the response (optional, default to 25)
         * @return APIlistDrmConfigurationsRequest
         */
        public APIlistDrmConfigurationsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for listDrmConfigurations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDrmConfigurationsCall(page, limit, _callback);
        }

        /**
         * Execute listDrmConfigurations request
         * @return ListDRMConfigurationsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ListDRMConfigurationsResponse execute() throws ApiException {
            ApiResponse<ListDRMConfigurationsResponse> localVarResp = listDrmConfigurationsWithHttpInfo(page, limit);
            return localVarResp.getData();
        }

        /**
         * Execute listDrmConfigurations request with HTTP info returned
         * @return ApiResponse&lt;ListDRMConfigurationsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListDRMConfigurationsResponse> executeWithHttpInfo() throws ApiException {
            return listDrmConfigurationsWithHttpInfo(page, limit);
        }

        /**
         * Execute listDrmConfigurations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListDRMConfigurationsResponse> _callback) throws ApiException {
            return listDrmConfigurationsAsync(page, limit, _callback);
        }
    }

    /**
     * List DRM Configurations
     * Returns a list of DRM Configurations
     * @return APIlistDrmConfigurationsRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIlistDrmConfigurationsRequest listDrmConfigurations() {
        return new APIlistDrmConfigurationsRequest();
    }
}
