/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mux.sdk;

import com.mux.ApiCallback;
import com.mux.ApiClient;
import com.mux.ApiException;
import com.mux.ApiResponse;
import com.mux.Configuration;
import com.mux.Pair;
import com.mux.ProgressRequestBody;
import com.mux.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mux.sdk.models.GetMonitoringBreakdownResponse;
import com.mux.sdk.models.GetMonitoringHistogramTimeseriesResponse;
import com.mux.sdk.models.GetMonitoringTimeseriesResponse;
import com.mux.sdk.models.ListMonitoringDimensionsResponse;
import com.mux.sdk.models.ListMonitoringMetricsResponse;
// TODO: due to import parsing issues for the RDR type; fix in spec in future
import com.mux.sdk.models.ReferrerDomainRestriction;

import java.lang.reflect.Type;

public class MonitoringApi {
    private ApiClient localVarApiClient;

    public MonitoringApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MonitoringApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call getMonitoringBreakdownCall(String MONITORING_METRIC_ID, String dimension, Integer timestamp, java.util.List<String> filters, String orderBy, String orderDirection, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/monitoring/metrics/{MONITORING_METRIC_ID}/breakdown"
            .replaceAll("\\{" + "MONITORING_METRIC_ID" + "\\}", localVarApiClient.escapeString(MONITORING_METRIC_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (dimension != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dimension", dimension));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamp", timestamp));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filters[]", filters));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (orderDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_direction", orderDirection));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMonitoringBreakdownValidateBeforeCall(String MONITORING_METRIC_ID, String dimension, Integer timestamp, java.util.List<String> filters, String orderBy, String orderDirection, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'MONITORING_METRIC_ID' is set
        if (MONITORING_METRIC_ID == null) {
            throw new ApiException("Missing the required parameter 'MONITORING_METRIC_ID' when calling getMonitoringBreakdown(Async)");
        }
        

        okhttp3.Call localVarCall = getMonitoringBreakdownCall(MONITORING_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection, _callback);
        return localVarCall;

    }


    private ApiResponse<GetMonitoringBreakdownResponse> getMonitoringBreakdownWithHttpInfo(String MONITORING_METRIC_ID, String dimension, Integer timestamp, java.util.List<String> filters, String orderBy, String orderDirection) throws ApiException {
        okhttp3.Call localVarCall = getMonitoringBreakdownValidateBeforeCall(MONITORING_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection, null);
        Type localVarReturnType = new TypeToken<GetMonitoringBreakdownResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMonitoringBreakdownAsync(String MONITORING_METRIC_ID, String dimension, Integer timestamp, java.util.List<String> filters, String orderBy, String orderDirection, final ApiCallback<GetMonitoringBreakdownResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMonitoringBreakdownValidateBeforeCall(MONITORING_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection, _callback);
        Type localVarReturnType = new TypeToken<GetMonitoringBreakdownResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetMonitoringBreakdownRequest {
        private final String MONITORING_METRIC_ID;
        private String dimension;
        private Integer timestamp;
        private java.util.List<String> filters;
        private String orderBy;
        private String orderDirection;

        private APIgetMonitoringBreakdownRequest(String MONITORING_METRIC_ID) {
            this.MONITORING_METRIC_ID = MONITORING_METRIC_ID;
        }

        /**
         * Set dimension
         * @param dimension Dimension the specified value belongs to (optional)
         * @return APIgetMonitoringBreakdownRequest
         */
        public APIgetMonitoringBreakdownRequest dimension(String dimension) {
            this.dimension = dimension;
            return this;
        }

        /**
         * Set timestamp
         * @param timestamp Timestamp to limit results by. This value must be provided as a unix timestamp. Defaults to the current unix timestamp. (optional)
         * @return APIgetMonitoringBreakdownRequest
         */
        public APIgetMonitoringBreakdownRequest timestamp(Integer timestamp) {
            this.timestamp = timestamp;
            return this;
        }

        /**
         * Set filters
         * @param filters Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Filters endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)
         * @return APIgetMonitoringBreakdownRequest
         */
        public APIgetMonitoringBreakdownRequest filters(java.util.List<String> filters) {
            this.filters = filters;
            return this;
        }

        /**
         * Set orderBy
         * @param orderBy Value to order the results by (optional)
         * @return APIgetMonitoringBreakdownRequest
         */
        public APIgetMonitoringBreakdownRequest orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }

        /**
         * Set orderDirection
         * @param orderDirection Sort order. (optional)
         * @return APIgetMonitoringBreakdownRequest
         */
        public APIgetMonitoringBreakdownRequest orderDirection(String orderDirection) {
            this.orderDirection = orderDirection;
            return this;
        }

        /**
         * Build call for getMonitoringBreakdown
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMonitoringBreakdownCall(MONITORING_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection, _callback);
        }

        /**
         * Execute getMonitoringBreakdown request
         * @return GetMonitoringBreakdownResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GetMonitoringBreakdownResponse execute() throws ApiException {
            ApiResponse<GetMonitoringBreakdownResponse> localVarResp = getMonitoringBreakdownWithHttpInfo(MONITORING_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection);
            return localVarResp.getData();
        }

        /**
         * Execute getMonitoringBreakdown request with HTTP info returned
         * @return ApiResponse&lt;GetMonitoringBreakdownResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetMonitoringBreakdownResponse> executeWithHttpInfo() throws ApiException {
            return getMonitoringBreakdownWithHttpInfo(MONITORING_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection);
        }

        /**
         * Execute getMonitoringBreakdown request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetMonitoringBreakdownResponse> _callback) throws ApiException {
            return getMonitoringBreakdownAsync(MONITORING_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection, _callback);
        }
    }

    /**
     * Get Monitoring Breakdown
     * Gets breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score.
     * @param MONITORING_METRIC_ID ID of the Monitoring Metric (required)
     * @return APIgetMonitoringBreakdownRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetMonitoringBreakdownRequest getMonitoringBreakdown(String MONITORING_METRIC_ID) {
        return new APIgetMonitoringBreakdownRequest(MONITORING_METRIC_ID);
    }
    private okhttp3.Call getMonitoringHistogramTimeseriesCall(String MONITORING_HISTOGRAM_METRIC_ID, java.util.List<String> filters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/monitoring/metrics/{MONITORING_HISTOGRAM_METRIC_ID}/histogram-timeseries"
            .replaceAll("\\{" + "MONITORING_HISTOGRAM_METRIC_ID" + "\\}", localVarApiClient.escapeString(MONITORING_HISTOGRAM_METRIC_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filters[]", filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMonitoringHistogramTimeseriesValidateBeforeCall(String MONITORING_HISTOGRAM_METRIC_ID, java.util.List<String> filters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'MONITORING_HISTOGRAM_METRIC_ID' is set
        if (MONITORING_HISTOGRAM_METRIC_ID == null) {
            throw new ApiException("Missing the required parameter 'MONITORING_HISTOGRAM_METRIC_ID' when calling getMonitoringHistogramTimeseries(Async)");
        }
        

        okhttp3.Call localVarCall = getMonitoringHistogramTimeseriesCall(MONITORING_HISTOGRAM_METRIC_ID, filters, _callback);
        return localVarCall;

    }


    private ApiResponse<GetMonitoringHistogramTimeseriesResponse> getMonitoringHistogramTimeseriesWithHttpInfo(String MONITORING_HISTOGRAM_METRIC_ID, java.util.List<String> filters) throws ApiException {
        okhttp3.Call localVarCall = getMonitoringHistogramTimeseriesValidateBeforeCall(MONITORING_HISTOGRAM_METRIC_ID, filters, null);
        Type localVarReturnType = new TypeToken<GetMonitoringHistogramTimeseriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMonitoringHistogramTimeseriesAsync(String MONITORING_HISTOGRAM_METRIC_ID, java.util.List<String> filters, final ApiCallback<GetMonitoringHistogramTimeseriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMonitoringHistogramTimeseriesValidateBeforeCall(MONITORING_HISTOGRAM_METRIC_ID, filters, _callback);
        Type localVarReturnType = new TypeToken<GetMonitoringHistogramTimeseriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetMonitoringHistogramTimeseriesRequest {
        private final String MONITORING_HISTOGRAM_METRIC_ID;
        private java.util.List<String> filters;

        private APIgetMonitoringHistogramTimeseriesRequest(String MONITORING_HISTOGRAM_METRIC_ID) {
            this.MONITORING_HISTOGRAM_METRIC_ID = MONITORING_HISTOGRAM_METRIC_ID;
        }

        /**
         * Set filters
         * @param filters Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Filters endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)
         * @return APIgetMonitoringHistogramTimeseriesRequest
         */
        public APIgetMonitoringHistogramTimeseriesRequest filters(java.util.List<String> filters) {
            this.filters = filters;
            return this;
        }

        /**
         * Build call for getMonitoringHistogramTimeseries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMonitoringHistogramTimeseriesCall(MONITORING_HISTOGRAM_METRIC_ID, filters, _callback);
        }

        /**
         * Execute getMonitoringHistogramTimeseries request
         * @return GetMonitoringHistogramTimeseriesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GetMonitoringHistogramTimeseriesResponse execute() throws ApiException {
            ApiResponse<GetMonitoringHistogramTimeseriesResponse> localVarResp = getMonitoringHistogramTimeseriesWithHttpInfo(MONITORING_HISTOGRAM_METRIC_ID, filters);
            return localVarResp.getData();
        }

        /**
         * Execute getMonitoringHistogramTimeseries request with HTTP info returned
         * @return ApiResponse&lt;GetMonitoringHistogramTimeseriesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetMonitoringHistogramTimeseriesResponse> executeWithHttpInfo() throws ApiException {
            return getMonitoringHistogramTimeseriesWithHttpInfo(MONITORING_HISTOGRAM_METRIC_ID, filters);
        }

        /**
         * Execute getMonitoringHistogramTimeseries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetMonitoringHistogramTimeseriesResponse> _callback) throws ApiException {
            return getMonitoringHistogramTimeseriesAsync(MONITORING_HISTOGRAM_METRIC_ID, filters, _callback);
        }
    }

    /**
     * Get Monitoring Histogram Timeseries
     * Gets histogram timeseries information for a specific metric.
     * @param MONITORING_HISTOGRAM_METRIC_ID ID of the Monitoring Histogram Metric (required)
     * @return APIgetMonitoringHistogramTimeseriesRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetMonitoringHistogramTimeseriesRequest getMonitoringHistogramTimeseries(String MONITORING_HISTOGRAM_METRIC_ID) {
        return new APIgetMonitoringHistogramTimeseriesRequest(MONITORING_HISTOGRAM_METRIC_ID);
    }
    private okhttp3.Call getMonitoringTimeseriesCall(String MONITORING_METRIC_ID, java.util.List<String> filters, Integer timestamp, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/monitoring/metrics/{MONITORING_METRIC_ID}/timeseries"
            .replaceAll("\\{" + "MONITORING_METRIC_ID" + "\\}", localVarApiClient.escapeString(MONITORING_METRIC_ID.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filters[]", filters));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamp", timestamp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMonitoringTimeseriesValidateBeforeCall(String MONITORING_METRIC_ID, java.util.List<String> filters, Integer timestamp, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'MONITORING_METRIC_ID' is set
        if (MONITORING_METRIC_ID == null) {
            throw new ApiException("Missing the required parameter 'MONITORING_METRIC_ID' when calling getMonitoringTimeseries(Async)");
        }
        

        okhttp3.Call localVarCall = getMonitoringTimeseriesCall(MONITORING_METRIC_ID, filters, timestamp, _callback);
        return localVarCall;

    }


    private ApiResponse<GetMonitoringTimeseriesResponse> getMonitoringTimeseriesWithHttpInfo(String MONITORING_METRIC_ID, java.util.List<String> filters, Integer timestamp) throws ApiException {
        okhttp3.Call localVarCall = getMonitoringTimeseriesValidateBeforeCall(MONITORING_METRIC_ID, filters, timestamp, null);
        Type localVarReturnType = new TypeToken<GetMonitoringTimeseriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMonitoringTimeseriesAsync(String MONITORING_METRIC_ID, java.util.List<String> filters, Integer timestamp, final ApiCallback<GetMonitoringTimeseriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMonitoringTimeseriesValidateBeforeCall(MONITORING_METRIC_ID, filters, timestamp, _callback);
        Type localVarReturnType = new TypeToken<GetMonitoringTimeseriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetMonitoringTimeseriesRequest {
        private final String MONITORING_METRIC_ID;
        private java.util.List<String> filters;
        private Integer timestamp;

        private APIgetMonitoringTimeseriesRequest(String MONITORING_METRIC_ID) {
            this.MONITORING_METRIC_ID = MONITORING_METRIC_ID;
        }

        /**
         * Set filters
         * @param filters Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Filters endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)
         * @return APIgetMonitoringTimeseriesRequest
         */
        public APIgetMonitoringTimeseriesRequest filters(java.util.List<String> filters) {
            this.filters = filters;
            return this;
        }

        /**
         * Set timestamp
         * @param timestamp Timestamp to use as the start of the timeseries data. This value must be provided as a unix timestamp. Defaults to 30 minutes ago. (optional)
         * @return APIgetMonitoringTimeseriesRequest
         */
        public APIgetMonitoringTimeseriesRequest timestamp(Integer timestamp) {
            this.timestamp = timestamp;
            return this;
        }

        /**
         * Build call for getMonitoringTimeseries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMonitoringTimeseriesCall(MONITORING_METRIC_ID, filters, timestamp, _callback);
        }

        /**
         * Execute getMonitoringTimeseries request
         * @return GetMonitoringTimeseriesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GetMonitoringTimeseriesResponse execute() throws ApiException {
            ApiResponse<GetMonitoringTimeseriesResponse> localVarResp = getMonitoringTimeseriesWithHttpInfo(MONITORING_METRIC_ID, filters, timestamp);
            return localVarResp.getData();
        }

        /**
         * Execute getMonitoringTimeseries request with HTTP info returned
         * @return ApiResponse&lt;GetMonitoringTimeseriesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetMonitoringTimeseriesResponse> executeWithHttpInfo() throws ApiException {
            return getMonitoringTimeseriesWithHttpInfo(MONITORING_METRIC_ID, filters, timestamp);
        }

        /**
         * Execute getMonitoringTimeseries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetMonitoringTimeseriesResponse> _callback) throws ApiException {
            return getMonitoringTimeseriesAsync(MONITORING_METRIC_ID, filters, timestamp, _callback);
        }
    }

    /**
     * Get Monitoring Timeseries
     * Gets Time series information for a specific metric along with the number of concurrent viewers.
     * @param MONITORING_METRIC_ID ID of the Monitoring Metric (required)
     * @return APIgetMonitoringTimeseriesRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetMonitoringTimeseriesRequest getMonitoringTimeseries(String MONITORING_METRIC_ID) {
        return new APIgetMonitoringTimeseriesRequest(MONITORING_METRIC_ID);
    }
    private okhttp3.Call listMonitoringDimensionsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/monitoring/dimensions";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMonitoringDimensionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listMonitoringDimensionsCall(_callback);
        return localVarCall;

    }


    private ApiResponse<ListMonitoringDimensionsResponse> listMonitoringDimensionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listMonitoringDimensionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListMonitoringDimensionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMonitoringDimensionsAsync(final ApiCallback<ListMonitoringDimensionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMonitoringDimensionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListMonitoringDimensionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistMonitoringDimensionsRequest {

        private APIlistMonitoringDimensionsRequest() {
        }

        /**
         * Build call for listMonitoringDimensions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMonitoringDimensionsCall(_callback);
        }

        /**
         * Execute listMonitoringDimensions request
         * @return ListMonitoringDimensionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ListMonitoringDimensionsResponse execute() throws ApiException {
            ApiResponse<ListMonitoringDimensionsResponse> localVarResp = listMonitoringDimensionsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute listMonitoringDimensions request with HTTP info returned
         * @return ApiResponse&lt;ListMonitoringDimensionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListMonitoringDimensionsResponse> executeWithHttpInfo() throws ApiException {
            return listMonitoringDimensionsWithHttpInfo();
        }

        /**
         * Execute listMonitoringDimensions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListMonitoringDimensionsResponse> _callback) throws ApiException {
            return listMonitoringDimensionsAsync(_callback);
        }
    }

    /**
     * List Monitoring Dimensions
     * Lists available monitoring dimensions.
     * @return APIlistMonitoringDimensionsRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIlistMonitoringDimensionsRequest listMonitoringDimensions() {
        return new APIlistMonitoringDimensionsRequest();
    }
    private okhttp3.Call listMonitoringMetricsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/monitoring/metrics";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMonitoringMetricsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listMonitoringMetricsCall(_callback);
        return localVarCall;

    }


    private ApiResponse<ListMonitoringMetricsResponse> listMonitoringMetricsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listMonitoringMetricsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListMonitoringMetricsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMonitoringMetricsAsync(final ApiCallback<ListMonitoringMetricsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMonitoringMetricsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListMonitoringMetricsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistMonitoringMetricsRequest {

        private APIlistMonitoringMetricsRequest() {
        }

        /**
         * Build call for listMonitoringMetrics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMonitoringMetricsCall(_callback);
        }

        /**
         * Execute listMonitoringMetrics request
         * @return ListMonitoringMetricsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ListMonitoringMetricsResponse execute() throws ApiException {
            ApiResponse<ListMonitoringMetricsResponse> localVarResp = listMonitoringMetricsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute listMonitoringMetrics request with HTTP info returned
         * @return ApiResponse&lt;ListMonitoringMetricsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListMonitoringMetricsResponse> executeWithHttpInfo() throws ApiException {
            return listMonitoringMetricsWithHttpInfo();
        }

        /**
         * Execute listMonitoringMetrics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
            <caption>Response Summary</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListMonitoringMetricsResponse> _callback) throws ApiException {
            return listMonitoringMetricsAsync(_callback);
        }
    }

    /**
     * List Monitoring Metrics
     * Lists available monitoring metrics.
     * @return APIlistMonitoringMetricsRequest
     * @http.response.details
     <table border="1">
        <caption>Response Summary</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIlistMonitoringMetricsRequest listMonitoringMetrics() {
        return new APIlistMonitoringMetricsRequest();
    }
}
